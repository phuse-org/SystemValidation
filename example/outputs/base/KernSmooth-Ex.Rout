
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "KernSmooth"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('KernSmooth')
KernSmooth 2.23 loaded
Copyright M. P. Wand 1997-2009
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("bkde")
> ### * bkde
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bkde
> ### Title: Compute a Binned Kernel Density Estimate
> ### Aliases: bkde
> ### Keywords: distribution smooth
> 
> ### ** Examples
> 
> data(geyser, package="MASS")
> x <- geyser$duration
> est <- bkde(x, bandwidth=0.25)
> plot(est, type="l")
> 
> 
> 
> cleanEx()
> nameEx("bkde2D")
> ### * bkde2D
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bkde2D
> ### Title: Compute a 2D Binned Kernel Density Estimate
> ### Aliases: bkde2D
> ### Keywords: distribution smooth
> 
> ### ** Examples
> 
> data(geyser, package="MASS")
> x <- cbind(geyser$duration, geyser$waiting)
> est <- bkde2D(x, bandwidth=c(0.7, 7))
> contour(est$x1, est$x2, est$fhat)
> persp(est$fhat)
> 
> 
> 
> cleanEx()
> nameEx("bkfe")
> ### * bkfe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bkfe
> ### Title: Compute a Binned Kernel Functional Estimate
> ### Aliases: bkfe
> ### Keywords: smooth
> 
> ### ** Examples
> 
> data(geyser, package="MASS")
> x <- geyser$duration
> est <- bkfe(x, drv=4, bandwidth=0.3)
> 
> 
> 
> cleanEx()
> nameEx("dpih")
> ### * dpih
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dpih
> ### Title: Select a Histogram Bin Width
> ### Aliases: dpih
> ### Keywords: smooth
> 
> ### ** Examples
> 
> data(geyser, package="MASS")
> x <- geyser$duration
> h <- dpih(x)
> bins <- seq(min(x)-h, max(x)+h, by=h)
> hist(x, breaks=bins)
> 
> 
> 
> cleanEx()
> nameEx("dpik")
> ### * dpik
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dpik
> ### Title: Select a Bandwidth for Kernel Density Estimation
> ### Aliases: dpik
> ### Keywords: smooth
> 
> ### ** Examples
> 
> data(geyser, package="MASS")
> x <- geyser$duration
> h <- dpik(x)
> est <- bkde(x, bandwidth=h)
> plot(est,type="l")
> 
> 
> 
> cleanEx()
> nameEx("dpill")
> ### * dpill
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dpill
> ### Title: Select a Bandwidth for Local Linear Regression
> ### Aliases: dpill
> ### Keywords: smooth
> 
> ### ** Examples
> 
> data(geyser, package = "MASS")
> x <- geyser$duration
> y <- geyser$waiting
> plot(x, y)
> h <- dpill(x, y)
> fit <- locpoly(x, y, bandwidth = h)
> lines(fit)
> 
> 
> 
> cleanEx()
> nameEx("locpoly")
> ### * locpoly
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: locpoly
> ### Title: Estimate Functions Using Local Polynomials
> ### Aliases: locpoly
> ### Keywords: smooth regression
> 
> ### ** Examples
> 
> data(geyser, package = "MASS")
> # local linear density estimate
> x <- geyser$duration
> est <- locpoly(x, bandwidth = 0.25)
> plot(est, type = "l")
> 
> # local linear regression estimate
> y <- geyser$waiting
> plot(x, y)
> fit <- locpoly(x, y, bandwidth = 0.25)
> lines(fit)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.195 0.012 0.207 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
