
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(compiler)
> 
> # set to TRUE for debugging
> only.print <- FALSE
> 
> testError <- function(expr, handler) {
+     err <- tryCatch(expr, error = handler)
+     stopifnot(identical(err, TRUE))
+ }
> 
> testWarning <- function(expr, handler) {
+     warn <- tryCatch(expr, warning = handler)
+     stopifnot(identical(warn, TRUE))
+ }
> 
> w <- function(expr, call = substitute(expr)) {
+     if (only.print)
+        testWarning(expr = expr, handler = function(e) {
+            cat("WARNING-MESSAGE: \"", e$message, "\"\nWARNING-CALL: ", deparse(e$call), "\n", sep="")
+            TRUE
+        })
+     else
+        testWarning(expr = expr, handler = function(e) {
+            stopifnot(identical(e$call, call))
+            TRUE
+        })
+ }
> 
> e <- function(expr, call = substitute(expr)) {
+     if (only.print)
+        testError(expr = expr, handler = function(e) {
+            cat("ERROR-MESSAGE: \"", e$message, "\"\nERROR-CALL: ", deparse(e$call), "\n", sep="")
+            TRUE
+        })
+     else
+        testError(expr = expr, handler = function(e) {
+            stopifnot(identical(e$call, call))
+            TRUE
+        })
+ }
> 
> f <- function(x = 1:2,
+         y = -1,
+         z = c(a=1, b=2, c=2, d=3),
+         u = list(inner = c(a=1,b=2,c=3,d=4)),
+         v = list(),
+         ...) {
+ 
+ 
+     w(x[1:3] <- 11:12)
+         # quote(`[<-`(x, 1:3, value = 11:12))
+     w(min(...))
+     w(sqrt(y))
+ 
+     e(names(z[1:2]) <- c("X", "Y", "Z"))
+         # quote(`names<-`(z[1:2], value = c("X", "Y", "Z"))
+     e(names(z[c(-1,1)]) <- c("X", "Y", "Z"),
+         # quote(z[c(-1, 1)])) <=== this would be nice, but not possible at the moment
+         quote(`*tmp*`[c(-1, 1)]))
+     w(names(u$inner)[2:4] <- v[1:2] <- c("X", "Y", "Z", "U")[1:2])
+         # quote(`[<-`(names(u$inner), 2:4, value = v[1:2] <- c("X", "Y", "Z", "U")[1:2]))
+ 
+     ##_ Not anymore, as stopifnot() massages its error/warning message:
+     ##_ e(stopifnot(is.numeric(dummy)))
+ }
> 
> old=options()
> 
> oldoptimize <- getCompilerOption("optimize")
> oldjit <- enableJIT(3)
> 
> for (opt in 2:3) {
+     setCompilerOptions(optimize=opt)
+     f()
+ }
> 
> ## test that AST and compiler errors/warnings agree
> 
> enableJIT(0)
[1] 3
> testexpr <- function(fun) {
+   resast <- tryCatch(fun(), error = function(e) e, warning = function(e) e)
+   cfun <- cmpfun(fun)
+   rescmp <- tryCatch(cfun(), error = function(e) e, warning = function(e) e)
+ 
+   show(resast)
+   show(rescmp)
+ 
+   stopifnot(identical(resast, rescmp))
+ }
> 
> testexpr(function() { dummy()$e })
<simpleError in dummy(): could not find function "dummy">
<simpleError in dummy(): could not find function "dummy">
> testexpr(function() { beta(-1, NULL) })
<simpleError in beta(-1, NULL): non-numeric argument to mathematical function>
<simpleError in beta(-1, NULL): non-numeric argument to mathematical function>
> testexpr(function() { inherits(1, log) })
<simpleError in inherits(1, log): 'what' must be a character vector>
<simpleError in inherits(1, log): 'what' must be a character vector>
> 
> enableJIT(oldjit)
[1] 0
> setCompilerOptions(optimize = oldoptimize)
> 
