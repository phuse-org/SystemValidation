
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## test (non-conditional) explicit inheritance
> setClass("xy", representation(x="numeric", y="numeric"))
> 
> setIs("xy", "complex",
+       coerce = function(from) complex(real = from@x, imaginary = from@y),
+       replace = function(from, value) {
+           from@x <- Re(value)
+           from@y <- Im(value)
+           from
+       })
> 
> set.seed(124)
> x1 <- rnorm(10)
> y1 <- rnorm(10)
> cc <- complex(real = x1, imaginary=y1)
> xyc <- new("xy", x = x1, y = y1)
> stopifnot(identical(cc, as(xyc, "complex")))
> as(xyc, "complex") <- cc * 1i
> stopifnot(identical(xyc, new("xy", x = -y1, y = x1)))
> 
> setGeneric("size", function(x)standardGeneric("size"))
[1] "size"
> ## check that generic for size() was created w/o a default method
> stopifnot(is(size, "standardGeneric"),
+           is.null(selectMethod("size", "ANY",optional=TRUE)))
> 
> setMethod("size", "vector", function(x)length(x))
> 
> ## class "xy" should inherit the vector method through complex
> stopifnot(identical(size(xyc), length(x1)))
> removeClass("xy")
[1] TRUE
> removeGeneric("size")
[1] TRUE
> 
> 
> ### Related to  numeric <-> double <-> integer  proposals, end of 2015, on R-devel
> myN   <- setClass("myN",   contains="numeric")
> myNid <- setClass("myNid", contains="numeric", representation(id="character"))
> NN <-    setClass("NN", representation(x="numeric"))
> 
> (m1 <- myN  (1:3))
An object of class "myN"
[1] 1 2 3
> (m2 <- myNid(1:3, id = "i3"))
An object of class "myNid"
[1] 1 2 3
Slot "id":
[1] "i3"

> tools::assertError(NN (1:3))# in all R versions
> nn <- myN(2*pi)
> ##                     # current R  |  (not existing)
> ##                     # -----------|----------
> class(getDataPart(m1)) # integer    |  numeric
[1] "integer"
> class(getDataPart(m2)) # integer    |  numeric
[1] "integer"
> ## check for now [[conceivably, these *could* change !]] :
> stopifnot(identical(getDataPart(m1), 1:3),
+ 	  identical(getDataPart(m2), 1:3),
+ 	  identical(S3Part(m1, strict=TRUE), 1:3),
+ 	  identical(S3Part(m2, strict=TRUE), 1:3),
+ 	  identical(2*pi, S3Part(nn, strict = TRUE)))
> 
> if(FALSE) ## --- all these fail still:
+ stopifnot(
+     identical(as(1L, "numeric"), as.numeric(1L))
+     ,
+     identical(as(1L, "numeric"), 1.0)
+     ,
+     is.double(as(1L, "double"))
+     )
> 
