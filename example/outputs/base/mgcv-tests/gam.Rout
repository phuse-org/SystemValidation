
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## \donttest examples from gam
> 
> require(mgcv)
Loading required package: mgcv
Loading required package: nlme
This is mgcv 1.8-33. For overview type 'help("mgcv-package")'.
> 
> ## now simulate poisson data...
> set.seed(6)
> dat <- gamSim(1,n=2000,dist="poisson",scale=.1)
Gu & Wahba 4 term additive model
> 
> ## use "cr" basis to save time, with 2000 data...
> b2<-gam(y~s(x0,bs="cr")+s(x1,bs="cr")+s(x2,bs="cr")+
+         s(x3,bs="cr"),family=poisson,data=dat,method="REML")
> plot(b2,pages=1)
> 
> ## drop x3, but initialize sp's from previous fit, to 
> ## save more time...
> 
> b2a<-gam(y~s(x0,bs="cr")+s(x1,bs="cr")+s(x2,bs="cr"),
+          family=poisson,data=dat,method="REML",
+          in.out=list(sp=b2$sp[1:3],scale=1))
> par(mfrow=c(2,2))
> plot(b2a)
> 
> par(mfrow=c(1,1))
> ## similar example using performance iteration
> dat <- gamSim(1,n=400,dist="poisson",scale=.25)
Gu & Wahba 4 term additive model
> 
> b3<-gam(y~s(x0)+s(x1)+s(x2)+s(x3),family=poisson,
+         data=dat,optimizer="perf")
Warning message:
performance iteration with gam is deprecated, use bam instead 
> plot(b3,pages=1)
> 
> ## repeat using GACV as in Wood 2008...
> 
> b4<-gam(y~s(x0)+s(x1)+s(x2)+s(x3),family=poisson,
+         data=dat,method="GACV.Cp",scale=-1)
> plot(b4,pages=1)
> 
> ## repeat using REML as in Wood 2011...
> 
> b5<-gam(y~s(x0)+s(x1)+s(x2)+s(x3),family=poisson,
+         data=dat,method="REML")
> plot(b5,pages=1)
> 
>  
> ## a binary example (see ?gam.models for large dataset version)...
> 
> dat <- gamSim(1,n=400,dist="binary",scale=.33)
Gu & Wahba 4 term additive model
> 
> lr.fit <- gam(y~s(x0)+s(x1)+s(x2)+s(x3),family=binomial,
+               data=dat,method="REML")
> 
> ## plot model components with truth overlaid in red
> op <- par(mfrow=c(2,2))
> fn <- c("f0","f1","f2","f3");xn <- c("x0","x1","x2","x3")
> for (k in 1:4) {
+   plot(lr.fit,residuals=TRUE,select=k)
+   ff <- dat[[fn[k]]];xx <- dat[[xn[k]]]
+   ind <- sort.int(xx,index.return=TRUE)$ix
+   lines(xx[ind],(ff-mean(ff))[ind]*.33,col=2)
+ }
> par(op)
> anova(lr.fit)

Family: binomial 
Link function: logit 

Formula:
y ~ s(x0) + s(x1) + s(x2) + s(x3)

Approximate significance of smooth terms:
        edf Ref.df Chi.sq  p-value
s(x0) 1.545  1.903  0.685    0.654
s(x1) 1.000  1.000 19.110 1.22e-05
s(x2) 5.073  6.186 42.870  < 2e-16
s(x3) 1.000  1.000  0.486    0.486
> lr.fit1 <- gam(y~s(x0)+s(x1)+s(x2),family=binomial,
+                data=dat,method="REML")
> lr.fit2 <- gam(y~s(x1)+s(x2),family=binomial,
+                data=dat,method="REML")
> AIC(lr.fit,lr.fit1,lr.fit2)
               df      AIC
lr.fit  11.089965 430.2261
lr.fit1 10.069774 428.7262
lr.fit2  7.779755 425.5283
> 
> ## For a Gamma example, see ?summary.gam...
> 
> ## For inverse Gaussian, see ?rig
> 
> ## now 2D smoothing...
> 
> eg <- gamSim(2,n=500,scale=.1)
Bivariate smoothing example
> attach(eg)
> 
> op <- par(mfrow=c(2,2),mar=c(4,4,1,1))
> 
> contour(truth$x,truth$z,truth$f) ## contour truth
> b4 <- gam(y~s(x,z),data=data) ## fit model
> fit1 <- matrix(predict.gam(b4,pr,se=FALSE),40,40)
> contour(truth$x,truth$z,fit1)   ## contour fit
> persp(truth$x,truth$z,truth$f)    ## persp truth
> vis.gam(b4)                     ## persp fit
> detach(eg)
> par(op)
> 
> ##################################################
> ## largish dataset example with user defined knots
> ##################################################
> 
> par(mfrow=c(2,2))
> n <- 5000
> eg <- gamSim(2,n=n,scale=.5)
Bivariate smoothing example
> attach(eg)
> 
> ind<-sample(1:n,200,replace=FALSE)
> b5<-gam(y~s(x,z,k=40),data=data,
+         knots=list(x=data$x[ind],z=data$z[ind]))
> ## various visualizations
> vis.gam(b5,theta=30,phi=30)
> plot(b5)
> plot(b5,scheme=1,theta=50,phi=20)
> plot(b5,scheme=2)
> 
> par(mfrow=c(1,1))
> ## and a pure "knot based" spline of the same data
> b6<-gam(y~s(x,z,k=64),data=data,knots=list(x= rep((1:8-0.5)/8,8),
+         z=rep((1:8-0.5)/8,rep(8,8))))
> vis.gam(b6,color="heat",theta=30,phi=30)
> 
> ## varying the default large dataset behaviour via `xt'
> b7 <- gam(y~s(x,z,k=40,xt=list(max.knots=500,seed=2)),data=data)
> vis.gam(b7,theta=30,phi=30)
> detach(eg)
> 
