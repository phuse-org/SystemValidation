
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "nlme"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('nlme')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ACF")
> ### * ACF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ACF
> ### Title: Autocorrelation Function
> ### Aliases: ACF
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("ACF.gls")
> ### * ACF.gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ACF.gls
> ### Title: Autocorrelation Function for gls Residuals
> ### Aliases: ACF.gls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary)
> ACF(fm1, form = ~ 1 | Mare)
   lag       ACF
1    0 1.0000000
2    1 0.7258275
3    2 0.6339096
4    3 0.5593745
5    4 0.5482669
6    5 0.5137809
7    6 0.5349031
8    7 0.5127862
9    8 0.4811799
10   9 0.4382669
11  10 0.3770148
12  11 0.3371071
13  12 0.2916178
14  13 0.2764320
15  14 0.2268484
> 
> # Pinheiro and Bates, p. 255-257
> fm1Dial.gls <- gls(rate ~
+   (pressure+I(pressure^2)+I(pressure^3)+I(pressure^4))*QB,
+                    Dialyzer)
> 
> fm2Dial.gls <- update(fm1Dial.gls,
+                  weights = varPower(form = ~ pressure))
> 
> ACF(fm2Dial.gls, form = ~ 1 | Subject)
  lag        ACF
1   0 1.00000000
2   1 0.77085051
3   2 0.63230090
4   3 0.40830562
5   4 0.20073678
6   5 0.07311642
7   6 0.07780240
> 
> 
> 
> cleanEx()
> nameEx("ACF.lme")
> ### * ACF.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ACF.lme
> ### Title: Autocorrelation Function for lme Residuals
> ### Aliases: ACF.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(follicles ~ sin(2*pi*Time) + cos(2*pi*Time),
+            Ovary, random = ~ sin(2*pi*Time) | Mare)
> ACF(fm1, maxLag = 11)
   lag          ACF
1    0  1.000000000
2    1  0.380191824
3    2  0.180089173
4    3  0.036688753
5    4  0.059951162
6    5  0.001916046
7    6  0.063499044
8    7  0.070979841
9    8  0.049660461
10   9  0.029428152
11  10 -0.032162165
12  11 -0.074003608
> 
> # Pinheiro and Bates, p240-241
> fm1Over.lme <- lme(follicles  ~ sin(2*pi*Time) +
+            cos(2*pi*Time), data=Ovary,
+      random=pdDiag(~sin(2*pi*Time)) )
> (ACF.fm1Over <- ACF(fm1Over.lme, maxLag=10))
   lag          ACF
1    0  1.000000000
2    1  0.379480128
3    2  0.179722025
4    3  0.035692749
5    4  0.059778881
6    5  0.002096953
7    6  0.064327101
8    7  0.071634861
9    8  0.048578247
10   9  0.027782488
11  10 -0.034275979
> plot(ACF.fm1Over, alpha=0.01) 
> 
> 
> 
> cleanEx()
> nameEx("Cefamandole")
> ### * Cefamandole
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Cefamandole
> ### Title: Pharmacokinetics of Cefamandole
> ### Aliases: Cefamandole
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot(Cefamandole)
> fm1 <- nlsList(SSbiexp, data = Cefamandole)
> summary(fm1)
Call:
  Model: conc ~ SSbiexp(Time, A1, lrc1, A2, lrc2) | Subject 
   Data: Cefamandole 

Coefficients:
   A1 
  Estimate Std. Error  t value     Pr(>|t|)
2 191.3341   21.38625 8.946595 2.800684e-12
1 497.5333  170.10972 2.924779 2.227380e-03
6 121.7071   22.08024 5.512036 4.938589e-03
3 460.8836  137.08512 3.362025 7.081633e-03
4 485.3220   99.84752 4.860631 1.699109e-06
5 411.5147   51.41634 8.003579 1.513503e-04
   lrc1 
   Estimate Std. Error    t value     Pr(>|t|)
2 -2.599155  0.2354814 -11.037623 3.463458e-13
1 -1.674042  0.2283020  -7.332577 1.302103e-06
6 -2.597524  0.3801661  -6.832603 1.237735e-03
3 -1.728710  0.2037836  -8.483070 6.814224e-06
4 -1.852475  0.1850105 -10.012806 1.725950e-09
5 -2.085231  0.1729003 -12.060312 4.629005e-06
   A2 
   Estimate Std. Error  t value     Pr(>|t|)
2  34.39548   26.19982 1.312814 1.852725e-04
1  63.07492   14.67306 4.298690 1.336682e-04
6  99.12318   27.69506 3.579093 4.202739e-02
3  88.41797   11.82932 7.474474 2.063732e-05
4  99.60164   18.89437 5.271499 8.044466e-07
5 164.78474   24.35931 6.764755 5.489025e-04
   lrc2 
   Estimate Std. Error    t value     Pr(>|t|)
2 -4.160739  0.5475810  -7.598398 1.417916e-11
1 -3.883162  0.2081573 -18.654939 1.629855e-10
6 -4.132324  0.1965967 -21.019294 8.412511e-08
3 -4.070260  0.1316273 -30.922612 2.839152e-11
4 -3.826142  0.1533673 -24.947574 2.049709e-13
5 -3.832660  0.1086349 -35.280209 1.629080e-10

Residual standard error: 3.815833 on 60 degrees of freedom

> 
> 
> 
> cleanEx()
> nameEx("Coef")
> ### * Coef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Coef
> ### Title: Assign Values to Coefficients
> ### Aliases: coef<- coefficients<-
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("Covariate")
> ### * Covariate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Covariate
> ### Title: Assign Covariate Values
> ### Aliases: covariate<-
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("Covariate.varFunc")
> ### * Covariate.varFunc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Covariate.varFunc
> ### Title: Assign varFunc Covariate
> ### Aliases: covariate<-.varFunc
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varPower(1.1, form = ~age)
> covariate(vf1) <- Orthodont[["age"]]
> 
> 
> 
> cleanEx()
> nameEx("Dim")
> ### * Dim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Dim
> ### Title: Extract Dimensions from an Object
> ### Aliases: Dim Dim.default
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("Dim.corSpatial")
> ### * Dim.corSpatial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Dim.corSpatial
> ### Title: Dimensions of a corSpatial Object
> ### Aliases: Dim.corSpatial
> ### Keywords: models
> 
> ### ** Examples
> 
> Dim(corGaus(), getGroups(Orthodont))
$N
[1] 108

$M
[1] 27

$spClass
[1] 3

$sumLenSq
[1] 432

$len
groups
M01 M02 M03 M04 M05 M06 M07 M08 M09 M10 M11 M12 M13 M14 M15 M16 F01 F02 F03 F04 
  4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4 
F05 F06 F07 F08 F09 F10 F11 
  4   4   4   4   4   4   4 

$start
    M01 M02 M03 M04 M05 M06 M07 M08 M09 M10 M11 M12 M13 M14 M15 M16 F01 F02 F03 
  0   6  12  18  24  30  36  42  48  54  60  66  72  78  84  90  96 102 108 114 
F04 F05 F06 F07 F08 F09 F10 
120 126 132 138 144 150 156 

> 
> cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, q = 1)
> cs1ARMA <- Initialize(cs1ARMA, data = Orthodont)
> Dim(cs1ARMA)
$N
[1] 108

$M
[1] 27

$maxLen
[1] 4

$sumLenSq
[1] 432

$len
groups
M01 M02 M03 M04 M05 M06 M07 M08 M09 M10 M11 M12 M13 M14 M15 M16 F01 F02 F03 F04 
  4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4 
F05 F06 F07 F08 F09 F10 F11 
  4   4   4   4   4   4   4 

$start
 [1]   0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68  72
[20]  76  80  84  88  92  96 100 104

> 
> 
> 
> cleanEx()
> nameEx("Dim.corStruct")
> ### * Dim.corStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Dim.corStruct
> ### Title: Dimensions of a corStruct Object
> ### Aliases: Dim.corStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> Dim(corAR1(), getGroups(Orthodont))
$N
[1] 108

$M
[1] 27

$maxLen
[1] 4

$sumLenSq
[1] 432

$len
groups
M01 M02 M03 M04 M05 M06 M07 M08 M09 M10 M11 M12 M13 M14 M15 M16 F01 F02 F03 F04 
  4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4   4 
F05 F06 F07 F08 F09 F10 F11 
  4   4   4   4   4   4   4 

$start
 [1]   0   4   8  12  16  20  24  28  32  36  40  44  48  52  56  60  64  68  72
[20]  76  80  84  88  92  96 100 104

> 
> 
> 
> cleanEx()
> nameEx("Dim.pdMat")
> ### * Dim.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Dim.pdMat
> ### Title: Dimensions of a pdMat Object
> ### Aliases: Dim.pdMat Dim.pdCompSymm Dim.pdDiag Dim.pdIdent Dim.pdNatural
> ###   Dim.pdSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> Dim(pdSymm(diag(3)))
[1] 3 3
> 
> 
> 
> cleanEx()
> nameEx("Extract.pdMat")
> ### * Extract.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: [.pdMat
> ### Title: Subscript a pdMat Object
> ### Aliases: [.pdMat [.pdBlocked [<-.pdMat
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdSymm(diag(3))
> pd1[1, , drop = FALSE]
     [,1] [,2] [,3]
[1,]    1    0    0
> pd1[1:2, 1:2] <- 3 * diag(2)
> 
> 
> 
> cleanEx()
> nameEx("Initialize")
> ### * Initialize
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Initialize
> ### Title: Initialize Object
> ### Aliases: Initialize
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("Initialize.corStruct")
> ### * Initialize.corStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Initialize.corStruct
> ### Title: Initialize corStruct Object
> ### Aliases: Initialize.corStruct Initialize.corAR1 Initialize.corARMA
> ###   Initialize.corCAR1 Initialize.corCompSymm Initialize.corHF
> ###   Initialize.corIdent Initialize.corLin Initialize.corNatural
> ###   Initialize.corSpatial Initialize.corSpher Initialize.corSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corAR1(form = ~ 1 | Subject)
> cs1 <- Initialize(cs1, data = Orthodont)
> 
> 
> 
> cleanEx()
> nameEx("Initialize.varFunc")
> ### * Initialize.varFunc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Initialize.varFunc
> ### Title: Initialize varFunc Object
> ### Aliases: Initialize.varFunc Initialize.varComb Initialize.varConstPower
> ###   Initialize.varExp Initialize.varFixed Initialize.varIdent
> ###   Initialize.varPower
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varPower( form = ~ age | Sex )
> vf1 <- Initialize( vf1, Orthodont )
> 
> 
> 
> cleanEx()
> nameEx("LDEsysMat")
> ### * LDEsysMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: LDEsysMat
> ### Title: Generate system matrix for LDEs
> ### Aliases: LDEsysMat
> ### Keywords: models
> 
> ### ** Examples
> 
> # incidence matrix for a two compartment open system
> incidence <-
+   matrix(c(1,1,2,2,2,1,3,2,0), ncol = 3, byrow = TRUE,
+    dimnames = list(NULL, c("Par", "From", "To")))
> incidence
     Par From To
[1,]   1    1  2
[2,]   2    2  1
[3,]   3    2  0
> LDEsysMat(c(1.2, 0.3, 0.4), incidence)
     [,1] [,2]
[1,] -1.2  0.3
[2,]  1.2 -0.7
> 
> 
> 
> cleanEx()
> nameEx("MathAchieve")
> ### * MathAchieve
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MathAchieve
> ### Title: Mathematics achievement scores
> ### Aliases: MathAchieve
> ### Keywords: datasets
> 
> ### ** Examples
> 
> summary(MathAchieve)
     School     Minority       Sex            SES               MathAch      
 2305   :  67   No :5211   Male  :3390   Min.   :-3.758000   Min.   :-2.832  
 5619   :  66   Yes:1974   Female:3795   1st Qu.:-0.538000   1st Qu.: 7.275  
 4292   :  65                            Median : 0.002000   Median :13.131  
 8857   :  64                            Mean   : 0.000143   Mean   :12.748  
 4042   :  64                            3rd Qu.: 0.602000   3rd Qu.:18.317  
 3610   :  64                            Max.   : 2.692000   Max.   :24.993  
 (Other):6795                                                                
    MEANSES         
 Min.   :-1.188000  
 1st Qu.:-0.317000  
 Median : 0.038000  
 Mean   : 0.006138  
 3rd Qu.: 0.333000  
 Max.   : 0.831000  
                    
> 
> 
> 
> cleanEx()
> nameEx("Matrix.pdMat")
> ### * Matrix.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Matrix.pdMat
> ### Title: Assign Matrix to a pdMat or pdBlocked Object
> ### Aliases: matrix<-.pdMat matrix<-.pdBlocked
> ### Keywords: models
> 
> ### ** Examples
> 
> class(pd1 <- pdSymm(diag(3))) # "pdSymm" "pdMat"
[1] "pdSymm" "pdMat" 
> matrix(pd1) <- diag(1:3)
> pd1
Positive definite matrix structure of class pdSymm representing
     [,1] [,2] [,3]
[1,]    1    0    0
[2,]    0    2    0
[3,]    0    0    3
> 
> 
> 
> cleanEx()
> nameEx("Matrix.reStruct")
> ### * Matrix.reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Matrix.reStruct
> ### Title: Assign reStruct Matrices
> ### Aliases: matrix<-.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(list(Dog = ~day, Side = ~1), data = Pixel)
> matrix(rs1) <- list(diag(2), 3)
> 
> 
> 
> cleanEx()
> nameEx("Names")
> ### * Names
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Names
> ### Title: Names Associated with an Object
> ### Aliases: Names Names<-
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("Names.formula")
> ### * Names.formula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Names.formula
> ### Title: Extract Names from a formula
> ### Aliases: Names.formula Names.listForm
> ### Keywords: models
> 
> ### ** Examples
> 
> Names(distance ~ Sex * age, data = Orthodont)
[1] "(Intercept)"   "SexFemale"     "age"           "SexFemale:age"
> 
> 
> 
> cleanEx()
> nameEx("Names.pdBlocked")
> ### * Names.pdBlocked
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Names.pdBlocked
> ### Title: Names of a pdBlocked Object
> ### Aliases: Names.pdBlocked Names<-.pdBlocked
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdBlocked(list(~Sex - 1, ~age - 1), data = Orthodont)
> Names(pd1)
[1] "SexMale"   "SexFemale" "age"      
> 
> 
> 
> cleanEx()
> nameEx("Names.pdMat")
> ### * Names.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Names.pdMat
> ### Title: Names of a pdMat Object
> ### Aliases: Names.pdMat Names<-.pdMat
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdSymm(~age, data = Orthodont)
> Names(pd1)
[1] "(Intercept)" "age"        
> 
> 
> 
> cleanEx()
> nameEx("Names.reStruct")
> ### * Names.reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Names.reStruct
> ### Title: Names of an reStruct Object
> ### Aliases: Names.reStruct Names<-.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(list(Dog = ~day, Side = ~1), data = Pixel)
> Names(rs1)
$Side
[1] "(Intercept)"

$Dog
[1] "(Intercept)" "day"        

> 
> 
> 
> cleanEx()
> nameEx("Orthodont")
> ### * Orthodont
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Orthodont
> ### Title: Growth curve data on an orthdontic measurement
> ### Aliases: Orthodont
> ### Keywords: datasets
> 
> ### ** Examples
> 
> formula(Orthodont)
distance ~ age | Subject
> plot(Orthodont)
> 
> 
> 
> cleanEx()
> nameEx("Pixel")
> ### * Pixel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Pixel
> ### Title: X-ray pixel intensities over time
> ### Aliases: Pixel
> ### Keywords: datasets
> 
> ### ** Examples
> 
> fm1 <- lme(pixel ~ day + I(day^2), data = Pixel,
+            random = list(Dog = ~ day, Side = ~ 1))
> summary(fm1)
Linear mixed-effects model fit by REML
 Data: Pixel 
       AIC      BIC    logLik
  841.2102 861.9712 -412.6051

Random effects:
 Formula: ~day | Dog
 Structure: General positive-definite, Log-Cholesky parametrization
            StdDev   Corr  
(Intercept) 28.36990 (Intr)
day          1.84375 -0.555

 Formula: ~1 | Side %in% Dog
        (Intercept) Residual
StdDev:    16.82431 8.989606

Fixed effects: pixel ~ day + I(day^2) 
                Value Std.Error DF   t-value p-value
(Intercept) 1073.3391 10.171686 80 105.52225       0
day            6.1296  0.879321 80   6.97083       0
I(day^2)      -0.3674  0.033945 80 -10.82179       0
 Correlation: 
         (Intr) day   
day      -0.517       
I(day^2)  0.186 -0.668

Standardized Within-Group Residuals:
       Min         Q1        Med         Q3        Max 
-2.8290572 -0.4491811  0.0255493  0.5572163  2.7519651 

Number of Observations: 102
Number of Groups: 
          Dog Side %in% Dog 
           10            20 
> VarCorr(fm1)
            Variance       StdDev    Corr  
Dog =       pdLogChol(day)                 
(Intercept) 804.851443     28.369904 (Intr)
day           3.399416      1.843750 -0.555
Side =      pdLogChol(1)                   
(Intercept) 283.057248     16.824305       
Residual     80.813009      8.989606       
> 
> 
> 
> cleanEx()
> nameEx("Remifentanil")
> ### * Remifentanil
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Remifentanil
> ### Title: Pharmacokinetics of Remifentanil
> ### Aliases: Remifentanil
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot(Remifentanil, type = "l", lwd = 2) # shows the 65 patients' remi profiles
> 
> ## The same on  log-log  scale  (*more* sensible for modeling ?):
> plot(Remifentanil, type = "l", lwd = 2, scales = list(log=TRUE))
> 
> str(Remifentanil)
Classes ‘nfnGroupedData’, ‘nfGroupedData’, ‘groupedData’ and 'data.frame':	2107 obs. of  12 variables:
 $ ID     : num  1 1 1 1 1 1 1 1 1 1 ...
 $ Subject: Ord.factor w/ 65 levels "30"<"21"<"25"<..: 28 28 28 28 28 28 28 28 28 28 ...
 $ Time   : num  0 1.5 2 2.52 3.02 3.63 4.05 5.02 6.02 7.03 ...
 $ conc   : num  NA 9.51 11.5 14.1 16.7 17.1 16.8 18.7 14.2 15.8 ...
 $ Rate   : num  72 72 72 72 72 ...
 $ Amt    : num  108 36 37.4 36 43.9 ...
 $ Age    : num  30.6 30.6 30.6 30.6 30.6 ...
 $ Sex    : Factor w/ 2 levels "Female","Male": 2 2 2 2 2 2 2 2 2 2 ...
 $ Ht     : num  171 171 171 171 171 171 171 171 171 171 ...
 $ Wt     : num  72 72 72 72 72 72 72 72 72 72 ...
 $ BSA    : num  1.84 1.84 1.84 1.84 1.84 ...
 $ LBM    : num  56.5 56.5 56.5 56.5 56.5 ...
 - attr(*, "outer")=Class 'formula'  language ~Sex
  .. ..- attr(*, ".Environment")=<environment: R_GlobalEnv> 
 - attr(*, "formula")=Class 'formula'  language conc ~ Time | Subject
  .. ..- attr(*, ".Environment")=<environment: R_GlobalEnv> 
 - attr(*, "labels")=List of 2
  ..$ x: chr "Time from beginning of infusion"
  ..$ y: chr "Concentration of remifentanil"
 - attr(*, "units")=List of 1
  ..$ x: chr "(min)"
 - attr(*, "FUN")=function (x)  
  ..- attr(*, "source")= chr "function (x) max(x, na.rm = TRUE)"
 - attr(*, "order.groups")= logi TRUE
> summary(Remifentanil)
       ID           Subject          Time             conc        
 Min.   : 1.00   9      :  54   Min.   :  0.00   Min.   :  0.100  
 1st Qu.:11.00   5      :  53   1st Qu.:  7.03   1st Qu.:  2.625  
 Median :24.00   10     :  53   Median : 15.07   Median : 16.765  
 Mean   :27.15   8      :  50   Mean   : 23.54   Mean   : 26.640  
 3rd Qu.:42.00   6      :  50   3rd Qu.: 32.01   3rd Qu.: 40.663  
 Max.   :65.00   1      :  49   Max.   :230.05   Max.   :245.400  
                 (Other):1798                    NA's   :115      
      Rate             Amt               Age            Sex      
 Min.   :  0.00   Min.   :   0.00   Min.   :20.00   Female: 782  
 1st Qu.:  0.00   1st Qu.:   0.00   1st Qu.:24.66   Male  :1325  
 Median :  0.00   Median :   0.00   Median :30.75                
 Mean   : 69.16   Mean   :  75.16   Mean   :40.94                
 3rd Qu.:138.50   3rd Qu.:  88.30   3rd Qu.:59.00                
 Max.   :750.00   Max.   :1515.00   Max.   :85.00                
                                                                 
       Ht              Wt              BSA             LBM       
 Min.   :156.0   Min.   : 45.00   Min.   :1.428   Min.   :36.46  
 1st Qu.:163.0   1st Qu.: 65.00   1st Qu.:1.690   1st Qu.:47.09  
 Median :175.0   Median : 75.00   Median :1.905   Median :57.51  
 Mean   :173.3   Mean   : 74.53   Mean   :1.880   Mean   :56.12  
 3rd Qu.:183.0   3rd Qu.: 83.60   3rd Qu.:2.015   3rd Qu.:63.12  
 Max.   :193.0   Max.   :106.00   Max.   :2.309   Max.   :75.64  
                                                                 
> 
> plot(xtabs(~Subject, Remifentanil))
> summary(unclass(table(Remifentanil$Subject)))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  20.00   22.00   24.00   32.42   42.00   54.00 
> ## between 20 and 54 measurements per patient (median: 24; mean: 32.42)
> 
> ## Only first measurement of each patient :
> dim(Remi.1 <- Remifentanil[!duplicated(Remifentanil[,"ID"]),]) #  65 x 12
[1] 65 12
> 
> LBMfn <- function(Wt, Ht, Sex) ifelse(Sex == "Female",
+                                         1.07 * Wt - 148*(Wt/Ht)^2,
+                                         1.1  * Wt - 128*(Wt/Ht)^2)
> with(Remi.1,
+     stopifnot(all.equal(BSA, Wt^{0.425} * Ht^{0.725} * 0.007184, tol = 1.5e-5),
+               all.equal(LBM, LBMfn(Wt, Ht, Sex),                 tol = 7e-7)
+ ))
> 
> ## Rate: typically  3 µg / kg body weight, but :
> sunflowerplot(Rate ~ Wt, Remifentanil)
> abline(0,3, lty=2, col=adjustcolor("black", 0.5))
> 
> 
> 
> cleanEx()
> nameEx("Soybean")
> ### * Soybean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Soybean
> ### Title: Growth of soybean plants
> ### Aliases: Soybean
> ### Keywords: datasets
> 
> ### ** Examples
> 
> summary(fm1 <- nlsList(SSlogis, data = Soybean))
Warning: 2 errors caught in nls(y ~ 1/(1 + exp((xmid - x)/scal)), data = xy, start = list(xmid = aux[[1L]], scal = aux[[2L]]), algorithm = "plinear").  The error messages and their frequencies are

                     number of iterations exceeded maximum of 50 
                                                               1 
step factor 0.000488281 reduced below 'minFactor' of 0.000976562 
                                                               1 
Call:
  Model: weight ~ SSlogis(Time, Asym, xmid, scal) | Plot 
   Data: Soybean 

Coefficients:
   Asym 
         Estimate  Std. Error    t value     Pr(>|t|)
1988F4  15.151550   0.8738054 17.3397312 4.463275e-07
1988F2  19.745419   1.9433542 10.1604842 3.794022e-07
1988F1  20.338407   2.2589870  9.0033309 6.127446e-08
1988F7  19.871203   1.7791330 11.1690375 5.679788e-06
1988F5  30.648921  11.2081166  2.7345291 3.736542e-03
1988F8  22.777043   2.4318953  9.3659634 2.360279e-07
1988F6  23.293137   2.7299845  8.5323330 7.581537e-09
1988F3  23.697110   1.5879718 14.9228787 3.597063e-07
1988P1  17.300492   0.8640908 20.0216145 1.013670e-08
1988P5  17.703754   1.0257602 17.2591548 3.921123e-09
1988P4  24.008910   2.9706375  8.0820734 3.017103e-03
1988P8  28.249591   4.1988040  6.7280090 2.276684e-05
1988P7  27.485995   3.3945416  8.0971155 1.342293e-08
1988P3  24.939006   1.7455364 14.2873026 1.631778e-05
1988P2  36.661160   6.3486896  5.7746026 2.477014e-02
1988P6 163.702464 255.3288784  0.6411436 8.337203e-01
1989F6   8.509308   1.3635636  6.2404919 5.729740e-05
1989F5   9.669081   0.9877562  9.7889350 2.180771e-05
1989F4  11.247524   1.0049236 11.1924169 7.984003e-08
1989F1  11.251052   1.1113040 10.1241894 7.711603e-05
1989F2  11.233333   0.9989299 11.2453664 6.475196e-09
1989F7  10.071395   0.8452311 11.9155512 3.415717e-05
1989F8  10.609519   0.8302693 12.7784076 1.450821e-05
1989F3  18.419564   2.6808047  6.8709086 6.092551e-06
1989P7  15.471897   0.7861292 19.6811115 8.869028e-07
1989P4  18.177522   1.4204479 12.7970351 7.262489e-07
1989P6  20.498831   1.9022691 10.7759887 5.129594e-06
1989P5         NA          NA         NA           NA
1989P1  21.683985   1.9183399 11.3035157 7.806237e-08
1989P3  22.283750   1.1402473 19.5429100 4.478139e-07
1989P2  28.296972   4.1482952  6.8213496 1.561728e-04
1989P8         NA          NA         NA           NA
1990F2  19.459102   6.1238316  3.1776024 1.175660e-03
1990F3  19.867932   3.2357524  6.1401275 6.112667e-04
1990F4  27.435518   9.4505666  2.9030554 2.326747e-03
1990F5  18.719501   1.2575853 14.8852735 2.425467e-07
1990F1  19.790735   1.9241287 10.2855567 3.680484e-04
1990F8  20.290441   1.5158389 13.3856186 4.113934e-05
1990F7  19.835326   1.3061649 15.1859283 1.585581e-06
1990F6  21.197115   1.7368414 12.2044041 8.578174e-06
1990P8  18.513513   1.4497108 12.7704868 3.942440e-04
1990P7  19.160767   2.1203103  9.0367749 2.394577e-04
1990P3  19.198083   1.3929487 13.7823336 9.374480e-05
1990P1  18.448379   0.9806108 18.8131508 1.488721e-06
1990P6  17.689700   1.0685907 16.5542330 1.302191e-04
1990P5  19.544895   1.1900420 16.4237024 8.984247e-05
1990P2  25.787243   3.8482487  6.7010333 1.186730e-05
1990P4  26.128905   3.2551064  8.0270507 1.385877e-03
   xmid 
        Estimate Std. Error   t value     Pr(>|t|)
1988F4  52.83408   1.332907 39.638246 1.445923e-09
1988F2  56.57507   2.769461 20.428185 5.866605e-09
1988F1  57.40242   3.006916 19.090129 3.277052e-10
1988F7  56.16159   2.494661 22.512709 8.925168e-08
1988F5  64.12999   9.123542  7.029067 4.563191e-05
1988F8  59.33033   2.684914 22.097663 6.076840e-10
1988F6  59.59762   3.078580 19.358801 2.491787e-11
1988F3  56.42461   1.631701 34.580235 1.056373e-09
1988P1  48.84945   1.347844 36.242652 1.617368e-10
1988P5  51.27156   1.512099 33.907531 3.516647e-11
1988P4  57.75124   3.788656 15.243199 6.825981e-05
1988P8  62.98014   4.006304 15.720259 7.127107e-08
1988P7  61.49839   3.239559 18.983567 3.518826e-11
1988P3  56.32520   1.781868 31.610200 7.333807e-08
1988P2  66.56078   4.701584 14.157096 2.150759e-04
1988P6 104.97341  37.998029  2.762602 3.790325e-01
1989F6  55.27332   5.345507 10.340144 4.786636e-06
1989F5  51.26706   3.391918 15.114475 2.551122e-06
1989F4  53.81049   2.669678 20.156176 4.228986e-09
1989F1  56.62630   2.721298 20.808560 2.227069e-06
1989F2  52.24016   2.860031 18.265595 5.733555e-10
1989F7  51.37754   2.538522 20.239155 2.503115e-06
1989F8  47.96772   2.653212 18.079114 2.608897e-06
1989F3  66.12355   4.004286 16.513193 7.770932e-08
1989P7  46.34313   1.748791 26.500094 2.015245e-07
1989P4  57.18041   2.458381 23.259378 3.691032e-08
1989P6  58.23818   3.195134 18.227147 3.766450e-07
1989P5        NA         NA        NA           NA
1989P1  59.69305   2.877246 20.746595 3.760304e-09
1989P3  53.39565   1.685346 31.682313 4.022773e-08
1989P2  67.17505   4.816749 13.946141 4.718717e-06
1989P8        NA         NA        NA           NA
1990F2  66.28541  10.062524  6.587355 3.658736e-05
1990F3  58.27752   5.679501 10.261027 5.243495e-05
1990F4  70.27180  11.183796  6.283358 6.217567e-05
1990F5  51.27603   1.979733 25.900474 1.528310e-08
1990F1  55.69340   3.010641 18.498849 2.156924e-05
1990F8  55.54949   2.120896 26.191526 1.497685e-06
1990F7  54.73623   1.806128 30.305834 5.068892e-08
1990F6  54.56184   2.526903 21.592380 5.054519e-07
1990P8  52.44794   2.384233 21.997824 2.862984e-05
1990P7  54.80233   3.662114 14.964672 2.073748e-05
1990P3  49.71495   2.322466 21.406105 1.087806e-05
1990P1  47.91706   1.467730 32.647045 9.558243e-08
1990P6  50.23032   1.676583 29.959940 7.154673e-06
1990P5  51.15028   1.753041 29.178025 5.361918e-06
1990P2  62.35966   4.676813 13.333794 3.906739e-07
1990P4  61.19885   3.832619 15.967893 5.339368e-05
   scal 
        Estimate Std. Error  t value     Pr(>|t|)
1988F4  5.176820   1.091749 4.741768 1.854692e-03
1988F2  8.406559   1.736041 4.842373 2.948576e-05
1988F1  9.604743   1.723335 5.573345 1.654535e-06
1988F7  8.069281   1.632197 4.943814 5.772665e-04
1988F5 11.262835   2.789211 4.038001 6.472908e-04
1988F8  9.000647   1.511850 5.953399 5.185132e-06
1988F6  9.718840   1.633690 5.949010 9.256229e-08
1988F3  7.642380   1.104895 6.916837 6.251672e-05
1988P1  6.362358   1.091349 5.829810 4.497602e-05
1988P5  6.809096   1.176508 5.787547 7.181926e-06
1988P4 11.744706   1.893425 6.202889 1.135466e-02
1988P8 10.947130   1.749418 6.257583 3.661666e-05
1988P7 10.177799   1.561879 6.516380 6.056751e-08
1988P3  8.315917   1.151803 7.219912 1.167177e-03
1988P2 11.916114   1.711035 6.964271 1.092031e-02
1988P6 17.929675   3.017030 5.942824 8.315873e-02
1989F6  8.856063   3.535774 2.504702 3.994054e-03
1989F5  7.205896   2.373316 3.036215 5.159590e-03
1989F4  6.486573   2.153628 3.011928 5.325839e-05
1989F1  6.068136   2.374275 2.555784 3.089681e-02
1989F2  7.016427   2.076585 3.378829 2.598127e-06
1989F7  5.500159   1.926244 2.855381 2.054615e-02
1989F8  5.960926   1.718186 3.469314 6.366473e-03
1989F3  9.224764   2.337292 3.946775 9.227941e-05
1989P7  5.393890   1.125755 4.791354 8.574281e-04
1989P4  8.402098   1.676272 5.012370 7.397974e-05
1989P6 10.613533   1.854108 5.724333 1.138299e-04
1989P5        NA         NA       NA           NA
1989P1  9.972837   1.717799 5.805590 2.155525e-06
1989P3  7.900595   1.179248 6.699689 8.814552e-05
1989P2 12.523509   2.108665 5.939068 3.025485e-04
1989P8        NA         NA       NA           NA
1990F2 13.157219   3.660268 3.594605 6.661875e-04
1990F3 12.796287   2.697127 4.744413 1.984977e-03
1990F4 14.560188   3.415482 4.262996 3.997895e-04
1990F5  7.758448   1.379453 5.624293 3.012976e-05
1990F1  9.617031   1.745763 5.508782 6.062151e-03
1990F8  7.771085   1.327913 5.852106 2.041157e-03
1990F7  6.792194   1.185178 5.730947 1.887271e-04
1990F6  9.263610   1.528612 6.060144 2.589908e-04
1990P8  8.581012   1.561491 5.495395 1.537997e-02
1990P7 10.847282   2.066123 5.250066 2.908553e-03
1990P3  9.322305   1.585599 5.879358 4.746622e-03
1990P1  6.611841   1.153215 5.733397 4.896358e-04
1990P6  6.626907   1.260483 5.257433 2.008824e-02
1990P5  7.293155   1.249137 5.838557 9.704477e-03
1990P2 11.656924   2.055390 5.671392 2.695022e-05
1990P4 10.971539   1.804042 6.081642 4.695487e-03

Residual standard error: 1.020867 on 258 degrees of freedom

> 
> 
> 
> cleanEx()
> nameEx("VarCorr")
> ### * VarCorr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: VarCorr
> ### Title: Extract variance and correlation components
> ### Aliases: VarCorr VarCorr.lme VarCorr.pdMat VarCorr.pdBlocked
> ###   print.VarCorr.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, data = Orthodont, random = ~age)
> VarCorr(fm1)
Subject = pdLogChol(age) 
            Variance   StdDev    Corr  
(Intercept) 5.41508791 2.3270341 (Intr)
age         0.05126955 0.2264278 -0.609
Residual    1.71620400 1.3100397       
> 
> 
> 
> cleanEx()
> nameEx("Variogram")
> ### * Variogram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Variogram
> ### Title: Calculate Semi-variogram
> ### Aliases: Variogram
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("Variogram.corExp")
> ### * Variogram.corExp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Variogram.corExp
> ### Title: Calculate Semi-variogram for a corExp Object
> ### Aliases: Variogram.corExp
> ### Keywords: models
> 
> ### ** Examples
> 
> stopifnot(require("stats", quietly = TRUE))
> cs1 <- corExp(3, form = ~ Time | Rat)
> cs1 <- Initialize(cs1, BodyWeight)
> Variogram(cs1)[1:10,]
      variog      dist
1  0.2834687  1.000000
2  0.5300373  2.265306
3  0.6917582  3.530612
4  0.7978286  4.795918
5  0.8673987  6.061224
6  0.9130287  7.326531
7  0.9429568  8.591837
8  0.9625861  9.857143
9  0.9754608 11.122449
10 0.9839051 12.387755
> 
> 
> 
> cleanEx()
> nameEx("Variogram.corGaus")
> ### * Variogram.corGaus
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Variogram.corGaus
> ### Title: Calculate Semi-variogram for a corGaus Object
> ### Aliases: Variogram.corGaus
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corGaus(3, form = ~ Time | Rat)
> cs1 <- Initialize(cs1, BodyWeight)
> Variogram(cs1)[1:10,]
      variog      dist
1  0.1051607  1.000000
2  0.4345758  2.265306
3  0.7496824  3.530612
4  0.9223581  4.795918
5  0.9831271  6.061224
6  0.9974310  7.326531
7  0.9997259  8.591837
8  0.9999795  9.857143
9  0.9999989 11.122449
10 1.0000000 12.387755
> 
> 
> 
> cleanEx()
> nameEx("Variogram.corLin")
> ### * Variogram.corLin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Variogram.corLin
> ### Title: Calculate Semi-variogram for a corLin Object
> ### Aliases: Variogram.corLin
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corLin(15, form = ~ Time | Rat)
> cs1 <- Initialize(cs1, BodyWeight)
> Variogram(cs1)[1:10,]
       variog      dist
1  0.06666667  1.000000
2  0.15102041  2.265306
3  0.23537415  3.530612
4  0.31972789  4.795918
5  0.40408163  6.061224
6  0.48843537  7.326531
7  0.57278912  8.591837
8  0.65714286  9.857143
9  0.74149660 11.122449
10 0.82585034 12.387755
> 
> 
> 
> cleanEx()
> nameEx("Variogram.corRatio")
> ### * Variogram.corRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Variogram.corRatio
> ### Title: Calculate Semi-variogram for a corRatio Object
> ### Aliases: Variogram.corRatio
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corRatio(7, form = ~ Time | Rat)
> cs1 <- Initialize(cs1, BodyWeight)
> Variogram(cs1)[1:10,]
      variog      dist
1  0.0200000  1.000000
2  0.0947988  2.265306
3  0.2028012  3.530612
4  0.3194523  4.795918
5  0.4284944  6.061224
6  0.5227802  7.326531
7  0.6010411  8.591837
8  0.6647584  9.857143
9  0.7162856 11.122449
10 0.7579727 12.387755
> 
> 
> 
> cleanEx()
> nameEx("Variogram.corSpatial")
> ### * Variogram.corSpatial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Variogram.corSpatial
> ### Title: Calculate Semi-variogram for a corSpatial Object
> ### Aliases: Variogram.corSpatial
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corExp(3, form = ~ Time | Rat)
> cs1 <- Initialize(cs1, BodyWeight)
> Variogram(cs1, FUN = function(x, y) (1 - exp(-x/y)))[1:10,]
      variog      dist
1  0.2834687  1.000000
2  0.5300373  2.265306
3  0.6917582  3.530612
4  0.7978286  4.795918
5  0.8673987  6.061224
6  0.9130287  7.326531
7  0.9429568  8.591837
8  0.9625861  9.857143
9  0.9754608 11.122449
10 0.9839051 12.387755
> 
> 
> 
> cleanEx()
> nameEx("Variogram.corSpher")
> ### * Variogram.corSpher
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Variogram.corSpher
> ### Title: Calculate Semi-variogram for a corSpher Object
> ### Aliases: Variogram.corSpher
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corSpher(15, form = ~ Time | Rat)
> cs1 <- Initialize(cs1, BodyWeight)
> Variogram(cs1)[1:10,]
       variog      dist
1  0.09985185  1.000000
2  0.22480844  2.265306
3  0.34654124  3.530612
4  0.46324960  4.795918
5  0.57313283  6.061224
6  0.67439026  7.326531
7  0.76522124  8.591837
8  0.84382507  9.857143
9  0.90840110 11.122449
10 0.95714866 12.387755
> 
> 
> 
> cleanEx()
> nameEx("Variogram.default")
> ### * Variogram.default
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Variogram.default
> ### Title: Calculate Semi-variogram
> ### Aliases: Variogram.default
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lm(follicles ~ sin(2 * pi * Time) + cos(2 * pi * Time), Ovary,
+           subset = Mare == 1)
> Variogram(resid(fm1), dist(1:29))[1:10,]
         variog dist
1  10.098577567    1
2   0.003014275    2
3   3.876160700    3
4  15.892707794    4
5  37.412782986    5
6  23.258010769    6
7  13.180732207    7
8  21.562480671    8
9   0.003450613    9
10  0.923619345   10
> 
> 
> 
> cleanEx()
> nameEx("Variogram.gls")
> ### * Variogram.gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Variogram.gls
> ### Title: Calculate Semi-variogram for Residuals from a gls Object
> ### Aliases: Variogram.gls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gls(weight ~ Time * Diet, BodyWeight)
> Vm1 <- Variogram(fm1, form = ~ Time | Rat)
> print(head(Vm1), digits = 3)
   variog dist n.pairs
1 0.00724    1      16
2 0.01458    6      16
3 0.01421    7     144
4 0.01844    8      16
5 0.01113   13      16
6 0.01991   14     128
> 
> 
> 
> cleanEx()
> nameEx("Variogram.lme")
> ### * Variogram.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Variogram.lme
> ### Title: Calculate Semi-variogram for Residuals from an lme Object
> ### Aliases: Variogram.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(weight ~ Time * Diet, data=BodyWeight, ~ Time | Rat)
> Variogram(fm1, form = ~ Time | Rat, nint = 10, robust = TRUE)
     variog dist n.pairs
1 0.6565972  7.0     160
2 0.7766370 14.0     160
3 1.0197151 15.0      16
4 1.1231257 21.0     128
5 0.9306765 28.0     112
6 0.9309536 35.0      96
7 0.6263426 36.0      16
8 0.8702974 42.5     128
9 0.6440735 56.0      48
> 
> 
> 
> cleanEx()
> nameEx("allCoef")
> ### * allCoef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: allCoef
> ### Title: Extract Coefficients from a Set of Objects
> ### Aliases: allCoef
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corAR1(0.1)
> vf1 <- varPower(0.5)
> allCoef(cs1, vf1)
              power 
0.2006707 0.5000000 
attr(,"map")
       cs1   vf1
[1,]  TRUE FALSE
[2,] FALSE  TRUE
> 
> 
> 
> cleanEx()
> nameEx("anova.gls")
> ### * anova.gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anova.gls
> ### Title: Compare Likelihoods of Fitted Objects
> ### Aliases: anova.gls
> ### Keywords: models
> 
> ### ** Examples
> 
> # AR(1) errors within each Mare
> fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
+            correlation = corAR1(form = ~ 1 | Mare))
> anova(fm1)
Denom. DF: 305 
                   numDF  F-value p-value
(Intercept)            1 354.7332  <.0001
sin(2 * pi * Time)     1  18.5034  <.0001
cos(2 * pi * Time)     1   1.6633  0.1981
> # variance changes with a power of the absolute fitted values?
> fm2 <- update(fm1, weights = varPower())
> anova(fm1, fm2)
    Model df      AIC      BIC    logLik   Test  L.Ratio p-value
fm1     1  5 1571.455 1590.056 -780.7273                        
fm2     2  6 1570.925 1593.247 -779.4626 1 vs 2 2.529261  0.1118
> 
> # Pinheiro and Bates, p. 251-252
> fm1Orth.gls <- gls(distance ~ Sex * I(age - 11), Orthodont,
+                 correlation = corSymm(form = ~ 1 | Subject),
+                 weights = varIdent(form = ~ 1 | age))
> fm2Orth.gls <- update(fm1Orth.gls,
+                 corr = corCompSymm(form = ~ 1 | Subject))
> anova(fm1Orth.gls, fm2Orth.gls)
            Model df      AIC      BIC    logLik   Test  L.Ratio p-value
fm1Orth.gls     1 14 452.5468 489.5683 -212.2734                        
fm2Orth.gls     2  9 449.9724 473.7719 -215.9862 1 vs 2 7.425576  0.1909
> 
> # Pinheiro and Bates, pp. 215-215, 255-260
> #p. 215
> fm1Dial.lme <-
+   lme(rate ~(pressure + I(pressure^2) + I(pressure^3) + I(pressure^4))*QB,
+       Dialyzer, ~ pressure + I(pressure^2))
> # p. 216
> fm2Dial.lme <- update(fm1Dial.lme,
+                   weights = varPower(form = ~ pressure))
> # p. 255
> fm1Dial.gls <- gls(rate ~ (pressure +
+      I(pressure^2) + I(pressure^3) + I(pressure^4))*QB,
+         Dialyzer)
> fm2Dial.gls <- update(fm1Dial.gls,
+                  weights = varPower(form = ~ pressure))
> anova(fm1Dial.gls, fm2Dial.gls)
            Model df      AIC      BIC    logLik   Test  L.Ratio p-value
fm1Dial.gls     1 11 761.1707 792.7136 -369.5853                        
fm2Dial.gls     2 12 738.2206 772.6310 -357.1103 1 vs 2 24.95006  <.0001
> fm3Dial.gls <- update(fm2Dial.gls,
+                     corr = corAR1(0.771, form = ~ 1 | Subject))
> anova(fm2Dial.gls, fm3Dial.gls)
            Model df      AIC      BIC    logLik   Test  L.Ratio p-value
fm2Dial.gls     1 12 738.2206 772.6310 -357.1103                        
fm3Dial.gls     2 13 642.6746 679.9526 -308.3373 1 vs 2 97.54602  <.0001
> # anova.gls to compare a gls and an lme fit 
> anova(fm3Dial.gls, fm2Dial.lme, test = FALSE)
            Model df      AIC      BIC    logLik
fm3Dial.gls     1 13 642.6746 679.9526 -308.3373
fm2Dial.lme     2 18 648.0798 699.6955 -306.0399
> 
> # Pinheiro and Bates, pp. 261-266
> fm1Wheat2 <- gls(yield ~ variety - 1, Wheat2)
> fm3Wheat2 <- update(fm1Wheat2,
+       corr = corRatio(c(12.5, 0.2),
+         form = ~ latitude + longitude, nugget = TRUE))
> # Test a specific contrast 
> anova(fm3Wheat2, L = c(-1, 0, 1))
Denom. DF: 168 
 F-test for linear combination(s)
varietyARAPAHOE varietyBUCKSKIN 
             -1               1 
  numDF  F-value p-value
1     1 7.696728  0.0062
> 
> 
> 
> 
> cleanEx()
> nameEx("anova.lme")
> ### * anova.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anova.lme
> ### Title: Compare Likelihoods of Fitted Objects
> ### Aliases: anova.lme print.anova.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, Orthodont, random = ~ age | Subject)
> anova(fm1)
            numDF denDF   F-value p-value
(Intercept)     1    80 3096.4871  <.0001
age             1    80   85.8464  <.0001
> fm2 <- update(fm1, random = pdDiag(~age))
> anova(fm1, fm2)
    Model df      AIC      BIC    logLik   Test   L.Ratio p-value
fm1     1  6 454.6367 470.6173 -221.3183                         
fm2     2  5 453.3146 466.6318 -221.6573 1 vs 2 0.6778943  0.4103
> 
> ## Pinheiro and Bates, pp. 251-254 ------------------------------------------
> fm1Orth.gls <- gls(distance ~ Sex * I(age - 11), Orthodont,
+ 		   correlation = corSymm(form = ~ 1 | Subject),
+ 		   weights = varIdent(form = ~ 1 | age))
> fm2Orth.gls <- update(fm1Orth.gls,
+ 		      corr = corCompSymm(form = ~ 1 | Subject))
> ## anova.gls examples:
> anova(fm1Orth.gls, fm2Orth.gls)
            Model df      AIC      BIC    logLik   Test  L.Ratio p-value
fm1Orth.gls     1 14 452.5468 489.5683 -212.2734                        
fm2Orth.gls     2  9 449.9724 473.7719 -215.9862 1 vs 2 7.425576  0.1909
> fm3Orth.gls <- update(fm2Orth.gls, weights = NULL)
> anova(fm2Orth.gls, fm3Orth.gls)
            Model df      AIC      BIC    logLik   Test  L.Ratio p-value
fm2Orth.gls     1  9 449.9724 473.7719 -215.9862                        
fm3Orth.gls     2  6 445.7572 461.6236 -216.8786 1 vs 2 1.784873  0.6182
> fm4Orth.gls <- update(fm3Orth.gls, weights = varIdent(form = ~ 1 | Sex))
> anova(fm3Orth.gls, fm4Orth.gls)
            Model df      AIC      BIC    logLik   Test  L.Ratio p-value
fm3Orth.gls     1  6 445.7572 461.6236 -216.8786                        
fm4Orth.gls     2  7 436.1887 454.6994 -211.0943 1 vs 2 11.56859   7e-04
> # not in book but needed for the following command
> fm3Orth.lme <- lme(distance ~ Sex*I(age-11), data = Orthodont,
+                    random = ~ I(age-11) | Subject,
+                    weights = varIdent(form = ~ 1 | Sex))
> # Compare an "lme" object with a "gls" object (test would be non-sensical!)
> anova(fm3Orth.lme, fm4Orth.gls, test = FALSE)
            Model df      AIC      BIC    logLik
fm3Orth.lme     1  9 429.5225 453.3220 -205.7612
fm4Orth.gls     2  7 436.1887 454.6994 -211.0943
> 
> ## Pinheiro and Bates, pp. 222-225 ------------------------------------------
> op <- options(contrasts = c("contr.treatment", "contr.poly"))
> fm1BW.lme <- lme(weight ~ Time * Diet, BodyWeight, random = ~ Time)
> fm2BW.lme <- update(fm1BW.lme, weights = varPower())
> # Test a specific contrast
> anova(fm2BW.lme, L = c("Time:Diet2" = 1, "Time:Diet3" = -1))
F-test for linear combination(s)
Time:Diet2 Time:Diet3 
         1         -1 
  numDF denDF  F-value p-value
1     1   157 2.862594  0.0926
> 
> ## Pinheiro and Bates, pp. 352-365 ------------------------------------------
> fm1Theo.lis <- nlsList(
+      conc ~ SSfol(Dose, Time, lKe, lKa, lCl), data=Theoph)
> fm1Theo.lis
Call:
  Model: conc ~ SSfol(Dose, Time, lKe, lKa, lCl) | Subject 
   Data: Theoph 

Coefficients:
         lKe        lKa       lCl
6  -2.307332  0.1516234 -2.973242
7  -2.280370 -0.3860511 -2.964335
8  -2.386437  0.3188339 -3.069111
11 -2.321530  1.3478239 -2.860397
3  -2.508073  0.8975422 -3.229965
2  -2.286108  0.6640568 -3.106317
4  -2.436494  0.1582638 -3.286087
9  -2.446088  2.1821879 -3.420774
12 -2.248326 -0.1828442 -3.170158
10 -2.604148 -0.3631216 -3.428271
1  -2.919614  0.5751612 -3.915857
5  -2.425486  0.3862853 -3.132600

Degrees of freedom: 132 total; 96 residual
Residual standard error: 0.7001921
> fm1Theo.nlme <- nlme(fm1Theo.lis)
Warning in (function (model, data = sys.frame(sys.parent()), fixed, random,  :
  Iteration 2, LME step: nlminb() did not converge (code = 1). Do increase 'msMaxIter'!
> fm2Theo.nlme <- update(fm1Theo.nlme, random= pdDiag(lKe+lKa+lCl~1) )
> fm3Theo.nlme <- update(fm2Theo.nlme, random= pdDiag(    lKa+lCl~1) )
> 
> # Comparing the 3 nlme models
> anova(fm1Theo.nlme, fm3Theo.nlme, fm2Theo.nlme)
             Model df      AIC      BIC    logLik   Test  L.Ratio p-value
fm1Theo.nlme     1 10 366.6417 395.4697 -173.3208                        
fm3Theo.nlme     2  6 366.0429 383.3397 -177.0214 1 vs 2 7.401195  0.1161
fm2Theo.nlme     3  7 368.0470 388.2266 -177.0235 2 vs 3 0.004123  0.9488
> 
> options(op) # (set back to previous state)
> 
> 
> 
> base::options(contrasts = c(unordered = "contr.treatment",ordered = "contr.poly"))
> cleanEx()
> nameEx("as.matrix.corStruct")
> ### * as.matrix.corStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.matrix.corStruct
> ### Title: Matrix of a corStruct Object
> ### Aliases: as.matrix.corStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> cst1 <- corAR1(form = ~1|Subject)
> cst1 <- Initialize(cst1, data = Orthodont)
> as.matrix(cst1)
$M01
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M02
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M03
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M04
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M05
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M06
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M07
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M08
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M09
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M10
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M11
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M12
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M13
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M14
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M15
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$M16
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$F01
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$F02
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$F03
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$F04
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$F05
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$F06
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$F07
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$F08
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$F09
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$F10
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

$F11
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1

> 
> 
> 
> cleanEx()
> nameEx("as.matrix.pdMat")
> ### * as.matrix.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.matrix.pdMat
> ### Title: Matrix of a pdMat Object
> ### Aliases: as.matrix.pdMat
> ### Keywords: models
> 
> ### ** Examples
> 
> as.matrix(pdSymm(diag(4)))
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    1    0    0
[3,]    0    0    1    0
[4,]    0    0    0    1
> 
> 
> 
> cleanEx()
> nameEx("as.matrix.reStruct")
> ### * as.matrix.reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.matrix.reStruct
> ### Title: Matrices of an reStruct Object
> ### Aliases: as.matrix.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(pdSymm(diag(3), ~age+Sex, data = Orthodont))
> as.matrix(rs1)
[[1]]
            (Intercept) age SexFemale
(Intercept)           1   0         0
age                   0   1         0
SexFemale             0   0         1

> 
> 
> 
> cleanEx()
> nameEx("asOneFormula")
> ### * asOneFormula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asOneFormula
> ### Title: Combine Formulas of a Set of Objects
> ### Aliases: asOneFormula
> ### Keywords: models
> 
> ### ** Examples
> 
> asOneFormula(y ~ x + z | g, list(~ w, ~ t * sin(2 * pi)))
~y + x + z + g + w + t
<environment: 0x562781aaa5c0>
> 
> 
> 
> cleanEx()
> nameEx("asTable")
> ### * asTable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asTable
> ### Title: Convert groupedData to a matrix
> ### Aliases: asTable asTable.groupedData
> ### Keywords: manip
> 
> ### ** Examples
> 
> asTable(Orthodont)
     
         8   10   12   14
  M16 22.0 21.5 23.5 25.0
  M05 20.0 23.5 22.5 26.0
  M02 21.5 22.5 23.0 26.5
  M11 23.0 23.0 23.5 25.0
  M07 22.0 22.0 24.5 26.5
  M08 24.0 21.5 24.5 25.5
  M03 23.0 22.5 24.0 27.5
  M12 21.5 23.5 24.0 28.0
  M13 17.0 24.5 26.0 29.5
  M14 22.5 25.5 25.5 26.0
  M09 23.0 20.5 31.0 26.0
  M15 23.0 24.5 26.0 30.0
  M06 24.5 25.5 27.0 28.5
  M04 25.5 27.5 26.5 27.0
  M01 26.0 25.0 29.0 31.0
  M10 27.5 28.0 31.0 31.5
  F10 16.5 19.0 19.0 19.5
  F09 20.0 21.0 22.0 21.5
  F06 20.0 21.0 21.0 22.5
  F01 21.0 20.0 21.5 23.0
  F05 21.5 23.0 22.5 23.5
  F07 21.5 22.5 23.0 25.0
  F02 21.0 21.5 24.0 25.5
  F08 23.0 23.0 23.5 24.0
  F03 20.5 24.0 24.5 26.0
  F04 23.5 24.5 25.0 26.5
  F11 24.5 25.0 28.0 28.0
> 
> # Pinheiro and Bates, p. 109
> ergoStool.mat <- asTable(ergoStool)
> 
> 
> 
> cleanEx()
> nameEx("augPred")
> ### * augPred
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: augPred
> ### Title: Augmented Predictions
> ### Aliases: augPred augPred.gls augPred.lme augPred.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(Orthodont, random = ~1)
> augPred(fm1, length.out = 2, level = c(0,1))
                  age .groups distance           .type
1                   8     M01 26.00000        original
2                  10     M01 25.00000        original
3                  12     M01 29.00000        original
4                  14     M01 31.00000        original
5                   8     M02 21.50000        original
6                  10     M02 22.50000        original
7                  12     M02 23.00000        original
8                  14     M02 26.50000        original
9                   8     M03 23.00000        original
10                 10     M03 22.50000        original
11                 12     M03 24.00000        original
12                 14     M03 27.50000        original
13                  8     M04 25.50000        original
14                 10     M04 27.50000        original
15                 12     M04 26.50000        original
16                 14     M04 27.00000        original
17                  8     M05 20.00000        original
18                 10     M05 23.50000        original
19                 12     M05 22.50000        original
20                 14     M05 26.00000        original
21                  8     M06 24.50000        original
22                 10     M06 25.50000        original
23                 12     M06 27.00000        original
24                 14     M06 28.50000        original
25                  8     M07 22.00000        original
26                 10     M07 22.00000        original
27                 12     M07 24.50000        original
28                 14     M07 26.50000        original
29                  8     M08 24.00000        original
30                 10     M08 21.50000        original
31                 12     M08 24.50000        original
32                 14     M08 25.50000        original
33                  8     M09 23.00000        original
34                 10     M09 20.50000        original
35                 12     M09 31.00000        original
36                 14     M09 26.00000        original
37                  8     M10 27.50000        original
38                 10     M10 28.00000        original
39                 12     M10 31.00000        original
40                 14     M10 31.50000        original
41                  8     M11 23.00000        original
42                 10     M11 23.00000        original
43                 12     M11 23.50000        original
44                 14     M11 25.00000        original
45                  8     M12 21.50000        original
46                 10     M12 23.50000        original
47                 12     M12 24.00000        original
48                 14     M12 28.00000        original
49                  8     M13 17.00000        original
50                 10     M13 24.50000        original
51                 12     M13 26.00000        original
52                 14     M13 29.50000        original
53                  8     M14 22.50000        original
54                 10     M14 25.50000        original
55                 12     M14 25.50000        original
56                 14     M14 26.00000        original
57                  8     M15 23.00000        original
58                 10     M15 24.50000        original
59                 12     M15 26.00000        original
60                 14     M15 30.00000        original
61                  8     M16 22.00000        original
62                 10     M16 21.50000        original
63                 12     M16 23.50000        original
64                 14     M16 25.00000        original
65                  8     F01 21.00000        original
66                 10     F01 20.00000        original
67                 12     F01 21.50000        original
68                 14     F01 23.00000        original
69                  8     F02 21.00000        original
70                 10     F02 21.50000        original
71                 12     F02 24.00000        original
72                 14     F02 25.50000        original
73                  8     F03 20.50000        original
74                 10     F03 24.00000        original
75                 12     F03 24.50000        original
76                 14     F03 26.00000        original
77                  8     F04 23.50000        original
78                 10     F04 24.50000        original
79                 12     F04 25.00000        original
80                 14     F04 26.50000        original
81                  8     F05 21.50000        original
82                 10     F05 23.00000        original
83                 12     F05 22.50000        original
84                 14     F05 23.50000        original
85                  8     F06 20.00000        original
86                 10     F06 21.00000        original
87                 12     F06 21.00000        original
88                 14     F06 22.50000        original
89                  8     F07 21.50000        original
90                 10     F07 22.50000        original
91                 12     F07 23.00000        original
92                 14     F07 25.00000        original
93                  8     F08 23.00000        original
94                 10     F08 23.00000        original
95                 12     F08 23.50000        original
96                 14     F08 24.00000        original
97                  8     F09 20.00000        original
98                 10     F09 21.00000        original
99                 12     F09 22.00000        original
100                14     F09 21.50000        original
101                 8     F10 16.50000        original
102                10     F10 19.00000        original
103                12     F10 19.00000        original
104                14     F10 19.50000        original
105                 8     F11 24.50000        original
106                10     F11 25.00000        original
107                12     F11 28.00000        original
108                14     F11 28.00000        original
predict.fixed1      8     M01 22.04259   predict.fixed
predict.fixed2     14     M01 26.00370   predict.fixed
predict.fixed3      8     M02 22.04259   predict.fixed
predict.fixed4     14     M02 26.00370   predict.fixed
predict.fixed5      8     M03 22.04259   predict.fixed
predict.fixed6     14     M03 26.00370   predict.fixed
predict.fixed7      8     M04 22.04259   predict.fixed
predict.fixed8     14     M04 26.00370   predict.fixed
predict.fixed9      8     M05 22.04259   predict.fixed
predict.fixed10    14     M05 26.00370   predict.fixed
predict.fixed11     8     M06 22.04259   predict.fixed
predict.fixed12    14     M06 26.00370   predict.fixed
predict.fixed13     8     M07 22.04259   predict.fixed
predict.fixed14    14     M07 26.00370   predict.fixed
predict.fixed15     8     M08 22.04259   predict.fixed
predict.fixed16    14     M08 26.00370   predict.fixed
predict.fixed17     8     M09 22.04259   predict.fixed
predict.fixed18    14     M09 26.00370   predict.fixed
predict.fixed19     8     M10 22.04259   predict.fixed
predict.fixed20    14     M10 26.00370   predict.fixed
predict.fixed21     8     M11 22.04259   predict.fixed
predict.fixed22    14     M11 26.00370   predict.fixed
predict.fixed23     8     M12 22.04259   predict.fixed
predict.fixed24    14     M12 26.00370   predict.fixed
predict.fixed25     8     M13 22.04259   predict.fixed
predict.fixed26    14     M13 26.00370   predict.fixed
predict.fixed27     8     M14 22.04259   predict.fixed
predict.fixed28    14     M14 26.00370   predict.fixed
predict.fixed29     8     M15 22.04259   predict.fixed
predict.fixed30    14     M15 26.00370   predict.fixed
predict.fixed31     8     M16 22.04259   predict.fixed
predict.fixed32    14     M16 26.00370   predict.fixed
predict.fixed33     8     F01 22.04259   predict.fixed
predict.fixed34    14     F01 26.00370   predict.fixed
predict.fixed35     8     F02 22.04259   predict.fixed
predict.fixed36    14     F02 26.00370   predict.fixed
predict.fixed37     8     F03 22.04259   predict.fixed
predict.fixed38    14     F03 26.00370   predict.fixed
predict.fixed39     8     F04 22.04259   predict.fixed
predict.fixed40    14     F04 26.00370   predict.fixed
predict.fixed41     8     F05 22.04259   predict.fixed
predict.fixed42    14     F05 26.00370   predict.fixed
predict.fixed43     8     F06 22.04259   predict.fixed
predict.fixed44    14     F06 26.00370   predict.fixed
predict.fixed45     8     F07 22.04259   predict.fixed
predict.fixed46    14     F07 26.00370   predict.fixed
predict.fixed47     8     F08 22.04259   predict.fixed
predict.fixed48    14     F08 26.00370   predict.fixed
predict.fixed49     8     F09 22.04259   predict.fixed
predict.fixed50    14     F09 26.00370   predict.fixed
predict.fixed51     8     F10 22.04259   predict.fixed
predict.fixed52    14     F10 26.00370   predict.fixed
predict.fixed53     8     F11 22.04259   predict.fixed
predict.fixed54    14     F11 26.00370   predict.fixed
predict.Subject1    8     M01 25.38635 predict.Subject
predict.Subject2   14     M01 29.34746 predict.Subject
predict.Subject3    8     M02 21.46107 predict.Subject
predict.Subject4   14     M02 25.42218 predict.Subject
predict.Subject5    8     M03 22.24613 predict.Subject
predict.Subject6   14     M03 26.20724 predict.Subject
predict.Subject7    8     M04 24.37699 predict.Subject
predict.Subject8   14     M04 28.33810 predict.Subject
predict.Subject9    8     M05 21.12462 predict.Subject
predict.Subject10  14     M05 25.08573 predict.Subject
predict.Subject11   8     M06 24.15269 predict.Subject
predict.Subject12  14     M06 28.11380 predict.Subject
predict.Subject13   8     M07 21.79752 predict.Subject
predict.Subject14  14     M07 25.75863 predict.Subject
predict.Subject15   8     M08 21.90967 predict.Subject
predict.Subject16  14     M08 25.87078 predict.Subject
predict.Subject17   8     M09 23.03118 predict.Subject
predict.Subject18  14     M09 26.99229 predict.Subject
predict.Subject19   8     M10 26.95646 predict.Subject
predict.Subject20  14     M10 30.91757 predict.Subject
predict.Subject21   8     M11 21.68537 predict.Subject
predict.Subject22  14     M11 25.64648 predict.Subject
predict.Subject23   8     M12 22.24613 predict.Subject
predict.Subject24  14     M12 26.20724 predict.Subject
predict.Subject25   8     M13 22.24613 predict.Subject
predict.Subject26  14     M13 26.20724 predict.Subject
predict.Subject27   8     M14 22.80688 predict.Subject
predict.Subject28  14     M14 26.76799 predict.Subject
predict.Subject29   8     M15 23.70409 predict.Subject
predict.Subject30  14     M15 27.66520 predict.Subject
predict.Subject31   8     M16 21.12462 predict.Subject
predict.Subject32  14     M16 25.08573 predict.Subject
predict.Subject33   8     F01 19.66666 predict.Subject
predict.Subject34  14     F01 23.62777 predict.Subject
predict.Subject35   8     F02 21.12462 predict.Subject
predict.Subject36  14     F02 25.08573 predict.Subject
predict.Subject37   8     F03 21.79752 predict.Subject
predict.Subject38  14     F03 25.75863 predict.Subject
predict.Subject39   8     F04 22.80688 predict.Subject
predict.Subject40  14     F04 26.76799 predict.Subject
predict.Subject41   8     F05 20.78816 predict.Subject
predict.Subject42  14     F05 24.74928 predict.Subject
predict.Subject43   8     F06 19.44235 predict.Subject
predict.Subject44  14     F06 23.40347 predict.Subject
predict.Subject45   8     F07 21.12462 predict.Subject
predict.Subject46  14     F07 25.08573 predict.Subject
predict.Subject47   8     F08 21.46107 predict.Subject
predict.Subject48  14     F08 25.42218 predict.Subject
predict.Subject49   8     F09 19.44235 predict.Subject
predict.Subject50  14     F09 23.40347 predict.Subject
predict.Subject51   8     F10 17.08719 predict.Subject
predict.Subject52  14     F10 21.04830 predict.Subject
predict.Subject53   8     F11 24.15269 predict.Subject
predict.Subject54  14     F11 28.11380 predict.Subject
> 
> 
> 
> cleanEx()
> nameEx("balancedGrouped")
> ### * balancedGrouped
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: balancedGrouped
> ### Title: Create a groupedData object from a matrix
> ### Aliases: balancedGrouped
> ### Keywords: data
> 
> ### ** Examples
> 
> OrthoMat <- asTable( Orthodont )
> Orth2 <- balancedGrouped(distance ~ age | Subject, data = OrthoMat,
+     labels = list(x = "Age",
+                   y = "Distance from pituitary to pterygomaxillary fissure"),
+     units = list(x = "(yr)", y = "(mm)"))
> Orth2[ 1:10, ]        ## check the first few entries
Grouped Data: distance ~ age | Subject
   age Subject distance
1    8     M16     22.0
2   10     M16     21.5
3   12     M16     23.5
4   14     M16     25.0
5    8     M05     20.0
6   10     M05     23.5
7   12     M05     22.5
8   14     M05     26.0
9    8     M02     21.5
10  10     M02     22.5
> 
> # Pinheiro and Bates, p. 109
> ergoStool.mat <- asTable(ergoStool)
> balancedGrouped(effort~Type|Subject,
+                 data=ergoStool.mat)
Warning in balancedGrouped(effort ~ Type | Subject, data = ergoStool.mat) :
  NAs introduced by coercion
Grouped Data: effort ~ Type | Subject
   Type Subject effort
1    T1       8      7
2    T2       8     11
3    T3       8      8
4    T4       8      7
5    T1       5      8
6    T2       5     11
7    T3       5      8
8    T4       5      7
9    T1       4      7
10   T2       4     11
11   T3       4     10
12   T4       4      9
13   T1       9      9
14   T2       9     13
15   T3       9     10
16   T4       9      8
17   T1       6      9
18   T2       6     11
19   T3       6     11
20   T4       6     10
21   T1       3      7
22   T2       3     14
23   T3       3     13
24   T4       3      9
25   T1       7      8
26   T2       7     12
27   T3       7     12
28   T4       7     11
29   T1       1     12
30   T2       1     15
31   T3       1     12
32   T4       1     10
33   T1       2     10
34   T2       2     14
35   T3       2     13
36   T4       2     12
> 
> 
> 
> cleanEx()
> nameEx("bdf")
> ### * bdf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bdf
> ### Title: Language scores
> ### Aliases: bdf
> ### Keywords: datasets
> 
> ### ** Examples
> 
> summary(bdf)
    schoolNR       pupilNR        IQ.verb         IQ.perf       sex     
 40     :  35   17001  :   1   Min.   : 4.00   Min.   : 5.000   0:1194  
 155    :  33   17002  :   1   1st Qu.:10.50   1st Qu.: 9.333   1:1093  
 183    :  31   17003  :   1   Median :12.00   Median :11.000           
 54     :  31   17004  :   1   Mean   :11.83   Mean   :11.047           
 159    :  31   17005  :   1   3rd Qu.:13.00   3rd Qu.:12.667           
 161    :  31   17006  :   1   Max.   :18.00   Max.   :17.667           
 (Other):2095   (Other):2281                                            
 Minority repeatgr    aritPRET        classNR         aritPOST    
 N:2155   0:1988   Min.   : 1.00   Min.   :  180   Min.   : 2.00  
 Y: 132   1: 295   1st Qu.: 9.00   1st Qu.: 6780   1st Qu.:14.00  
          2:   4   Median :12.00   Median :14180   Median :20.00  
                   Mean   :11.94   Mean   :13382   Mean   :19.44  
                   3rd Qu.:14.00   3rd Qu.:19580   3rd Qu.:25.00  
                   Max.   :20.00   Max.   :25880   Max.   :30.00  
                                                                  
    langPRET        langPOST          ses        denomina   schoolSES 
 Min.   :11.00   Min.   : 9.00   Min.   :10.00   1:775    Min.   :10  
 1st Qu.:30.00   1st Qu.:35.00   1st Qu.:20.00   2:803    1st Qu.:16  
 Median :35.00   Median :42.00   Median :27.00   3:617    Median :18  
 Mean   :34.19   Mean   :40.93   Mean   :27.81   4: 92    Mean   :19  
 3rd Qu.:39.00   3rd Qu.:48.00   3rd Qu.:35.00            3rd Qu.:22  
 Max.   :49.00   Max.   :58.00   Max.   :50.00            Max.   :29  
                                                                      
    satiprin     natitest    meetings        currmeet     mixedgra
 Min.   :2.143   0:1056   Min.   :1.100   Min.   :1.000   0:1658  
 1st Qu.:3.143   1:1231   1st Qu.:1.800   1st Qu.:1.667   1: 629  
 Median :3.286            Median :2.000   Median :1.833           
 Mean   :3.325            Mean   :2.055   Mean   :1.973           
 3rd Qu.:3.571            3rd Qu.:2.300   3rd Qu.:2.167           
 Max.   :4.000            Max.   :3.600   Max.   :3.333           
                                                                  
    percmino         aritdiff        homework        classsiz    
 Min.   : 0.000   Min.   : 8.00   Min.   :1.333   Min.   :10.00  
 1st Qu.: 0.000   1st Qu.:13.00   1st Qu.:2.000   1st Qu.:23.00  
 Median : 0.000   Median :15.00   Median :2.667   Median :27.00  
 Mean   : 6.579   Mean   :16.15   Mean   :2.462   Mean   :26.51  
 3rd Qu.: 6.000   3rd Qu.:19.00   3rd Qu.:2.667   3rd Qu.:31.00  
 Max.   :90.000   Max.   :27.00   Max.   :3.667   Max.   :39.00  
                                                                 
    groupsiz      IQ.ver.cen      avg.IQ.ver.cen      grpSiz.cen      
 Min.   : 5.0   Min.   :-7.8341   Min.   :-5.0841   Min.   :-18.1006  
 1st Qu.:17.0   1st Qu.:-1.3341   1st Qu.:-0.4174   1st Qu.: -6.1006  
 Median :24.0   Median : 0.1659   Median : 0.1059   Median :  0.8994  
 Mean   :23.1   Mean   : 0.0000   Mean   : 0.0000   Mean   :  0.0000  
 3rd Qu.:28.0   3rd Qu.: 1.1659   3rd Qu.: 0.5231   3rd Qu.:  4.8994  
 Max.   :37.0   Max.   : 6.1659   Max.   : 1.8993   Max.   : 13.8994  
                                                                      
> 
> ## More examples, including lme() fits  reproducing parts in the above
> ## book, are available in the R script files
> system.file("mlbook", "ch04.R", package ="nlme") # and
[1] "/usr/local/lib/R/library/nlme/mlbook/ch04.R"
> system.file("mlbook", "ch05.R", package ="nlme")
[1] "/usr/local/lib/R/library/nlme/mlbook/ch05.R"
> 
> 
> 
> cleanEx()
> nameEx("coef.corStruct")
> ### * coef.corStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.corStruct
> ### Title: Coefficients of a corStruct Object
> ### Aliases: coef.corStruct coef.corAR1 coef.corARMAd coef.corCAR1
> ###   coef.corCompSymm coef.corHF coef.corIdent coef.corLin coef.corNatural
> ###   coef.corSpatial coef.corSpher coef.corSymm coef<-.corStruct
> ###   coef<-.corAR1 coef<-.corARMA coef<-.corCAR1 coef<-.corCompSymm
> ###   coef<-.corNatural coef<-.corHF coef<-.corIdent coef<-.corLin
> ###   coef<-.corSpatial coef<-.corSpher coef<-.corSymm coef.summary.nlsList
> ### Keywords: models
> 
> ### ** Examples
> 
> cst1 <- corARMA(p = 1, q = 1)
> coef(cst1)
[1] 0 0
> 
> 
> 
> cleanEx()
> nameEx("coef.gnls")
> ### * coef.gnls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.gnls
> ### Title: Extract gnls Coefficients
> ### Aliases: coef.gnls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gnls(weight ~ SSlogis(Time, Asym, xmid, scal), Soybean,
+             weights = varPower())
> coef(fm1)
     Asym      xmid      scal 
17.356822 51.872316  7.620525 
> 
> 
> 
> cleanEx()
> nameEx("coef.lmList")
> ### * coef.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.lmList
> ### Title: Extract lmList Coefficients
> ### Aliases: coef.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age|Subject, data = Orthodont)
> coef(fm1)
    (Intercept)   age
M16       16.95 0.550
M05       13.65 0.850
M02       14.85 0.775
M11       20.05 0.325
M07       14.95 0.800
M08       19.75 0.375
M03       16.00 0.750
M12       13.25 1.000
M13        2.80 1.950
M14       19.10 0.525
M09       14.40 0.975
M15       13.50 1.125
M06       18.95 0.675
M04       24.70 0.175
M01       17.30 0.950
M10       21.25 0.750
F10       13.55 0.450
F09       18.10 0.275
F06       17.00 0.375
F01       17.25 0.375
F05       19.60 0.275
F07       16.95 0.550
F02       14.20 0.800
F08       21.45 0.175
F03       14.40 0.850
F04       19.65 0.475
F11       18.95 0.675
> coef(fm1, augFrame = TRUE)
    (Intercept)   age distance    Sex
M16       16.95 0.550   23.000   Male
M05       13.65 0.850   23.000   Male
M02       14.85 0.775   23.375   Male
M11       20.05 0.325   23.625   Male
M07       14.95 0.800   23.750   Male
M08       19.75 0.375   23.875   Male
M03       16.00 0.750   24.250   Male
M12       13.25 1.000   24.250   Male
M13        2.80 1.950   24.250   Male
M14       19.10 0.525   24.875   Male
M09       14.40 0.975   25.125   Male
M15       13.50 1.125   25.875   Male
M06       18.95 0.675   26.375   Male
M04       24.70 0.175   26.625   Male
M01       17.30 0.950   27.750   Male
M10       21.25 0.750   29.500   Male
F10       13.55 0.450   18.500 Female
F09       18.10 0.275   21.125 Female
F06       17.00 0.375   21.125 Female
F01       17.25 0.375   21.375 Female
F05       19.60 0.275   22.625 Female
F07       16.95 0.550   23.000 Female
F02       14.20 0.800   23.000 Female
F08       21.45 0.175   23.375 Female
F03       14.40 0.850   23.750 Female
F04       19.65 0.475   24.875 Female
F11       18.95 0.675   26.375 Female
> 
> 
> 
> cleanEx()
> nameEx("coef.lme")
> ### * coef.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.lme
> ### Title: Extract lme Coefficients
> ### Aliases: coef.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, Orthodont, random = ~ age | Subject)
> coef(fm1)
    (Intercept)       age
M16    16.57335 0.5913314
M05    15.58444 0.6857855
M02    16.03361 0.6746930
M11    17.65160 0.5413593
M07    16.15314 0.6950852
M08    17.62141 0.5654490
M03    16.58721 0.6960375
M12    15.76312 0.7747492
M13    12.63157 1.0738537
M14    17.66546 0.6460654
M09    16.31672 0.7960938
M15    16.22614 0.8683628
M06    17.97875 0.7433765
M04    19.76156 0.5943004
M01    17.81269 0.8758697
M10    19.41435 0.8713318
F10    14.47973 0.4095945
F09    16.47016 0.4421435
F06    16.14053 0.4736282
F01    16.27515 0.4819755
F05    17.27792 0.4922276
F07    16.57335 0.5913314
F02    15.74926 0.6700431
F08    18.01143 0.4857849
F03    15.98832 0.7108275
F04    17.83027 0.6303230
F11    17.97875 0.7433765
> coef(fm1, augFrame = TRUE)
    (Intercept)       age distance    Sex
M16    16.57335 0.5913314   23.000   Male
M05    15.58444 0.6857855   23.000   Male
M02    16.03361 0.6746930   23.375   Male
M11    17.65160 0.5413593   23.625   Male
M07    16.15314 0.6950852   23.750   Male
M08    17.62141 0.5654490   23.875   Male
M03    16.58721 0.6960375   24.250   Male
M12    15.76312 0.7747492   24.250   Male
M13    12.63157 1.0738537   24.250   Male
M14    17.66546 0.6460654   24.875   Male
M09    16.31672 0.7960938   25.125   Male
M15    16.22614 0.8683628   25.875   Male
M06    17.97875 0.7433765   26.375   Male
M04    19.76156 0.5943004   26.625   Male
M01    17.81269 0.8758697   27.750   Male
M10    19.41435 0.8713318   29.500   Male
F10    14.47973 0.4095945   18.500 Female
F09    16.47016 0.4421435   21.125 Female
F06    16.14053 0.4736282   21.125 Female
F01    16.27515 0.4819755   21.375 Female
F05    17.27792 0.4922276   22.625 Female
F07    16.57335 0.5913314   23.000 Female
F02    15.74926 0.6700431   23.000 Female
F08    18.01143 0.4857849   23.375 Female
F03    15.98832 0.7108275   23.750 Female
F04    17.83027 0.6303230   24.875 Female
F11    17.97875 0.7433765   26.375 Female
> 
> 
> 
> cleanEx()
> nameEx("coef.modelStruct")
> ### * coef.modelStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.modelStruct
> ### Title: Extract modelStruct Object Coefficients
> ### Aliases: coef.modelStruct coef<-.modelStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> lms1 <- lmeStruct(reStruct = reStruct(pdDiag(diag(2), ~age)),
+    corStruct = corAR1(0.3))
> coef(lms1)
reStruct1 reStruct2 corStruct 
0.0000000 0.0000000 0.6190392 
> 
> 
> 
> cleanEx()
> nameEx("coef.pdMat")
> ### * coef.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.pdMat
> ### Title: pdMat Object Coefficients
> ### Aliases: coef.pdMat coef.pdBlocked coef.pdCompSymm coef.pdDiag
> ###   coef.pdIdent coef.pdNatural coef.pdSymm coef<-.pdMat coef<-.pdBlocked
> ### Keywords: models
> 
> ### ** Examples
> 
> coef(pdSymm(diag(3)))
[1] 0 0 0 0 0 0
> 
> 
> 
> cleanEx()
> nameEx("coef.reStruct")
> ### * coef.reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.reStruct
> ### Title: reStruct Object Coefficients
> ### Aliases: coef.reStruct coef<-.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(list(A = pdSymm(diag(1:3), form = ~Score),
+   B = pdDiag(2 * diag(4), form = ~Educ)))
> coef(rs1)
       B1        B2        B3        B4        A1        A2        A3        A4 
0.3465736 0.3465736 0.3465736 0.3465736 0.0000000 0.0000000 0.3465736 0.0000000 
       A5        A6 
0.0000000 0.5493061 
> 
> 
> 
> cleanEx()
> nameEx("coef.varFunc")
> ### * coef.varFunc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.varFunc
> ### Title: varFunc Object Coefficients
> ### Aliases: coef.varFunc coef.varComb coef.varConstPower coef.varExp
> ###   coef.varFixed coef.varIdent coef.varPower coef<-.varComb
> ###   coef<-.varConstPower coef<-.varExp coef<-.varFixed coef<-.varIdent
> ###   coef<-.varPower
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varPower(1)
> coef(vf1)
power 
    1 
> coef(vf1) <- 2
> 
> 
> 
> cleanEx()
> nameEx("collapse")
> ### * collapse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: collapse
> ### Title: Collapse According to Groups
> ### Aliases: collapse
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("collapse.groupedData")
> ### * collapse.groupedData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: collapse.groupedData
> ### Title: Collapse a groupedData Object
> ### Aliases: collapse.groupedData
> ### Keywords: models
> 
> ### ** Examples
> 
> # collapsing by Dog
> collapse(Pixel, collapse = 1)  # same as collapse(Pixel, collapse = "Dog")
Grouped Data: pixel ~ day | Dog
   Dog Side day   pixel
1    1    L   0 1043.35
2    1    L   1 1049.30
3    1    L   2 1047.40
4    1    L   4 1052.25
5    1    L   6 1048.25
6    1    L  10 1045.15
7    1    L  14 1042.95
8    2    L   0 1047.70
9    2    L   1 1049.25
10   2    L   2 1052.30
11   2    L   4 1055.60
12   2    L   6 1058.35
13   2    L  10 1063.65
14   2    L  14 1052.10
15   3    L   0 1041.85
16   3    L   4 1075.95
17   3    L   6 1086.80
18   3    L   8 1083.10
19   3    L  10 1086.45
20   3    L  14 1081.60
21   3    L  21 1063.70
22   4    L   0 1037.00
23   4    L   4 1102.40
24   4    L   6 1118.95
25   4    L   8 1104.55
26   4    L  10 1123.25
27   4    L  14 1106.95
28   4    L  21 1089.60
29   5    L   4 1119.55
30   5    L   6 1122.90
31   5    L   8 1126.15
32   5    L  10 1128.60
33   5    L  14 1106.05
34   6    L   4 1100.10
35   6    L   6 1102.80
36   6    L   8 1104.70
37   6    L  10 1093.95
38   6    L  14 1084.45
39   7    L   4 1140.50
40   7    L   6 1148.25
41   7    L  10 1124.10
42   7    L  14 1113.75
43   8    L   4 1088.15
44   8    L   6 1094.75
45   8    L  10 1103.80
46   8    L  14 1094.20
47   9    L   4 1082.70
48   9    L   8 1081.75
49  10    L   4 1113.65
50  10    L   6 1124.60
51  10    L   8 1121.25
> 
> 
> 
> cleanEx()
> nameEx("compareFits")
> ### * compareFits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compareFits
> ### Title: Compare Fitted Objects
> ### Aliases: compareFits print.compareFits
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(Orthodont)
> fm2 <- lme(fm1)
> (cF12 <- compareFits(coef(fm1), coef(fm2)))
, , (Intercept)

    coef(fm1) coef(fm2)
M16     16.95  16.57335
M05     13.65  15.58444
M02     14.85  16.03361
M11     20.05  17.65160
M07     14.95  16.15314
M08     19.75  17.62141
M03     16.00  16.58721
M12     13.25  15.76312
M13      2.80  12.63156
M14     19.10  17.66546
M09     14.40  16.31671
M15     13.50  16.22614
M06     18.95  17.97875
M04     24.70  19.76157
M01     17.30  17.81269
M10     21.25  19.41435
F10     13.55  14.47973
F09     18.10  16.47016
F06     17.00  16.14053
F01     17.25  16.27515
F05     19.60  17.27792
F07     16.95  16.57335
F02     14.20  15.74926
F08     21.45  18.01143
F03     14.40  15.98832
F04     19.65  17.83028
F11     18.95  17.97875

, , age

    coef(fm1) coef(fm2)
M16     0.550 0.5913314
M05     0.850 0.6857856
M02     0.775 0.6746931
M11     0.325 0.5413591
M07     0.800 0.6950853
M08     0.375 0.5654488
M03     0.750 0.6960376
M12     1.000 0.7747494
M13     1.950 1.0738543
M14     0.525 0.6460653
M09     0.975 0.7960939
M15     1.125 0.8683630
M06     0.675 0.7433764
M04     0.175 0.5943001
M01     0.950 0.8758698
M10     0.750 0.8713317
F10     0.450 0.4095945
F09     0.275 0.4421434
F06     0.375 0.4736281
F01     0.375 0.4819754
F05     0.275 0.4922274
F07     0.550 0.5913314
F02     0.800 0.6700432
F08     0.175 0.4857847
F03     0.850 0.7108276
F04     0.475 0.6303229
F11     0.675 0.7433764

> 
> 
> 
> cleanEx()
> nameEx("comparePred")
> ### * comparePred
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comparePred
> ### Title: Compare Predictions
> ### Aliases: comparePred comparePred.gls comparePred.lme comparePred.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age * Sex, data = Orthodont, random = ~ age)
> fm2 <- update(fm1, distance ~ age)
> comparePred(fm1, fm2, length.out = 2)
     age .groups distance    .type
1      8     M01 26.00000 original
2     10     M01 25.00000 original
3     12     M01 29.00000 original
4     14     M01 31.00000 original
5      8     M02 21.50000 original
6     10     M02 22.50000 original
7     12     M02 23.00000 original
8     14     M02 26.50000 original
9      8     M03 23.00000 original
10    10     M03 22.50000 original
11    12     M03 24.00000 original
12    14     M03 27.50000 original
13     8     M04 25.50000 original
14    10     M04 27.50000 original
15    12     M04 26.50000 original
16    14     M04 27.00000 original
17     8     M05 20.00000 original
18    10     M05 23.50000 original
19    12     M05 22.50000 original
20    14     M05 26.00000 original
21     8     M06 24.50000 original
22    10     M06 25.50000 original
23    12     M06 27.00000 original
24    14     M06 28.50000 original
25     8     M07 22.00000 original
26    10     M07 22.00000 original
27    12     M07 24.50000 original
28    14     M07 26.50000 original
29     8     M08 24.00000 original
30    10     M08 21.50000 original
31    12     M08 24.50000 original
32    14     M08 25.50000 original
33     8     M09 23.00000 original
34    10     M09 20.50000 original
35    12     M09 31.00000 original
36    14     M09 26.00000 original
37     8     M10 27.50000 original
38    10     M10 28.00000 original
39    12     M10 31.00000 original
40    14     M10 31.50000 original
41     8     M11 23.00000 original
42    10     M11 23.00000 original
43    12     M11 23.50000 original
44    14     M11 25.00000 original
45     8     M12 21.50000 original
46    10     M12 23.50000 original
47    12     M12 24.00000 original
48    14     M12 28.00000 original
49     8     M13 17.00000 original
50    10     M13 24.50000 original
51    12     M13 26.00000 original
52    14     M13 29.50000 original
53     8     M14 22.50000 original
54    10     M14 25.50000 original
55    12     M14 25.50000 original
56    14     M14 26.00000 original
57     8     M15 23.00000 original
58    10     M15 24.50000 original
59    12     M15 26.00000 original
60    14     M15 30.00000 original
61     8     M16 22.00000 original
62    10     M16 21.50000 original
63    12     M16 23.50000 original
64    14     M16 25.00000 original
65     8     F01 21.00000 original
66    10     F01 20.00000 original
67    12     F01 21.50000 original
68    14     F01 23.00000 original
69     8     F02 21.00000 original
70    10     F02 21.50000 original
71    12     F02 24.00000 original
72    14     F02 25.50000 original
73     8     F03 20.50000 original
74    10     F03 24.00000 original
75    12     F03 24.50000 original
76    14     F03 26.00000 original
77     8     F04 23.50000 original
78    10     F04 24.50000 original
79    12     F04 25.00000 original
80    14     F04 26.50000 original
81     8     F05 21.50000 original
82    10     F05 23.00000 original
83    12     F05 22.50000 original
84    14     F05 23.50000 original
85     8     F06 20.00000 original
86    10     F06 21.00000 original
87    12     F06 21.00000 original
88    14     F06 22.50000 original
89     8     F07 21.50000 original
90    10     F07 22.50000 original
91    12     F07 23.00000 original
92    14     F07 25.00000 original
93     8     F08 23.00000 original
94    10     F08 23.00000 original
95    12     F08 23.50000 original
96    14     F08 24.00000 original
97     8     F09 20.00000 original
98    10     F09 21.00000 original
99    12     F09 22.00000 original
100   14     F09 21.50000 original
101    8     F10 16.50000 original
102   10     F10 19.00000 original
103   12     F10 19.00000 original
104   14     F10 19.50000 original
105    8     F11 24.50000 original
106   10     F11 25.00000 original
107   12     F11 28.00000 original
108   14     F11 28.00000 original
109    8     M01 24.84572      fm1
110   14     M01 30.03802      fm1
111    8     M02 21.27478      fm1
112   14     M02 25.83966      fm1
113    8     M03 22.03311      fm1
114   14     M03 26.62726      fm1
115    8     M04 24.46452      fm1
116   14     M04 28.32495      fm1
117    8     M05 20.90249      fm1
118   14     M05 25.55790      fm1
119    8     M06 23.88527      fm1
120   14     M06 28.52762      fm1
121    8     M07 21.57351      fm1
122   14     M07 26.20819      fm1
123    8     M08 21.99187      fm1
124   14     M08 25.95500      fm1
125    8     M09 22.60752      fm1
126   14     M09 27.63182      fm1
127    8     M10 26.47272      fm1
128   14     M10 31.48306      fm1
129    8     M11 21.81724      fm1
130   14     M11 25.68038      fm1
131    8     M12 21.84919      fm1
132   14     M12 26.84421      fm1
133    8     M13 21.15031      fm1
134   14     M13 27.66861      fm1
135    8     M14 22.72716      fm1
136   14     M14 27.01008      fm1
137    8     M15 23.13140      fm1
138   14     M15 28.45567      fm1
139    8     M16 21.12319      fm1
140   14     M16 25.29756      fm1
141    8     F01 20.20973      fm1
142   14     F01 22.81848      fm1
143    8     F02 21.27124      fm1
144   14     F02 24.69027      fm1
145    8     F03 21.86869      fm1
146   14     F03 25.42735      fm1
147    8     F04 23.09591      fm1
148   14     F04 26.14246      fm1
149    8     F05 21.34035      fm1
150   14     F05 23.88784      fm1
151    8     F06 19.99832      fm1
152   14     F06 22.58725      fm1
153    8     F07 21.45516      fm1
154   14     F07 24.47333      fm1
155    8     F08 22.04815      fm1
156   14     F08 24.49475      fm1
157    8     F09 20.07189      fm1
158   14     F09 22.50047      fm1
159    8     F10 17.72334      fm1
160   14     F10 20.22443      fm1
161    8     F11 24.21723      fm1
162   14     F11 27.70339      fm1
1091   8     M01 24.81965      fm2
1101  14     M01 30.07487      fm2
1111   8     M02 21.43115      fm2
1121  14     M02 25.47931      fm2
1131   8     M03 22.15551      fm2
1141  14     M03 26.33173      fm2
1151   8     M04 24.51597      fm2
1161  14     M04 28.08177      fm2
1171   8     M05 21.07073      fm2
1181  14     M05 25.18544      fm2
1191   8     M06 23.92577      fm2
1201  14     M06 28.38602      fm2
1211   8     M07 21.71382      fm2
1221  14     M07 25.88433      fm2
1231   8     M08 22.14500      fm2
1241  14     M08 25.53769      fm2
1251   8     M09 22.68547      fm2
1261  14     M09 27.46203      fm2
1271   8     M10 26.38500      fm2
1281  14     M10 31.61299      fm2
1291   8     M11 21.98248      fm2
1301  14     M11 25.23063      fm2
1311   8     M12 21.96111      fm2
1321  14     M12 26.60961      fm2
1331   8     M13 21.22240      fm2
1341  14     M13 27.66552      fm2
1351   8     M14 22.83398      fm2
1361  14     M14 26.71037      fm2
1371   8     M15 23.17304      fm2
1381  14     M15 28.38322      fm2
1391   8     M16 21.30401      fm2
1401  14     M16 24.85199      fm2
1411   8     F01 20.13096      fm2
1421  14     F01 23.02281      fm2
1431   8     F02 21.10961      fm2
1441  14     F02 25.12987      fm2
1451   8     F03 21.67494      fm2
1461  14     F03 25.93991      fm2
1471   8     F04 22.87286      fm2
1481  14     F04 26.65480      fm2
1491   8     F05 21.21574      fm2
1501  14     F05 24.16910      fm2
1511   8     F06 19.92955      fm2
1521  14     F06 22.77132      fm2
1531   8     F07 21.30401      fm2
1541  14     F07 24.85199      fm2
1551   8     F08 21.89771      fm2
1561  14     F08 24.81242      fm2
1571   8     F09 20.00731      fm2
1581  14     F09 22.66017      fm2
1591   8     F10 17.75649      fm2
1601  14     F10 20.21405      fm2
1611   8     F11 23.92577      fm2
1621  14     F11 28.38602      fm2
> 
> 
> 
> cleanEx()
> nameEx("corAR1")
> ### * corAR1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corAR1
> ### Title: AR(1) Correlation Structure
> ### Aliases: corAR1
> ### Keywords: models
> 
> ### ** Examples
> 
> ## covariate is observation order and grouping factor is Mare
> cs1 <- corAR1(0.2, form = ~ 1 | Mare)
> 
> # Pinheiro and Bates, p. 236
> cs1AR1 <- corAR1(0.8, form = ~ 1 | Subject)
> cs1AR1. <- Initialize(cs1AR1, data = Orthodont)
> corMatrix(cs1AR1.)
$M01
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M02
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M03
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M04
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M05
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M06
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M07
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M08
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M09
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M10
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M11
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M12
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M13
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M14
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M15
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M16
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F01
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F02
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F03
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F04
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F05
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F06
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F07
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F08
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F09
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F10
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F11
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

> 
> # Pinheiro and Bates, p. 240
> fm1Ovar.lme <- lme(follicles ~ sin(2*pi*Time) + cos(2*pi*Time),
+                    data = Ovary, random = pdDiag(~sin(2*pi*Time)))
> fm2Ovar.lme <- update(fm1Ovar.lme, correlation = corAR1())
> 
> # Pinheiro and Bates, pp. 255-258:  use in gls
> fm1Dial.gls <-
+   gls(rate ~(pressure + I(pressure^2) + I(pressure^3) + I(pressure^4))*QB,
+       Dialyzer)
> fm2Dial.gls <- update(fm1Dial.gls,
+                  weights = varPower(form = ~ pressure))
> fm3Dial.gls <- update(fm2Dial.gls,
+                     corr = corAR1(0.771, form = ~ 1 | Subject))
> 
> # Pinheiro and Bates use in nlme:  
> # from p. 240 needed on p. 396
> fm1Ovar.lme <- lme(follicles ~ sin(2*pi*Time) + cos(2*pi*Time),
+                    data = Ovary, random = pdDiag(~sin(2*pi*Time)))
> fm5Ovar.lme <- update(fm1Ovar.lme,
+                 corr = corARMA(p = 1, q = 1))
> # p. 396
> fm1Ovar.nlme <- nlme(follicles~
+      A+B*sin(2*pi*w*Time)+C*cos(2*pi*w*Time),
+    data=Ovary, fixed=A+B+C+w~1,
+    random=pdDiag(A+B+w~1),
+    start=c(fixef(fm5Ovar.lme), 1) )
> # p. 397
> fm2Ovar.nlme <- update(fm1Ovar.nlme,
+          corr=corAR1(0.311) )
> 
> 
> 
> cleanEx()
> nameEx("corARMA")
> ### * corARMA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corARMA
> ### Title: ARMA(p,q) Correlation Structure
> ### Aliases: corARMA coef.corARMA
> ### Keywords: models
> 
> ### ** Examples
> 
> ## ARMA(1,2) structure, with observation order as a covariate and
> ## Mare as grouping factor
> cs1 <- corARMA(c(0.2, 0.3, -0.1), form = ~ 1 | Mare, p = 1, q = 2)
> 
> # Pinheiro and Bates, p. 237 
> cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, q = 1)
> cs1ARMA <- Initialize(cs1ARMA, data = Orthodont)
> corMatrix(cs1ARMA)
$M01
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M02
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M03
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M04
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M05
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M06
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M07
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M08
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M09
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M10
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M11
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M12
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M13
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M14
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M15
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M16
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F01
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F02
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F03
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F04
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F05
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F06
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F07
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F08
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F09
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F10
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F11
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

> 
> cs2ARMA <- corARMA(c(0.8, 0.4), form = ~ 1 | Subject, p=1, q=1)
> cs2ARMA <- Initialize(cs2ARMA, data = Orthodont)
> corMatrix(cs2ARMA)
$M01
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M02
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M03
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M04
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M05
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M06
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M07
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M08
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M09
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M10
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M11
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M12
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M13
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M14
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M15
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$M16
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$F01
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$F02
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$F03
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$F04
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$F05
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$F06
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$F07
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$F08
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$F09
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$F10
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

$F11
       [,1]  [,2]  [,3]   [,4]
[1,] 1.0000 0.880 0.704 0.5632
[2,] 0.8800 1.000 0.880 0.7040
[3,] 0.7040 0.880 1.000 0.8800
[4,] 0.5632 0.704 0.880 1.0000

> 
> # Pinheiro and Bates use in nlme:  
> # from p. 240 needed on p. 396
> fm1Ovar.lme <- lme(follicles ~ sin(2*pi*Time) + cos(2*pi*Time),
+                    data = Ovary, random = pdDiag(~sin(2*pi*Time)))
> fm5Ovar.lme <- update(fm1Ovar.lme,
+                 corr = corARMA(p = 1, q = 1))
> # p. 396
> fm1Ovar.nlme <- nlme(follicles~
+      A+B*sin(2*pi*w*Time)+C*cos(2*pi*w*Time),
+    data=Ovary, fixed=A+B+C+w~1,
+    random=pdDiag(A+B+w~1),
+    start=c(fixef(fm5Ovar.lme), 1) )
> # p. 397
> fm3Ovar.nlme <- update(fm1Ovar.nlme,
+          corr=corARMA(p=0, q=2) )
> 
> 
> 
> cleanEx()
> nameEx("corCAR1")
> ### * corCAR1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corCAR1
> ### Title: Continuous AR(1) Correlation Structure
> ### Aliases: corCAR1
> ### Keywords: models
> 
> ### ** Examples
> 
> ## covariate is Time and grouping factor is Mare
> cs1 <- corCAR1(0.2, form = ~ Time | Mare)
> 
> # Pinheiro and Bates, pp. 240, 243
> fm1Ovar.lme <- lme(follicles ~
+            sin(2*pi*Time) + cos(2*pi*Time),
+    data = Ovary, random = pdDiag(~sin(2*pi*Time)))
> fm4Ovar.lme <- update(fm1Ovar.lme,
+           correlation = corCAR1(form = ~Time))
> 
> 
> 
> 
> cleanEx()
> nameEx("corCompSymm")
> ### * corCompSymm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corCompSymm
> ### Title: Compound Symmetry Correlation Structure
> ### Aliases: corCompSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> ## covariate is observation order and grouping factor is Subject
> cs1 <- corCompSymm(0.5, form = ~ 1 | Subject)
> 
> # Pinheiro and Bates, pp. 222-225 
> fm1BW.lme <- lme(weight ~ Time * Diet, BodyWeight,
+                    random = ~ Time)
> # p. 223
> fm2BW.lme <- update(fm1BW.lme, weights = varPower())
> # p. 225
> cs1CompSymm <- corCompSymm(value = 0.3, form = ~ 1 | Subject)
> cs2CompSymm <- corCompSymm(value = 0.3, form = ~ age | Subject)
> cs1CompSymm <- Initialize(cs1CompSymm, data = Orthodont)
> corMatrix(cs1CompSymm)
$M01
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M02
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M03
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M04
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M05
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M06
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M07
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M08
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M09
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M10
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M11
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M12
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M13
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M14
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M15
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M16
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F01
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F02
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F03
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F04
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F05
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F06
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F07
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F08
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F09
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F10
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F11
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

> 
> 
> 
> 
> cleanEx()
> nameEx("corExp")
> ### * corExp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corExp
> ### Title: Exponential Correlation Structure
> ### Aliases: corExp
> ### Keywords: models
> 
> ### ** Examples
> 
> sp1 <- corExp(form = ~ x + y + z)
> 
> # Pinheiro and Bates, p. 238
> spatDat <- data.frame(x = (0:4)/4, y = (0:4)/4)
> 
> cs1Exp <- corExp(1, form = ~ x + y)
> cs1Exp <- Initialize(cs1Exp, spatDat)
> corMatrix(cs1Exp)
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 1.0000000 0.7021885 0.4930687 0.3462272 0.2431167
[2,] 0.7021885 1.0000000 0.7021885 0.4930687 0.3462272
[3,] 0.4930687 0.7021885 1.0000000 0.7021885 0.4930687
[4,] 0.3462272 0.4930687 0.7021885 1.0000000 0.7021885
[5,] 0.2431167 0.3462272 0.4930687 0.7021885 1.0000000
> 
> cs2Exp <- corExp(1, form = ~ x + y, metric = "man")
> cs2Exp <- Initialize(cs2Exp, spatDat)
> corMatrix(cs2Exp)
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 1.0000000 0.6065307 0.3678794 0.2231302 0.1353353
[2,] 0.6065307 1.0000000 0.6065307 0.3678794 0.2231302
[3,] 0.3678794 0.6065307 1.0000000 0.6065307 0.3678794
[4,] 0.2231302 0.3678794 0.6065307 1.0000000 0.6065307
[5,] 0.1353353 0.2231302 0.3678794 0.6065307 1.0000000
> 
> cs3Exp <- corExp(c(1, 0.2), form = ~ x + y,
+                  nugget = TRUE)
> cs3Exp <- Initialize(cs3Exp, spatDat)
> corMatrix(cs3Exp)
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 1.0000000 0.5617508 0.3944550 0.2769817 0.1944934
[2,] 0.5617508 1.0000000 0.5617508 0.3944550 0.2769817
[3,] 0.3944550 0.5617508 1.0000000 0.5617508 0.3944550
[4,] 0.2769817 0.3944550 0.5617508 1.0000000 0.5617508
[5,] 0.1944934 0.2769817 0.3944550 0.5617508 1.0000000
> 
> # example lme(..., corExp ...)
> # Pinheiro and Bates, pp. 222-247
> # p. 222
> options(contrasts = c("contr.treatment", "contr.poly"))
> fm1BW.lme <- lme(weight ~ Time * Diet, BodyWeight,
+                    random = ~ Time)
> # p. 223
> fm2BW.lme <- update(fm1BW.lme, weights = varPower())
> # p. 246
> fm3BW.lme <- update(fm2BW.lme,
+            correlation = corExp(form = ~ Time))
> # p. 247
> fm4BW.lme <-
+       update(fm3BW.lme, correlation = corExp(form =  ~ Time,
+                         nugget = TRUE))
> anova(fm3BW.lme, fm4BW.lme)
          Model df      AIC      BIC    logLik   Test  L.Ratio p-value
fm3BW.lme     1 12 1145.140 1182.770 -560.5702                        
fm4BW.lme     2 13 1137.638 1178.403 -555.8189 1 vs 2 9.502598  0.0021
> 
> 
> 
> 
> base::options(contrasts = c(unordered = "contr.treatment",ordered = "contr.poly"))
> cleanEx()
> nameEx("corFactor")
> ### * corFactor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corFactor
> ### Title: Factor of a Correlation Matrix
> ### Aliases: corFactor
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("corFactor.corStruct")
> ### * corFactor.corStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corFactor.corStruct
> ### Title: Factor of a corStruct Object Matrix
> ### Aliases: corFactor.corCompSymm corFactor.corAR1 corFactor.corARMA
> ###   corFactor.corCAR1 corFactor.corNatural corFactor.corSpatial
> ###   corFactor.corStruct corFactor.corSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corAR1(form = ~1 | Subject)
> cs1 <- Initialize(cs1, data = Orthodont)
> corFactor(cs1)
  [1] 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0
 [38] 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0
 [75] 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0
[112] 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0
[149] 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0
[186] 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0
[223] 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0
[260] 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0
[297] 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0
[334] 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0
[371] 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0
[408] 0 0 0 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1
attr(,"logDet")
[1] 0
> 
> 
> 
> cleanEx()
> nameEx("corGaus")
> ### * corGaus
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corGaus
> ### Title: Gaussian Correlation Structure
> ### Aliases: corGaus
> ### Keywords: models
> 
> ### ** Examples
> 
> sp1 <- corGaus(form = ~ x + y + z)
> 
> # example lme(..., corGaus ...)
> # Pinheiro and Bates, pp. 222-249
> fm1BW.lme <- lme(weight ~ Time * Diet, BodyWeight,
+                    random = ~ Time)
> # p. 223
> fm2BW.lme <- update(fm1BW.lme, weights = varPower())
> # p 246 
> fm3BW.lme <- update(fm2BW.lme,
+            correlation = corExp(form = ~ Time))
> # p. 249
> fm8BW.lme <- update(fm3BW.lme, correlation = corGaus(form = ~ Time))
> 
> 
> 
> 
> cleanEx()
> nameEx("corLin")
> ### * corLin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corLin
> ### Title: Linear Correlation Structure
> ### Aliases: corLin
> ### Keywords: models
> 
> ### ** Examples
> 
> sp1 <- corLin(form = ~ x + y)
> 
> # example lme(..., corLin ...)
> # Pinheiro and Bates, pp. 222-249
> fm1BW.lme <- lme(weight ~ Time * Diet, BodyWeight,
+                    random = ~ Time)
> # p. 223
> fm2BW.lme <- update(fm1BW.lme, weights = varPower())
> # p 246 
> fm3BW.lme <- update(fm2BW.lme,
+            correlation = corExp(form = ~ Time))
> # p. 249
> fm7BW.lme <- update(fm3BW.lme, correlation = corLin(form = ~ Time))
> 
> 
> 
> 
> cleanEx()
> nameEx("corMatrix")
> ### * corMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corMatrix
> ### Title: Extract Correlation Matrix
> ### Aliases: corMatrix
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("corMatrix.corStruct")
> ### * corMatrix.corStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corMatrix.corStruct
> ### Title: Matrix of a corStruct Object
> ### Aliases: corMatrix.corStruct corMatrix.corCompSymm corMatrix.corAR1
> ###   corMatrix.corARMA corMatrix.corCAR1 corMatrix.corCompSymm
> ###   corMatrix.corIdent corMatrix.corNatural corMatrix.corSpatial
> ###   corMatrix.corSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corAR1(0.3)
> corMatrix(cs1, covariate = 1:4)
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.30 0.09 0.027
[2,] 0.300 1.00 0.30 0.090
[3,] 0.090 0.30 1.00 0.300
[4,] 0.027 0.09 0.30 1.000
> corMatrix(cs1, covariate = 1:4, corr = FALSE)
           [,1]       [,2]       [,3]     [,4]
[1,]  1.0000000  0.0000000  0.0000000 0.000000
[2,] -0.3144855  1.0482848  0.0000000 0.000000
[3,]  0.0000000 -0.3144855  1.0482848 0.000000
[4,]  0.0000000  0.0000000 -0.3144855 1.048285
attr(,"logDet")
[1] 0.141466
> 
> # Pinheiro and Bates, p. 225
> cs1CompSymm <- corCompSymm(value = 0.3, form = ~ 1 | Subject)
> cs1CompSymm <- Initialize(cs1CompSymm, data = Orthodont)
> corMatrix(cs1CompSymm)
$M01
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M02
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M03
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M04
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M05
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M06
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M07
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M08
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M09
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M10
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M11
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M12
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M13
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M14
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M15
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M16
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F01
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F02
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F03
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F04
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F05
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F06
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F07
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F08
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F09
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F10
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F11
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

> 
> # Pinheiro and Bates, p. 226
> cs1Symm <- corSymm(value = c(0.2, 0.1, -0.1, 0, 0.2, 0),
+                    form = ~ 1 | Subject)
> cs1Symm <- Initialize(cs1Symm, data = Orthodont)
> corMatrix(cs1Symm)
$M01
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M02
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M03
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M04
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M05
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M06
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M07
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M08
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M09
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M10
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M11
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M12
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M13
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M14
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M15
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M16
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F01
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F02
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F03
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F04
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F05
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F06
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F07
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F08
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F09
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F10
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F11
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

> 
> # Pinheiro and Bates, p. 236 
> cs1AR1 <- corAR1(0.8, form = ~ 1 | Subject)
> cs1AR1 <- Initialize(cs1AR1, data = Orthodont)
> corMatrix(cs1AR1)
$M01
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M02
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M03
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M04
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M05
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M06
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M07
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M08
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M09
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M10
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M11
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M12
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M13
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M14
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M15
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$M16
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F01
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F02
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F03
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F04
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F05
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F06
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F07
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F08
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F09
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F10
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

$F11
      [,1] [,2] [,3]  [,4]
[1,] 1.000 0.80 0.64 0.512
[2,] 0.800 1.00 0.80 0.640
[3,] 0.640 0.80 1.00 0.800
[4,] 0.512 0.64 0.80 1.000

> 
> # Pinheiro and Bates, p. 237 
> cs1ARMA <- corARMA(0.4, form = ~ 1 | Subject, q = 1)
> cs1ARMA <- Initialize(cs1ARMA, data = Orthodont)
> corMatrix(cs1ARMA)
$M01
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M02
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M03
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M04
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M05
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M06
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M07
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M08
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M09
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M10
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M11
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M12
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M13
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M14
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M15
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$M16
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F01
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F02
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F03
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F04
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F05
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F06
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F07
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F08
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F09
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F10
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

$F11
          [,1]      [,2]      [,3]      [,4]
[1,] 1.0000000 0.3448276 0.0000000 0.0000000
[2,] 0.3448276 1.0000000 0.3448276 0.0000000
[3,] 0.0000000 0.3448276 1.0000000 0.3448276
[4,] 0.0000000 0.0000000 0.3448276 1.0000000

> 
> # Pinheiro and Bates, p. 238 
> spatDat <- data.frame(x = (0:4)/4, y = (0:4)/4)
> cs1Exp <- corExp(1, form = ~ x + y)
> cs1Exp <- Initialize(cs1Exp, spatDat)
> corMatrix(cs1Exp)
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 1.0000000 0.7021885 0.4930687 0.3462272 0.2431167
[2,] 0.7021885 1.0000000 0.7021885 0.4930687 0.3462272
[3,] 0.4930687 0.7021885 1.0000000 0.7021885 0.4930687
[4,] 0.3462272 0.4930687 0.7021885 1.0000000 0.7021885
[5,] 0.2431167 0.3462272 0.4930687 0.7021885 1.0000000
> 
> 
> 
> cleanEx()
> nameEx("corMatrix.pdMat")
> ### * corMatrix.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corMatrix.pdMat
> ### Title: Extract Correlation Matrix from a pdMat Object
> ### Aliases: corMatrix.pdBlocked corMatrix.pdCompSymm corMatrix.pdDiag
> ###   corMatrix.pdIdent corMatrix.pdMat corMatrix.pdSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdSymm(diag(1:4))
> corMatrix(pd1)
   V1 V2 V3 V4
V1  1  0  0  0
V2  0  1  0  0
V3  0  0  1  0
V4  0  0  0  1
attr(,"stdDev")
      V1       V2       V3       V4 
1.000000 1.414214 1.732051 2.000000 
> 
> 
> 
> cleanEx()
> nameEx("corMatrix.reStruct")
> ### * corMatrix.reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corMatrix.reStruct
> ### Title: Extract Correlation Matrix from Components of an reStruct Object
> ### Aliases: corMatrix.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(pdSymm(diag(3), ~age+Sex, data = Orthodont))
> corMatrix(rs1)
[[1]]
            (Intercept) age SexFemale
(Intercept)           1   0         0
age                   0   1         0
SexFemale             0   0         1
attr(,"stdDev")
(Intercept)         age   SexFemale 
          1           1           1 

> 
> 
> 
> cleanEx()
> nameEx("corNatural")
> ### * corNatural
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corNatural
> ### Title: General correlation in natural parameterization
> ### Aliases: corNatural print.corNatural
> ### Keywords: models
> 
> ### ** Examples
> 
> ## covariate is observation order and grouping factor is Subject
> cs1 <- corNatural(form = ~ 1 | Subject)
> 
> 
> 
> cleanEx()
> nameEx("corRatio")
> ### * corRatio
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corRatio
> ### Title: Rational Quadratic Correlation Structure
> ### Aliases: corRatio
> ### Keywords: models
> 
> ### ** Examples
> 
> sp1 <- corRatio(form = ~ x + y + z)
> 
> # example lme(..., corRatio ...)
> # Pinheiro and Bates, pp. 222-249
> fm1BW.lme <- lme(weight ~ Time * Diet, BodyWeight,
+                    random = ~ Time)
> # p. 223
> fm2BW.lme <- update(fm1BW.lme, weights = varPower())
> # p 246 
> fm3BW.lme <- update(fm2BW.lme,
+            correlation = corExp(form = ~ Time))
> # p. 249
> fm5BW.lme <- update(fm3BW.lme, correlation =
+                    corRatio(form = ~ Time))
> 
> # example gls(..., corRatio ...)
> # Pinheiro and Bates, pp. 261, 263
> fm1Wheat2 <- gls(yield ~ variety - 1, Wheat2)
> # p. 263 
> fm3Wheat2 <- update(fm1Wheat2, corr = 
+     corRatio(c(12.5, 0.2),
+        form = ~ latitude + longitude,
+              nugget = TRUE))
> 
> 
> 
> 
> cleanEx()
> nameEx("corSpatial")
> ### * corSpatial
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corSpatial
> ### Title: Spatial Correlation Structure
> ### Aliases: corSpatial
> ### Keywords: models
> 
> ### ** Examples
> 
> sp1 <- corSpatial(form = ~ x + y + z, type = "g", metric = "man")
> 
> 
> 
> cleanEx()
> nameEx("corSpher")
> ### * corSpher
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corSpher
> ### Title: Spherical Correlation Structure
> ### Aliases: corSpher
> ### Keywords: models
> 
> ### ** Examples
> 
> sp1 <- corSpher(form = ~ x + y)
> 
> # example lme(..., corSpher ...)
> # Pinheiro and Bates, pp. 222-249
> fm1BW.lme <- lme(weight ~ Time * Diet, BodyWeight,
+                    random = ~ Time)
> # p. 223
> fm2BW.lme <- update(fm1BW.lme, weights = varPower())
> # p 246 
> fm3BW.lme <- update(fm2BW.lme,
+            correlation = corExp(form = ~ Time))
> # p. 249
> fm6BW.lme <- update(fm3BW.lme,
+           correlation = corSpher(form = ~ Time))
> 
> # example gls(..., corSpher ...)
> # Pinheiro and Bates, pp. 261, 263
> fm1Wheat2 <- gls(yield ~ variety - 1, Wheat2)
> # p. 262 
> fm2Wheat2 <- update(fm1Wheat2, corr =
+    corSpher(c(28, 0.2),
+      form = ~ latitude + longitude, nugget = TRUE))
> 
> 
> 
> 
> cleanEx()
> nameEx("corSymm")
> ### * corSymm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: corSymm
> ### Title: General Correlation Structure
> ### Aliases: corSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> ## covariate is observation order and grouping factor is Subject
> cs1 <- corSymm(form = ~ 1 | Subject)
> 
> # Pinheiro and Bates, p. 225 
> cs1CompSymm <- corCompSymm(value = 0.3, form = ~ 1 | Subject)
> cs1CompSymm <- Initialize(cs1CompSymm, data = Orthodont)
> corMatrix(cs1CompSymm)
$M01
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M02
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M03
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M04
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M05
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M06
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M07
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M08
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M09
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M10
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M11
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M12
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M13
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M14
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M15
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$M16
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F01
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F02
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F03
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F04
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F05
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F06
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F07
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F08
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F09
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F10
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

$F11
     [,1] [,2] [,3] [,4]
[1,]  1.0  0.3  0.3  0.3
[2,]  0.3  1.0  0.3  0.3
[3,]  0.3  0.3  1.0  0.3
[4,]  0.3  0.3  0.3  1.0

> 
> # Pinheiro and Bates, p. 226
> cs1Symm <- corSymm(value =
+         c(0.2, 0.1, -0.1, 0, 0.2, 0),
+                    form = ~ 1 | Subject)
> cs1Symm <- Initialize(cs1Symm, data = Orthodont)
> corMatrix(cs1Symm)
$M01
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M02
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M03
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M04
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M05
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M06
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M07
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M08
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M09
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M10
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M11
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M12
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M13
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M14
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M15
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$M16
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F01
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F02
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F03
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F04
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F05
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F06
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F07
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F08
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F09
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F10
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

$F11
     [,1]         [,2]          [,3]          [,4]
[1,]  1.0 2.000000e-01  1.000000e-01 -1.000000e-01
[2,]  0.2 1.000000e+00  9.020562e-17  2.000000e-01
[3,]  0.1 9.020562e-17  1.000000e+00 -1.040834e-16
[4,] -0.1 2.000000e-01 -1.040834e-16  1.000000e+00

> 
> # example gls(..., corSpher ...)
> # Pinheiro and Bates, pp. 261, 263
> fm1Wheat2 <- gls(yield ~ variety - 1, Wheat2)
> # p. 262 
> fm2Wheat2 <- update(fm1Wheat2, corr =
+    corSpher(c(28, 0.2),
+      form = ~ latitude + longitude, nugget = TRUE))
> 
> # example gls(..., corSymm ... )
> # Pinheiro and Bates, p. 251
> fm1Orth.gls <- gls(distance ~ Sex * I(age - 11), Orthodont,
+                    correlation = corSymm(form = ~ 1 | Subject),
+                    weights = varIdent(form = ~ 1 | age))
> 
> 
> 
> 
> cleanEx()
> nameEx("ergoStool")
> ### * ergoStool
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ergoStool
> ### Title: Ergometrics experiment with stool types
> ### Aliases: ergoStool
> ### Keywords: datasets
> 
> ### ** Examples
> 
> fm1 <-
+    lme(effort ~ Type, data = ergoStool, random = ~ 1 | Subject)
> anova( fm1 )
            numDF denDF  F-value p-value
(Intercept)     1    24 455.0075  <.0001
Type            3    24  22.3556  <.0001
> 
> 
> 
> cleanEx()
> nameEx("fdHess")
> ### * fdHess
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fdHess
> ### Title: Finite difference Hessian
> ### Aliases: fdHess
> ### Keywords: models
> 
> ### ** Examples
> 
> (fdH <- fdHess(c(12.3, 2.34), function(x) x[1]*(1-exp(-0.4*x[2]))))
$mean
[1] 7.47602

$gradient
[1] 0.6078065 1.9295919

$Hessian
          [,1]       [,2]
[1,] 0.0000000  0.1568771
[2,] 0.1568771 -0.7718194

> stopifnot(length(fdH$ mean) == 1,
+           length(fdH$ gradient) == 2,
+           identical(dim(fdH$ Hessian), c(2L, 2L)))
> 
> 
> 
> cleanEx()
> nameEx("fitted.lmList")
> ### * fitted.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitted.lmList
> ### Title: Extract lmList Fitted Values
> ### Aliases: fitted.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> fitted(fm1)
  M01   M01   M01   M01   M02   M02   M02   M02   M03   M03   M03   M03   M04 
24.90 26.80 28.70 30.60 21.05 22.60 24.15 25.70 22.00 23.50 25.00 26.50 26.10 
  M04   M04   M04   M05   M05   M05   M05   M06   M06   M06   M06   M07   M07 
26.45 26.80 27.15 20.45 22.15 23.85 25.55 24.35 25.70 27.05 28.40 21.35 22.95 
  M07   M07   M08   M08   M08   M08   M09   M09   M09   M09   M10   M10   M10 
24.55 26.15 22.75 23.50 24.25 25.00 22.20 24.15 26.10 28.05 27.25 28.75 30.25 
  M10   M11   M11   M11   M11   M12   M12   M12   M12   M13   M13   M13   M13 
31.75 22.65 23.30 23.95 24.60 21.25 23.25 25.25 27.25 18.40 22.30 26.20 30.10 
  M14   M14   M14   M14   M15   M15   M15   M15   M16   M16   M16   M16   F01 
23.30 24.35 25.40 26.45 22.50 24.75 27.00 29.25 21.35 22.45 23.55 24.65 20.25 
  F01   F01   F01   F02   F02   F02   F02   F03   F03   F03   F03   F04   F04 
21.00 21.75 22.50 20.60 22.20 23.80 25.40 21.20 22.90 24.60 26.30 23.45 24.40 
  F04   F04   F05   F05   F05   F05   F06   F06   F06   F06   F07   F07   F07 
25.35 26.30 21.80 22.35 22.90 23.45 20.00 20.75 21.50 22.25 21.35 22.45 23.55 
  F07   F08   F08   F08   F08   F09   F09   F09   F09   F10   F10   F10   F10 
24.65 22.85 23.20 23.55 23.90 20.30 20.85 21.40 21.95 17.15 18.05 18.95 19.85 
  F11   F11   F11   F11 
24.35 25.70 27.05 28.40 
attr(,"label")
[1] "Fitted values (mm)"
> 
> 
> 
> cleanEx()
> nameEx("fitted.lme")
> ### * fitted.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitted.lme
> ### Title: Extract lme Fitted Values
> ### Aliases: fitted.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age + Sex, data = Orthodont, random = ~ 1)
> fitted(fm1, level = 0:1)
       fixed  Subject
1   22.98819 25.39237
2   24.30856 26.71274
3   25.62894 28.03311
4   26.94931 29.35348
5   22.98819 21.61052
6   24.30856 22.93089
7   25.62894 24.25126
8   26.94931 25.57163
9   22.98819 22.36689
10  24.30856 23.68726
11  25.62894 25.00763
12  26.94931 26.32800
13  22.98819 24.41990
14  24.30856 25.74027
15  25.62894 27.06064
16  26.94931 28.38101
17  22.98819 21.28636
18  24.30856 22.60673
19  25.62894 23.92710
20  26.94931 25.24747
21  22.98819 24.20379
22  24.30856 25.52416
23  25.62894 26.84453
24  26.94931 28.16490
25  22.98819 21.93468
26  24.30856 23.25505
27  25.62894 24.57542
28  26.94931 25.89579
29  22.98819 22.04273
30  24.30856 23.36310
31  25.62894 24.68347
32  26.94931 26.00384
33  22.98819 23.12326
34  24.30856 24.44363
35  25.62894 25.76400
36  26.94931 27.08437
37  22.98819 26.90511
38  24.30856 28.22548
39  25.62894 29.54585
40  26.94931 30.86622
41  22.98819 21.82663
42  24.30856 23.14700
43  25.62894 24.46737
44  26.94931 25.78774
45  22.98819 22.36689
46  24.30856 23.68726
47  25.62894 25.00763
48  26.94931 26.32800
49  22.98819 22.36689
50  24.30856 23.68726
51  25.62894 25.00763
52  26.94931 26.32800
53  22.98819 22.90715
54  24.30856 24.22753
55  25.62894 25.54790
56  26.94931 26.86827
57  22.98819 23.77158
58  24.30856 25.09195
59  25.62894 26.41232
60  26.94931 27.73269
61  22.98819 21.28636
62  24.30856 22.60673
63  25.62894 23.92710
64  26.94931 25.24747
65  20.66717 19.56700
66  21.98754 20.88737
67  23.30791 22.20774
68  24.62828 23.52811
69  20.66717 20.97168
70  21.98754 22.29205
71  23.30791 23.61243
72  24.62828 24.93280
73  20.66717 21.62000
74  21.98754 22.94037
75  23.30791 24.26074
76  24.62828 25.58111
77  20.66717 22.59248
78  21.98754 23.91285
79  23.30791 25.23322
80  24.62828 26.55359
81  20.66717 20.64753
82  21.98754 21.96790
83  23.30791 23.28827
84  24.62828 24.60864
85  20.66717 19.35089
86  21.98754 20.67126
87  23.30791 21.99163
88  24.62828 23.31200
89  20.66717 20.97168
90  21.98754 22.29205
91  23.30791 23.61243
92  24.62828 24.93280
93  20.66717 21.29584
94  21.98754 22.61621
95  23.30791 23.93658
96  24.62828 25.25695
97  20.66717 19.35089
98  21.98754 20.67126
99  23.30791 21.99163
100 24.62828 23.31200
101 20.66717 17.08178
102 21.98754 18.40215
103 23.30791 19.72252
104 24.62828 21.04289
105 20.66717 23.88911
106 21.98754 25.20948
107 23.30791 26.52985
108 24.62828 27.85022
> 
> 
> 
> cleanEx()
> nameEx("fixed.effects")
> ### * fixed.effects
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fixed.effects
> ### Title: Extract Fixed Effects
> ### Aliases: fixed.effects fixef
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("fixef.lmList")
> ### * fixef.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fixef.lmList
> ### Title: Extract lmList Fixed Effects
> ### Aliases: fixed.effects.lmList fixef.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> fixed.effects(fm1)
(Intercept)         age 
 16.7611111   0.6601852 
> 
> 
> 
> cleanEx()
> nameEx("formula.pdBlocked")
> ### * formula.pdBlocked
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formula.pdBlocked
> ### Title: Extract pdBlocked Formula
> ### Aliases: formula.pdBlocked
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdBlocked(list(~ age, ~ Sex - 1))
> formula(pd1)
[[1]]
~age

[[2]]
~Sex - 1

> formula(pd1, asList = TRUE)
[[1]]
~age

[[2]]
~Sex - 1

> 
> 
> 
> cleanEx()
> nameEx("formula.pdMat")
> ### * formula.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formula.pdMat
> ### Title: Extract pdMat Formula
> ### Aliases: formula.pdMat
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdSymm(~Sex*age)
> formula(pd1)
~Sex * age
> 
> 
> 
> cleanEx()
> nameEx("formula.reStruct")
> ### * formula.reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formula.reStruct
> ### Title: Extract reStruct Object Formula
> ### Aliases: formula.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(list(A = pdDiag(diag(2), ~age), B = ~1))
> formula(rs1)
$B
~1

$A
~age

> 
> 
> 
> cleanEx()
> nameEx("gapply")
> ### * gapply
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gapply
> ### Title: Apply a Function by Groups
> ### Aliases: gapply
> ### Keywords: data
> 
> ### ** Examples
> 
> ## Find number of non-missing "conc" observations for each Subject
> gapply( Phenobarb, FUN = function(x) sum(!is.na(x$conc)) )
42 28 30 56 46  5 55 32 43 29  3 11 45 22 40 47 31 14  7 41 33 44 23 57 34 18 
 2  1  2  1  1  3  1  3  1  1  3  1  3  2  2  1  1  4  3  3  2  3  3  2  2  4 
36 21 15 38 10  1 58 51  4  6 19  2 27 53 37 20 12  9 17 26  8 49 39 54 25 35 
 3  3  2  4  3  2  3  3  3  3  3  3  2  2  2  3  3  4  3  2  3  3  3  4  6  2 
52 13 16 59 48 24 50 
 3  2  3  3  5  3  4 
> 
> # Pinheiro and Bates, p. 127 
> table( gapply(Quinidine, "conc", function(x) sum(!is.na(x))) )

 1  2  3  4  5  6  7 10 11 
46 33 31  9  3  8  2  1  3 
> changeRecords <- gapply( Quinidine, FUN = function(frm)
+     any(is.na(frm[["conc"]]) & is.na(frm[["dose"]])) )
> 
> 
> 
> cleanEx()
> nameEx("getCovariate")
> ### * getCovariate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCovariate
> ### Title: Extract Covariate from an Object
> ### Aliases: getCovariate
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("getCovariate.corStruct")
> ### * getCovariate.corStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCovariate.corStruct
> ### Title: Extract corStruct Object Covariate
> ### Aliases: getCovariate.corStruct getCovariate.corSpatial
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corAR1(form = ~ 1 | Subject)
> getCovariate(cs1, data = Orthodont)
$M01
[1] 1 2 3 4

$M02
[1] 1 2 3 4

$M03
[1] 1 2 3 4

$M04
[1] 1 2 3 4

$M05
[1] 1 2 3 4

$M06
[1] 1 2 3 4

$M07
[1] 1 2 3 4

$M08
[1] 1 2 3 4

$M09
[1] 1 2 3 4

$M10
[1] 1 2 3 4

$M11
[1] 1 2 3 4

$M12
[1] 1 2 3 4

$M13
[1] 1 2 3 4

$M14
[1] 1 2 3 4

$M15
[1] 1 2 3 4

$M16
[1] 1 2 3 4

$F01
[1] 1 2 3 4

$F02
[1] 1 2 3 4

$F03
[1] 1 2 3 4

$F04
[1] 1 2 3 4

$F05
[1] 1 2 3 4

$F06
[1] 1 2 3 4

$F07
[1] 1 2 3 4

$F08
[1] 1 2 3 4

$F09
[1] 1 2 3 4

$F10
[1] 1 2 3 4

$F11
[1] 1 2 3 4

> 
> 
> 
> cleanEx()
> nameEx("getCovariate.data.frame")
> ### * getCovariate.data.frame
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCovariate.data.frame
> ### Title: Extract Data Frame Covariate
> ### Aliases: getCovariate.data.frame
> ### Keywords: models
> 
> ### ** Examples
> 
> getCovariate(Orthodont)
  [1]  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8
 [26] 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10
 [51] 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12
 [76] 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14
[101]  8 10 12 14  8 10 12 14
> 
> 
> 
> cleanEx()
> nameEx("getCovariate.varFunc")
> ### * getCovariate.varFunc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCovariate.varFunc
> ### Title: Extract varFunc Covariate
> ### Aliases: getCovariate.varFunc
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varPower(1.1, form = ~age)
> covariate(vf1) <- Orthodont[["age"]]
> getCovariate(vf1)
  [1]  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8
 [26] 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10
 [51] 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12
 [76] 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14  8 10 12 14
[101]  8 10 12 14  8 10 12 14
> 
> 
> 
> cleanEx()
> nameEx("getCovariateFormula")
> ### * getCovariateFormula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCovariateFormula
> ### Title: Extract Covariates Formula
> ### Aliases: getCovariateFormula
> ### Keywords: models
> 
> ### ** Examples
> 
> getCovariateFormula(y ~ x | g)
~x
<environment: 0x5627850f5db8>
> getCovariateFormula(y ~ x)
~x
<environment: 0x5627850efcd8>
> 
> 
> 
> cleanEx()
> nameEx("getData")
> ### * getData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getData
> ### Title: Extract Data from an Object
> ### Aliases: getData
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("getData.gls")
> ### * getData.gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getData.gls
> ### Title: Extract gls Object Data
> ### Aliases: getData.gls getData.gnls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), data = Ovary,
+            correlation = corAR1(form = ~ 1 | Mare))
> getData(fm1)
Grouped Data: follicles ~ Time | Mare
    Mare        Time follicles
1      1 -0.13636360        20
2      1 -0.09090910        15
3      1 -0.04545455        19
4      1  0.00000000        16
5      1  0.04545455        13
6      1  0.09090910        10
7      1  0.13636360        12
8      1  0.18181820        14
9      1  0.22727270        13
10     1  0.27272730        20
11     1  0.31818180        22
12     1  0.36363640        15
13     1  0.40909090        18
14     1  0.45454550        17
15     1  0.50000000        14
16     1  0.54545450        18
17     1  0.59090910        14
18     1  0.63636360        16
19     1  0.68181820        17
20     1  0.72727270        18
21     1  0.77272730        18
22     1  0.81818180        17
23     1  0.86363640        14
24     1  0.90909090        12
25     1  0.95454550        12
26     1  1.00000000        14
27     1  1.04545500        10
28     1  1.09090900        11
29     1  1.13636400        16
30     2 -0.15000000         6
31     2 -0.10000000         6
32     2 -0.05000000         8
33     2  0.00000000         7
34     2  0.05000000        16
35     2  0.10000000        10
36     2  0.15000000        13
37     2  0.20000000         9
38     2  0.25000000         7
39     2  0.30000000         6
40     2  0.35000000         8
41     2  0.40000000         8
42     2  0.45000000         6
43     2  0.50000000         8
44     2  0.55000000         7
45     2  0.60000000         9
46     2  0.65000000         6
47     2  0.70000000         4
48     2  0.75000000         5
49     2  0.80000000         8
50     2  0.85000000        11
51     2  0.90000000        13
52     2  0.95000000        10
53     2  1.00000000         6
54     2  1.05000000         7
55     2  1.10000000         6
56     2  1.15000000         5
57     3 -0.15789470        13
58     3 -0.10526320        11
59     3 -0.05263158        10
60     3  0.00000000         6
61     3  0.05263158         8
62     3  0.10526320         6
63     3  0.15789470         9
64     3  0.21052630         9
65     3  0.26315790        10
66     3  0.31578950         8
67     3  0.36842110        14
68     3  0.42105260        13
69     3  0.47368420        14
70     3  0.52631580        16
71     3  0.57894740        20
72     3  0.63157900        21
73     3  0.68421050        25
74     3  0.73684210        23
75     3  0.78947370        19
76     3  0.84210530        22
77     3  0.89473680        16
78     3  0.94736840        21
79     3  1.00000000        19
80     3  1.05263200        20
81     3  1.10526300        17
82     3  1.15789500        24
83     4 -0.13636360         9
84     4 -0.09090910         9
85     4 -0.04545455         7
86     4  0.00000000         6
87     4  0.04545455         7
88     4  0.09090910         6
89     4  0.13636360         1
90     4  0.18181820         1
91     4  0.22727270         1
92     4  0.27272730         5
93     4  0.31818180         6
94     4  0.36363640         3
95     4  0.40909090         5
96     4  0.45454550         3
97     4  0.50000000         6
98     4  0.54545450         8
99     4  0.59090910         6
100    4  0.63636360         5
101    4  0.68181820         6
102    4  0.72727270         8
103    4  0.77272730        11
104    4  0.81818180        14
105    4  0.86363640         8
106    4  0.90909090         9
107    4  0.95454550        10
108    4  1.00000000         7
109    4  1.04545500         7
110    4  1.09090900         6
111    4  1.13636400        11
112    5 -0.13636360        10
113    5 -0.09090910        12
114    5 -0.04545455        12
115    5  0.00000000        17
116    5  0.04545455         9
117    5  0.09090910        10
118    5  0.13636360         3
119    5  0.18181820        12
120    5  0.22727270        13
121    5  0.27272730         9
122    5  0.31818180         4
123    5  0.36363640         7
124    5  0.40909090         4
125    5  0.45454550        12
126    5  0.50000000        14
127    5  0.54545450        12
128    5  0.59090910        15
129    5  0.63636360        17
130    5  0.68181820        15
131    5  0.72727270        13
132    5  0.77272730        18
133    5  0.81818180        19
134    5  0.86363640        13
135    5  0.90909090         9
136    5  0.95454550        12
137    5  1.00000000         8
138    5  1.04545500        10
139    5  1.09090900         5
140    5  1.13636400        14
141    6 -0.13636360        16
142    6 -0.09090910        17
143    6 -0.04545455        13
144    6  0.00000000        17
145    6  0.04545455        15
146    6  0.09090910         9
147    6  0.13636360         8
148    6  0.18181820         5
149    6  0.22727270         9
150    6  0.27272730         8
151    6  0.31818180         8
152    6  0.36363640        13
153    6  0.40909090        14
154    6  0.45454550        13
155    6  0.50000000        14
156    6  0.54545450        14
157    6  0.59090910        11
158    6  0.63636360        17
159    6  0.68181820        21
160    6  0.72727270        21
161    6  0.77272730        21
162    6  0.81818180        20
163    6  0.86363640        17
164    6  0.90909090        18
165    6  0.95454550        22
166    6  1.00000000        10
167    6  1.04545500        11
168    6  1.09090900        11
169    6  1.13636400        12
170    7 -0.15000000        18
171    7 -0.10000000        13
172    7 -0.05000000        14
173    7  0.00000000        12
174    7  0.05000000        11
175    7  0.10000000         8
176    7  0.15000000         5
177    7  0.20000000         8
178    7  0.25000000        10
179    7  0.30000000        11
180    7  0.35000000        10
181    7  0.40000000        12
182    7  0.45000000        10
183    7  0.50000000         9
184    7  0.55000000        12
185    7  0.60000000        14
186    7  0.65000000        16
187    7  0.70000000        13
188    7  0.75000000        11
189    7  0.80000000        13
190    7  0.85000000        13
191    7  0.90000000        11
192    7  0.95000000        11
193    7  1.00000000         8
194    7  1.05000000        14
195    7  1.10000000         4
196    7  1.15000000         7
197    8 -0.12500000        13
198    8 -0.08333333         9
199    8 -0.04166667        15
200    8  0.00000000        15
201    8  0.04166667        12
202    8  0.08333333         8
203    8  0.12500000        10
204    8  0.16666670         6
205    8  0.20833330         9
206    8  0.25000000         8
207    8  0.29166670        10
208    8  0.33333330         6
209    8  0.37500000         8
210    8  0.41666670        13
211    8  0.45833330        12
212    8  0.50000000        12
213    8  0.54166670        15
214    8  0.58333330        21
215    8  0.62500000        25
216    8  0.66666670        21
217    8  0.70833330        21
218    8  0.75000000        24
219    8  0.79166670        20
220    8  0.83333330        20
221    8  0.87500000        18
222    8  0.91666670        20
223    8  0.95833330        20
224    8  1.00000000        19
225    8  1.04166700        12
226    8  1.08333300         7
227    8  1.12500000         8
228    9 -0.16666670        10
229    9 -0.11111110        14
230    9 -0.05555556        12
231    9  0.00000000        10
232    9  0.05555556         7
233    9  0.11111110        12
234    9  0.16666670        10
235    9  0.22222220         8
236    9  0.27777780        10
237    9  0.33333330        15
238    9  0.38888890        15
239    9  0.44444440        12
240    9  0.50000000        19
241    9  0.55555560        15
242    9  0.61111110        16
243    9  0.66666670        15
244    9  0.72222220        17
245    9  0.77777780        14
246    9  0.83333330        16
247    9  0.88888890        15
248    9  0.94444440        11
249    9  1.00000000        10
250    9  1.05555600         7
251    9  1.11111100         4
252    9  1.16666700         8
253   10 -0.13636360        11
254   10 -0.09090910        16
255   10 -0.04545455        15
256   10  0.00000000        12
257   10  0.04545455        11
258   10  0.09090910         6
259   10  0.13636360        11
260   10  0.18181820        12
261   10  0.22727270        11
262   10  0.27272730        16
263   10  0.31818180        15
264   10  0.36363640        11
265   10  0.40909090         7
266   10  0.45454550        14
267   10  0.50000000        20
268   10  0.54545450        22
269   10  0.59090910        23
270   10  0.63636360        21
271   10  0.68181820        21
272   10  0.72727270        23
273   10  0.77272730        22
274   10  0.81818180        22
275   10  0.86363640        17
276   10  0.90909090        17
277   10  0.95454550        17
278   10  1.00000000        17
279   10  1.04545500        14
280   10  1.09090900        12
281   10  1.13636400        11
282   11 -0.15000000         9
283   11 -0.10000000         8
284   11 -0.05000000         8
285   11  0.00000000         8
286   11  0.05000000         8
287   11  0.10000000         6
288   11  0.15000000         7
289   11  0.20000000         8
290   11  0.25000000        10
291   11  0.30000000        10
292   11  0.35000000        14
293   11  0.40000000        13
294   11  0.45000000         8
295   11  0.50000000         8
296   11  0.55000000         8
297   11  0.60000000         9
298   11  0.65000000        16
299   11  0.70000000        12
300   11  0.75000000        10
301   11  0.80000000        12
302   11  0.85000000        12
303   11  0.90000000         9
304   11  0.95000000         6
305   11  1.00000000         9
306   11  1.05000000         7
307   11  1.10000000         5
308   11  1.15000000         5
> 
> 
> 
> cleanEx()
> nameEx("getData.lmList")
> ### * getData.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getData.lmList
> ### Title: Extract lmList Object Data
> ### Aliases: getData.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> getData(fm1)
Grouped Data: distance ~ age | Subject
    distance age Subject    Sex
1       26.0   8     M01   Male
2       25.0  10     M01   Male
3       29.0  12     M01   Male
4       31.0  14     M01   Male
5       21.5   8     M02   Male
6       22.5  10     M02   Male
7       23.0  12     M02   Male
8       26.5  14     M02   Male
9       23.0   8     M03   Male
10      22.5  10     M03   Male
11      24.0  12     M03   Male
12      27.5  14     M03   Male
13      25.5   8     M04   Male
14      27.5  10     M04   Male
15      26.5  12     M04   Male
16      27.0  14     M04   Male
17      20.0   8     M05   Male
18      23.5  10     M05   Male
19      22.5  12     M05   Male
20      26.0  14     M05   Male
21      24.5   8     M06   Male
22      25.5  10     M06   Male
23      27.0  12     M06   Male
24      28.5  14     M06   Male
25      22.0   8     M07   Male
26      22.0  10     M07   Male
27      24.5  12     M07   Male
28      26.5  14     M07   Male
29      24.0   8     M08   Male
30      21.5  10     M08   Male
31      24.5  12     M08   Male
32      25.5  14     M08   Male
33      23.0   8     M09   Male
34      20.5  10     M09   Male
35      31.0  12     M09   Male
36      26.0  14     M09   Male
37      27.5   8     M10   Male
38      28.0  10     M10   Male
39      31.0  12     M10   Male
40      31.5  14     M10   Male
41      23.0   8     M11   Male
42      23.0  10     M11   Male
43      23.5  12     M11   Male
44      25.0  14     M11   Male
45      21.5   8     M12   Male
46      23.5  10     M12   Male
47      24.0  12     M12   Male
48      28.0  14     M12   Male
49      17.0   8     M13   Male
50      24.5  10     M13   Male
51      26.0  12     M13   Male
52      29.5  14     M13   Male
53      22.5   8     M14   Male
54      25.5  10     M14   Male
55      25.5  12     M14   Male
56      26.0  14     M14   Male
57      23.0   8     M15   Male
58      24.5  10     M15   Male
59      26.0  12     M15   Male
60      30.0  14     M15   Male
61      22.0   8     M16   Male
62      21.5  10     M16   Male
63      23.5  12     M16   Male
64      25.0  14     M16   Male
65      21.0   8     F01 Female
66      20.0  10     F01 Female
67      21.5  12     F01 Female
68      23.0  14     F01 Female
69      21.0   8     F02 Female
70      21.5  10     F02 Female
71      24.0  12     F02 Female
72      25.5  14     F02 Female
73      20.5   8     F03 Female
74      24.0  10     F03 Female
75      24.5  12     F03 Female
76      26.0  14     F03 Female
77      23.5   8     F04 Female
78      24.5  10     F04 Female
79      25.0  12     F04 Female
80      26.5  14     F04 Female
81      21.5   8     F05 Female
82      23.0  10     F05 Female
83      22.5  12     F05 Female
84      23.5  14     F05 Female
85      20.0   8     F06 Female
86      21.0  10     F06 Female
87      21.0  12     F06 Female
88      22.5  14     F06 Female
89      21.5   8     F07 Female
90      22.5  10     F07 Female
91      23.0  12     F07 Female
92      25.0  14     F07 Female
93      23.0   8     F08 Female
94      23.0  10     F08 Female
95      23.5  12     F08 Female
96      24.0  14     F08 Female
97      20.0   8     F09 Female
98      21.0  10     F09 Female
99      22.0  12     F09 Female
100     21.5  14     F09 Female
101     16.5   8     F10 Female
102     19.0  10     F10 Female
103     19.0  12     F10 Female
104     19.5  14     F10 Female
105     24.5   8     F11 Female
106     25.0  10     F11 Female
107     28.0  12     F11 Female
108     28.0  14     F11 Female
> 
> 
> 
> cleanEx()
> nameEx("getData.lme")
> ### * getData.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getData.lme
> ### Title: Extract lme Object Data
> ### Aliases: getData.lme getData.nlme getData.nls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), data = Ovary,
+            random = ~ sin(2*pi*Time))
> getData(fm1)
Grouped Data: follicles ~ Time | Mare
    Mare        Time follicles
1      1 -0.13636360        20
2      1 -0.09090910        15
3      1 -0.04545455        19
4      1  0.00000000        16
5      1  0.04545455        13
6      1  0.09090910        10
7      1  0.13636360        12
8      1  0.18181820        14
9      1  0.22727270        13
10     1  0.27272730        20
11     1  0.31818180        22
12     1  0.36363640        15
13     1  0.40909090        18
14     1  0.45454550        17
15     1  0.50000000        14
16     1  0.54545450        18
17     1  0.59090910        14
18     1  0.63636360        16
19     1  0.68181820        17
20     1  0.72727270        18
21     1  0.77272730        18
22     1  0.81818180        17
23     1  0.86363640        14
24     1  0.90909090        12
25     1  0.95454550        12
26     1  1.00000000        14
27     1  1.04545500        10
28     1  1.09090900        11
29     1  1.13636400        16
30     2 -0.15000000         6
31     2 -0.10000000         6
32     2 -0.05000000         8
33     2  0.00000000         7
34     2  0.05000000        16
35     2  0.10000000        10
36     2  0.15000000        13
37     2  0.20000000         9
38     2  0.25000000         7
39     2  0.30000000         6
40     2  0.35000000         8
41     2  0.40000000         8
42     2  0.45000000         6
43     2  0.50000000         8
44     2  0.55000000         7
45     2  0.60000000         9
46     2  0.65000000         6
47     2  0.70000000         4
48     2  0.75000000         5
49     2  0.80000000         8
50     2  0.85000000        11
51     2  0.90000000        13
52     2  0.95000000        10
53     2  1.00000000         6
54     2  1.05000000         7
55     2  1.10000000         6
56     2  1.15000000         5
57     3 -0.15789470        13
58     3 -0.10526320        11
59     3 -0.05263158        10
60     3  0.00000000         6
61     3  0.05263158         8
62     3  0.10526320         6
63     3  0.15789470         9
64     3  0.21052630         9
65     3  0.26315790        10
66     3  0.31578950         8
67     3  0.36842110        14
68     3  0.42105260        13
69     3  0.47368420        14
70     3  0.52631580        16
71     3  0.57894740        20
72     3  0.63157900        21
73     3  0.68421050        25
74     3  0.73684210        23
75     3  0.78947370        19
76     3  0.84210530        22
77     3  0.89473680        16
78     3  0.94736840        21
79     3  1.00000000        19
80     3  1.05263200        20
81     3  1.10526300        17
82     3  1.15789500        24
83     4 -0.13636360         9
84     4 -0.09090910         9
85     4 -0.04545455         7
86     4  0.00000000         6
87     4  0.04545455         7
88     4  0.09090910         6
89     4  0.13636360         1
90     4  0.18181820         1
91     4  0.22727270         1
92     4  0.27272730         5
93     4  0.31818180         6
94     4  0.36363640         3
95     4  0.40909090         5
96     4  0.45454550         3
97     4  0.50000000         6
98     4  0.54545450         8
99     4  0.59090910         6
100    4  0.63636360         5
101    4  0.68181820         6
102    4  0.72727270         8
103    4  0.77272730        11
104    4  0.81818180        14
105    4  0.86363640         8
106    4  0.90909090         9
107    4  0.95454550        10
108    4  1.00000000         7
109    4  1.04545500         7
110    4  1.09090900         6
111    4  1.13636400        11
112    5 -0.13636360        10
113    5 -0.09090910        12
114    5 -0.04545455        12
115    5  0.00000000        17
116    5  0.04545455         9
117    5  0.09090910        10
118    5  0.13636360         3
119    5  0.18181820        12
120    5  0.22727270        13
121    5  0.27272730         9
122    5  0.31818180         4
123    5  0.36363640         7
124    5  0.40909090         4
125    5  0.45454550        12
126    5  0.50000000        14
127    5  0.54545450        12
128    5  0.59090910        15
129    5  0.63636360        17
130    5  0.68181820        15
131    5  0.72727270        13
132    5  0.77272730        18
133    5  0.81818180        19
134    5  0.86363640        13
135    5  0.90909090         9
136    5  0.95454550        12
137    5  1.00000000         8
138    5  1.04545500        10
139    5  1.09090900         5
140    5  1.13636400        14
141    6 -0.13636360        16
142    6 -0.09090910        17
143    6 -0.04545455        13
144    6  0.00000000        17
145    6  0.04545455        15
146    6  0.09090910         9
147    6  0.13636360         8
148    6  0.18181820         5
149    6  0.22727270         9
150    6  0.27272730         8
151    6  0.31818180         8
152    6  0.36363640        13
153    6  0.40909090        14
154    6  0.45454550        13
155    6  0.50000000        14
156    6  0.54545450        14
157    6  0.59090910        11
158    6  0.63636360        17
159    6  0.68181820        21
160    6  0.72727270        21
161    6  0.77272730        21
162    6  0.81818180        20
163    6  0.86363640        17
164    6  0.90909090        18
165    6  0.95454550        22
166    6  1.00000000        10
167    6  1.04545500        11
168    6  1.09090900        11
169    6  1.13636400        12
170    7 -0.15000000        18
171    7 -0.10000000        13
172    7 -0.05000000        14
173    7  0.00000000        12
174    7  0.05000000        11
175    7  0.10000000         8
176    7  0.15000000         5
177    7  0.20000000         8
178    7  0.25000000        10
179    7  0.30000000        11
180    7  0.35000000        10
181    7  0.40000000        12
182    7  0.45000000        10
183    7  0.50000000         9
184    7  0.55000000        12
185    7  0.60000000        14
186    7  0.65000000        16
187    7  0.70000000        13
188    7  0.75000000        11
189    7  0.80000000        13
190    7  0.85000000        13
191    7  0.90000000        11
192    7  0.95000000        11
193    7  1.00000000         8
194    7  1.05000000        14
195    7  1.10000000         4
196    7  1.15000000         7
197    8 -0.12500000        13
198    8 -0.08333333         9
199    8 -0.04166667        15
200    8  0.00000000        15
201    8  0.04166667        12
202    8  0.08333333         8
203    8  0.12500000        10
204    8  0.16666670         6
205    8  0.20833330         9
206    8  0.25000000         8
207    8  0.29166670        10
208    8  0.33333330         6
209    8  0.37500000         8
210    8  0.41666670        13
211    8  0.45833330        12
212    8  0.50000000        12
213    8  0.54166670        15
214    8  0.58333330        21
215    8  0.62500000        25
216    8  0.66666670        21
217    8  0.70833330        21
218    8  0.75000000        24
219    8  0.79166670        20
220    8  0.83333330        20
221    8  0.87500000        18
222    8  0.91666670        20
223    8  0.95833330        20
224    8  1.00000000        19
225    8  1.04166700        12
226    8  1.08333300         7
227    8  1.12500000         8
228    9 -0.16666670        10
229    9 -0.11111110        14
230    9 -0.05555556        12
231    9  0.00000000        10
232    9  0.05555556         7
233    9  0.11111110        12
234    9  0.16666670        10
235    9  0.22222220         8
236    9  0.27777780        10
237    9  0.33333330        15
238    9  0.38888890        15
239    9  0.44444440        12
240    9  0.50000000        19
241    9  0.55555560        15
242    9  0.61111110        16
243    9  0.66666670        15
244    9  0.72222220        17
245    9  0.77777780        14
246    9  0.83333330        16
247    9  0.88888890        15
248    9  0.94444440        11
249    9  1.00000000        10
250    9  1.05555600         7
251    9  1.11111100         4
252    9  1.16666700         8
253   10 -0.13636360        11
254   10 -0.09090910        16
255   10 -0.04545455        15
256   10  0.00000000        12
257   10  0.04545455        11
258   10  0.09090910         6
259   10  0.13636360        11
260   10  0.18181820        12
261   10  0.22727270        11
262   10  0.27272730        16
263   10  0.31818180        15
264   10  0.36363640        11
265   10  0.40909090         7
266   10  0.45454550        14
267   10  0.50000000        20
268   10  0.54545450        22
269   10  0.59090910        23
270   10  0.63636360        21
271   10  0.68181820        21
272   10  0.72727270        23
273   10  0.77272730        22
274   10  0.81818180        22
275   10  0.86363640        17
276   10  0.90909090        17
277   10  0.95454550        17
278   10  1.00000000        17
279   10  1.04545500        14
280   10  1.09090900        12
281   10  1.13636400        11
282   11 -0.15000000         9
283   11 -0.10000000         8
284   11 -0.05000000         8
285   11  0.00000000         8
286   11  0.05000000         8
287   11  0.10000000         6
288   11  0.15000000         7
289   11  0.20000000         8
290   11  0.25000000        10
291   11  0.30000000        10
292   11  0.35000000        14
293   11  0.40000000        13
294   11  0.45000000         8
295   11  0.50000000         8
296   11  0.55000000         8
297   11  0.60000000         9
298   11  0.65000000        16
299   11  0.70000000        12
300   11  0.75000000        10
301   11  0.80000000        12
302   11  0.85000000        12
303   11  0.90000000         9
304   11  0.95000000         6
305   11  1.00000000         9
306   11  1.05000000         7
307   11  1.10000000         5
308   11  1.15000000         5
> 
> 
> 
> cleanEx()
> nameEx("getGroups")
> ### * getGroups
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getGroups
> ### Title: Extract Grouping Factors from an Object
> ### Aliases: getGroups
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("getGroups.corStruct")
> ### * getGroups.corStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getGroups.corStruct
> ### Title: Extract corStruct Groups
> ### Aliases: getGroups.corStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corAR1(form = ~ 1 | Subject)
> getGroups(cs1, data = Orthodont)
  [1] M01 M01 M01 M01 M02 M02 M02 M02 M03 M03 M03 M03 M04 M04 M04 M04 M05 M05
 [19] M05 M05 M06 M06 M06 M06 M07 M07 M07 M07 M08 M08 M08 M08 M09 M09 M09 M09
 [37] M10 M10 M10 M10 M11 M11 M11 M11 M12 M12 M12 M12 M13 M13 M13 M13 M14 M14
 [55] M14 M14 M15 M15 M15 M15 M16 M16 M16 M16 F01 F01 F01 F01 F02 F02 F02 F02
 [73] F03 F03 F03 F03 F04 F04 F04 F04 F05 F05 F05 F05 F06 F06 F06 F06 F07 F07
 [91] F07 F07 F08 F08 F08 F08 F09 F09 F09 F09 F10 F10 F10 F10 F11 F11 F11 F11
27 Levels: M01 < M02 < M03 < M04 < M05 < M06 < M07 < M08 < M09 < ... < F11
> 
> 
> 
> cleanEx()
> nameEx("getGroups.data.frame")
> ### * getGroups.data.frame
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getGroups.data.frame
> ### Title: Extract Groups from a Data Frame
> ### Aliases: getGroups.data.frame
> ### Keywords: models
> 
> ### ** Examples
> 
> getGroups(Pixel)
    Dog Side
1     1    R
2     1    R
3     1    R
4     1    R
5     1    R
6     1    R
7     1    R
8     2    R
9     2    R
10    2    R
11    2    R
12    2    R
13    2    R
14    2    R
15    3    R
16    3    R
17    3    R
18    3    R
19    3    R
20    3    R
21    3    R
22    4    R
23    4    R
24    4    R
25    4    R
26    4    R
27    4    R
28    4    R
29    5    R
30    5    R
31    5    R
32    5    R
33    5    R
34    6    R
35    6    R
36    6    R
37    6    R
38    6    R
39    7    R
40    7    R
41    7    R
42    7    R
43    8    R
44    8    R
45    8    R
46    8    R
47    9    R
48    9    R
49   10    R
50   10    R
51   10    R
52    1    L
53    1    L
54    1    L
55    1    L
56    1    L
57    1    L
58    1    L
59    2    L
60    2    L
61    2    L
62    2    L
63    2    L
64    2    L
65    2    L
66    3    L
67    3    L
68    3    L
69    3    L
70    3    L
71    3    L
72    3    L
73    4    L
74    4    L
75    4    L
76    4    L
77    4    L
78    4    L
79    4    L
80    5    L
81    5    L
82    5    L
83    5    L
84    5    L
85    6    L
86    6    L
87    6    L
88    6    L
89    6    L
90    7    L
91    7    L
92    7    L
93    7    L
94    8    L
95    8    L
96    8    L
97    8    L
98    9    L
99    9    L
100  10    L
101  10    L
102  10    L
> getGroups(Pixel, level = 2)
  [1] 1/R  1/R  1/R  1/R  1/R  1/R  1/R  2/R  2/R  2/R  2/R  2/R  2/R  2/R  3/R 
 [16] 3/R  3/R  3/R  3/R  3/R  3/R  4/R  4/R  4/R  4/R  4/R  4/R  4/R  5/R  5/R 
 [31] 5/R  5/R  5/R  6/R  6/R  6/R  6/R  6/R  7/R  7/R  7/R  7/R  8/R  8/R  8/R 
 [46] 8/R  9/R  9/R  10/R 10/R 10/R 1/L  1/L  1/L  1/L  1/L  1/L  1/L  2/L  2/L 
 [61] 2/L  2/L  2/L  2/L  2/L  3/L  3/L  3/L  3/L  3/L  3/L  3/L  4/L  4/L  4/L 
 [76] 4/L  4/L  4/L  4/L  5/L  5/L  5/L  5/L  5/L  6/L  6/L  6/L  6/L  6/L  7/L 
 [91] 7/L  7/L  7/L  8/L  8/L  8/L  8/L  9/L  9/L  10/L 10/L 10/L
20 Levels: 1/R < 2/R < 3/R < 4/R < 5/R < 6/R < 7/R < 8/R < 9/R < ... < 10/L
> 
> 
> 
> cleanEx()
> nameEx("getGroups.gls")
> ### * getGroups.gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getGroups.gls
> ### Title: Extract gls Object Groups
> ### Aliases: getGroups.gls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
+            correlation = corAR1(form = ~ 1 | Mare))
> getGroups(fm1)
  [1] 1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 
 [26] 1  1  1  1  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2 
 [51] 2  2  2  2  2  2  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 
 [76] 3  3  3  3  3  3  3  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4  4 
[101] 4  4  4  4  4  4  4  4  4  4  4  5  5  5  5  5  5  5  5  5  5  5  5  5  5 
[126] 5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  6  6  6  6  6  6  6  6  6  6 
[151] 6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  7  7  7  7  7  7 
[176] 7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  8  8  8  8 
[201] 8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8  8 
[226] 8  8  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9 
[251] 9  9  10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
[276] 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11
[301] 11 11 11 11 11 11 11 11
Levels: 4 < 2 < 11 < 7 < 5 < 9 < 1 < 6 < 10 < 3 < 8
> 
> 
> 
> cleanEx()
> nameEx("getGroups.lmList")
> ### * getGroups.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getGroups.lmList
> ### Title: Extract lmList Object Groups
> ### Aliases: getGroups.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> getGroups(fm1)
  [1] M01 M01 M01 M01 M02 M02 M02 M02 M03 M03 M03 M03 M04 M04 M04 M04 M05 M05
 [19] M05 M05 M06 M06 M06 M06 M07 M07 M07 M07 M08 M08 M08 M08 M09 M09 M09 M09
 [37] M10 M10 M10 M10 M11 M11 M11 M11 M12 M12 M12 M12 M13 M13 M13 M13 M14 M14
 [55] M14 M14 M15 M15 M15 M15 M16 M16 M16 M16 F01 F01 F01 F01 F02 F02 F02 F02
 [73] F03 F03 F03 F03 F04 F04 F04 F04 F05 F05 F05 F05 F06 F06 F06 F06 F07 F07
 [91] F07 F07 F08 F08 F08 F08 F09 F09 F09 F09 F10 F10 F10 F10 F11 F11 F11 F11
27 Levels: M16 < M05 < M02 < M11 < M07 < M08 < M03 < M12 < M13 < ... < F11
> 
> 
> 
> cleanEx()
> nameEx("getGroups.lme")
> ### * getGroups.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getGroups.lme
> ### Title: Extract lme Object Groups
> ### Aliases: getGroups.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(pixel ~ day + day^2, Pixel,
+   random = list(Dog = ~day, Side = ~1))
> getGroups(fm1, level = 1:2)
    Dog Side
1     1  1/R
2     1  1/R
3     1  1/R
4     1  1/R
5     1  1/R
6     1  1/R
7     1  1/R
8     2  2/R
9     2  2/R
10    2  2/R
11    2  2/R
12    2  2/R
13    2  2/R
14    2  2/R
15    3  3/R
16    3  3/R
17    3  3/R
18    3  3/R
19    3  3/R
20    3  3/R
21    3  3/R
22    4  4/R
23    4  4/R
24    4  4/R
25    4  4/R
26    4  4/R
27    4  4/R
28    4  4/R
29    5  5/R
30    5  5/R
31    5  5/R
32    5  5/R
33    5  5/R
34    6  6/R
35    6  6/R
36    6  6/R
37    6  6/R
38    6  6/R
39    7  7/R
40    7  7/R
41    7  7/R
42    7  7/R
43    8  8/R
44    8  8/R
45    8  8/R
46    8  8/R
47    9  9/R
48    9  9/R
49   10 10/R
50   10 10/R
51   10 10/R
52    1  1/L
53    1  1/L
54    1  1/L
55    1  1/L
56    1  1/L
57    1  1/L
58    1  1/L
59    2  2/L
60    2  2/L
61    2  2/L
62    2  2/L
63    2  2/L
64    2  2/L
65    2  2/L
66    3  3/L
67    3  3/L
68    3  3/L
69    3  3/L
70    3  3/L
71    3  3/L
72    3  3/L
73    4  4/L
74    4  4/L
75    4  4/L
76    4  4/L
77    4  4/L
78    4  4/L
79    4  4/L
80    5  5/L
81    5  5/L
82    5  5/L
83    5  5/L
84    5  5/L
85    6  6/L
86    6  6/L
87    6  6/L
88    6  6/L
89    6  6/L
90    7  7/L
91    7  7/L
92    7  7/L
93    7  7/L
94    8  8/L
95    8  8/L
96    8  8/L
97    8  8/L
98    9  9/L
99    9  9/L
100  10 10/L
101  10 10/L
102  10 10/L
> 
> 
> 
> cleanEx()
> nameEx("getGroups.varFunc")
> ### * getGroups.varFunc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getGroups.varFunc
> ### Title: Extract varFunc Groups
> ### Aliases: getGroups.varFunc
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varPower(form = ~ age | Sex)
> vf1 <- Initialize(vf1, Orthodont)
> getGroups(vf1)
  [1] "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"  
  [9] "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"  
 [17] "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"  
 [25] "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"  
 [33] "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"  
 [41] "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"  
 [49] "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"  
 [57] "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"   "Male"  
 [65] "Female" "Female" "Female" "Female" "Female" "Female" "Female" "Female"
 [73] "Female" "Female" "Female" "Female" "Female" "Female" "Female" "Female"
 [81] "Female" "Female" "Female" "Female" "Female" "Female" "Female" "Female"
 [89] "Female" "Female" "Female" "Female" "Female" "Female" "Female" "Female"
 [97] "Female" "Female" "Female" "Female" "Female" "Female" "Female" "Female"
[105] "Female" "Female" "Female" "Female"
> 
> 
> 
> cleanEx()
> nameEx("getGroupsFormula")
> ### * getGroupsFormula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getGroupsFormula
> ### Title: Extract Grouping Formula
> ### Aliases: getGroupsFormula getGroupsFormula.default getGroupsFormula.gls
> ###   getGroupsFormula.lmList getGroupsFormula.lme
> ###   getGroupsFormula.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> getGroupsFormula(y ~ x | g1/g2)
~g1/g2
<environment: 0x562784d33338>
> 
> 
> 
> cleanEx()
> nameEx("getResponse")
> ### * getResponse
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getResponse
> ### Title: Extract Response Variable from an Object
> ### Aliases: getResponse getResponse.data.frame
> ### Keywords: models
> 
> ### ** Examples
> 
> getResponse(Orthodont)
  [1] 26.0 25.0 29.0 31.0 21.5 22.5 23.0 26.5 23.0 22.5 24.0 27.5 25.5 27.5 26.5
 [16] 27.0 20.0 23.5 22.5 26.0 24.5 25.5 27.0 28.5 22.0 22.0 24.5 26.5 24.0 21.5
 [31] 24.5 25.5 23.0 20.5 31.0 26.0 27.5 28.0 31.0 31.5 23.0 23.0 23.5 25.0 21.5
 [46] 23.5 24.0 28.0 17.0 24.5 26.0 29.5 22.5 25.5 25.5 26.0 23.0 24.5 26.0 30.0
 [61] 22.0 21.5 23.5 25.0 21.0 20.0 21.5 23.0 21.0 21.5 24.0 25.5 20.5 24.0 24.5
 [76] 26.0 23.5 24.5 25.0 26.5 21.5 23.0 22.5 23.5 20.0 21.0 21.0 22.5 21.5 22.5
 [91] 23.0 25.0 23.0 23.0 23.5 24.0 20.0 21.0 22.0 21.5 16.5 19.0 19.0 19.5 24.5
[106] 25.0 28.0 28.0
> 
> 
> 
> cleanEx()
> nameEx("getResponseFormula")
> ### * getResponseFormula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getResponseFormula
> ### Title: Extract Formula Specifying Response Variable
> ### Aliases: getResponseFormula
> ### Keywords: models
> 
> ### ** Examples
> 
> getResponseFormula(y ~ x | g)
~y
<environment: 0x562784cd9478>
> 
> 
> 
> cleanEx()
> nameEx("getVarCov")
> ### * getVarCov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getVarCov
> ### Title: Extract variance-covariance matrix
> ### Aliases: getVarCov getVarCov.lme getVarCov.gls print.VarCov
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, data = Orthodont, subset = Sex == "Female")
> getVarCov(fm1)
Random effects variance covariance matrix
            (Intercept)       age
(Intercept)     3.55020 -0.107490
age            -0.10749  0.025898
  Standard Deviations: 1.8842 0.16093 
> getVarCov(fm1, individual = "F01", type = "marginal")
Subject F01 
Marginal variance covariance matrix
       1      2      3      4
1 3.9344 3.6872 3.8866 4.0860
2 3.6872 4.4368 4.2931 4.5961
3 3.8866 4.2931 5.1463 5.1063
4 4.0860 4.5961 5.1063 6.0630
  Standard Deviations: 1.9835 2.1064 2.2685 2.4623 
> getVarCov(fm1, type = "conditional")
Subject F01 
Conditional variance covariance matrix
        1       2       3       4
1 0.44659 0.00000 0.00000 0.00000
2 0.00000 0.44659 0.00000 0.00000
3 0.00000 0.00000 0.44659 0.00000
4 0.00000 0.00000 0.00000 0.44659
  Standard Deviations: 0.66827 0.66827 0.66827 0.66827 
> fm2 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
+            correlation = corAR1(form = ~ 1 | Mare))
> getVarCov(fm2)
Marginal variance covariance matrix
            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]
 [1,] 21.3090000 16.050000 12.089000  9.105600  6.858400  5.165800  3.890900
 [2,] 16.0500000 21.309000 16.050000 12.089000  9.105600  6.858400  5.165800
 [3,] 12.0890000 16.050000 21.309000 16.050000 12.089000  9.105600  6.858400
 [4,]  9.1056000 12.089000 16.050000 21.309000 16.050000 12.089000  9.105600
 [5,]  6.8584000  9.105600 12.089000 16.050000 21.309000 16.050000 12.089000
 [6,]  5.1658000  6.858400  9.105600 12.089000 16.050000 21.309000 16.050000
 [7,]  3.8909000  5.165800  6.858400  9.105600 12.089000 16.050000 21.309000
 [8,]  2.9307000  3.890900  5.165800  6.858400  9.105600 12.089000 16.050000
 [9,]  2.2074000  2.930700  3.890900  5.165800  6.858400  9.105600 12.089000
[10,]  1.6626000  2.207400  2.930700  3.890900  5.165800  6.858400  9.105600
[11,]  1.2523000  1.662600  2.207400  2.930700  3.890900  5.165800  6.858400
[12,]  0.9432500  1.252300  1.662600  2.207400  2.930700  3.890900  5.165800
[13,]  0.7104600  0.943250  1.252300  1.662600  2.207400  2.930700  3.890900
[14,]  0.5351300  0.710460  0.943250  1.252300  1.662600  2.207400  2.930700
[15,]  0.4030600  0.535130  0.710460  0.943250  1.252300  1.662600  2.207400
[16,]  0.3035900  0.403060  0.535130  0.710460  0.943250  1.252300  1.662600
[17,]  0.2286700  0.303590  0.403060  0.535130  0.710460  0.943250  1.252300
[18,]  0.1722300  0.228670  0.303590  0.403060  0.535130  0.710460  0.943250
[19,]  0.1297300  0.172230  0.228670  0.303590  0.403060  0.535130  0.710460
[20,]  0.0977120  0.129730  0.172230  0.228670  0.303590  0.403060  0.535130
[21,]  0.0735970  0.097712  0.129730  0.172230  0.228670  0.303590  0.403060
[22,]  0.0554340  0.073597  0.097712  0.129730  0.172230  0.228670  0.303590
[23,]  0.0417530  0.055434  0.073597  0.097712  0.129730  0.172230  0.228670
[24,]  0.0314490  0.041753  0.055434  0.073597  0.097712  0.129730  0.172230
[25,]  0.0236880  0.031449  0.041753  0.055434  0.073597  0.097712  0.129730
[26,]  0.0178420  0.023688  0.031449  0.041753  0.055434  0.073597  0.097712
[27,]  0.0134380  0.017842  0.023688  0.031449  0.041753  0.055434  0.073597
[28,]  0.0101220  0.013438  0.017842  0.023688  0.031449  0.041753  0.055434
[29,]  0.0076239  0.010122  0.013438  0.017842  0.023688  0.031449  0.041753
           [,8]      [,9]     [,10]    [,11]    [,12]    [,13]    [,14]
 [1,]  2.930700  2.207400  1.662600  1.25230  0.94325  0.71046  0.53513
 [2,]  3.890900  2.930700  2.207400  1.66260  1.25230  0.94325  0.71046
 [3,]  5.165800  3.890900  2.930700  2.20740  1.66260  1.25230  0.94325
 [4,]  6.858400  5.165800  3.890900  2.93070  2.20740  1.66260  1.25230
 [5,]  9.105600  6.858400  5.165800  3.89090  2.93070  2.20740  1.66260
 [6,] 12.089000  9.105600  6.858400  5.16580  3.89090  2.93070  2.20740
 [7,] 16.050000 12.089000  9.105600  6.85840  5.16580  3.89090  2.93070
 [8,] 21.309000 16.050000 12.089000  9.10560  6.85840  5.16580  3.89090
 [9,] 16.050000 21.309000 16.050000 12.08900  9.10560  6.85840  5.16580
[10,] 12.089000 16.050000 21.309000 16.05000 12.08900  9.10560  6.85840
[11,]  9.105600 12.089000 16.050000 21.30900 16.05000 12.08900  9.10560
[12,]  6.858400  9.105600 12.089000 16.05000 21.30900 16.05000 12.08900
[13,]  5.165800  6.858400  9.105600 12.08900 16.05000 21.30900 16.05000
[14,]  3.890900  5.165800  6.858400  9.10560 12.08900 16.05000 21.30900
[15,]  2.930700  3.890900  5.165800  6.85840  9.10560 12.08900 16.05000
[16,]  2.207400  2.930700  3.890900  5.16580  6.85840  9.10560 12.08900
[17,]  1.662600  2.207400  2.930700  3.89090  5.16580  6.85840  9.10560
[18,]  1.252300  1.662600  2.207400  2.93070  3.89090  5.16580  6.85840
[19,]  0.943250  1.252300  1.662600  2.20740  2.93070  3.89090  5.16580
[20,]  0.710460  0.943250  1.252300  1.66260  2.20740  2.93070  3.89090
[21,]  0.535130  0.710460  0.943250  1.25230  1.66260  2.20740  2.93070
[22,]  0.403060  0.535130  0.710460  0.94325  1.25230  1.66260  2.20740
[23,]  0.303590  0.403060  0.535130  0.71046  0.94325  1.25230  1.66260
[24,]  0.228670  0.303590  0.403060  0.53513  0.71046  0.94325  1.25230
[25,]  0.172230  0.228670  0.303590  0.40306  0.53513  0.71046  0.94325
[26,]  0.129730  0.172230  0.228670  0.30359  0.40306  0.53513  0.71046
[27,]  0.097712  0.129730  0.172230  0.22867  0.30359  0.40306  0.53513
[28,]  0.073597  0.097712  0.129730  0.17223  0.22867  0.30359  0.40306
[29,]  0.055434  0.073597  0.097712  0.12973  0.17223  0.22867  0.30359
         [,15]    [,16]    [,17]    [,18]    [,19]     [,20]     [,21]
 [1,]  0.40306  0.30359  0.22867  0.17223  0.12973  0.097712  0.073597
 [2,]  0.53513  0.40306  0.30359  0.22867  0.17223  0.129730  0.097712
 [3,]  0.71046  0.53513  0.40306  0.30359  0.22867  0.172230  0.129730
 [4,]  0.94325  0.71046  0.53513  0.40306  0.30359  0.228670  0.172230
 [5,]  1.25230  0.94325  0.71046  0.53513  0.40306  0.303590  0.228670
 [6,]  1.66260  1.25230  0.94325  0.71046  0.53513  0.403060  0.303590
 [7,]  2.20740  1.66260  1.25230  0.94325  0.71046  0.535130  0.403060
 [8,]  2.93070  2.20740  1.66260  1.25230  0.94325  0.710460  0.535130
 [9,]  3.89090  2.93070  2.20740  1.66260  1.25230  0.943250  0.710460
[10,]  5.16580  3.89090  2.93070  2.20740  1.66260  1.252300  0.943250
[11,]  6.85840  5.16580  3.89090  2.93070  2.20740  1.662600  1.252300
[12,]  9.10560  6.85840  5.16580  3.89090  2.93070  2.207400  1.662600
[13,] 12.08900  9.10560  6.85840  5.16580  3.89090  2.930700  2.207400
[14,] 16.05000 12.08900  9.10560  6.85840  5.16580  3.890900  2.930700
[15,] 21.30900 16.05000 12.08900  9.10560  6.85840  5.165800  3.890900
[16,] 16.05000 21.30900 16.05000 12.08900  9.10560  6.858400  5.165800
[17,] 12.08900 16.05000 21.30900 16.05000 12.08900  9.105600  6.858400
[18,]  9.10560 12.08900 16.05000 21.30900 16.05000 12.089000  9.105600
[19,]  6.85840  9.10560 12.08900 16.05000 21.30900 16.050000 12.089000
[20,]  5.16580  6.85840  9.10560 12.08900 16.05000 21.309000 16.050000
[21,]  3.89090  5.16580  6.85840  9.10560 12.08900 16.050000 21.309000
[22,]  2.93070  3.89090  5.16580  6.85840  9.10560 12.089000 16.050000
[23,]  2.20740  2.93070  3.89090  5.16580  6.85840  9.105600 12.089000
[24,]  1.66260  2.20740  2.93070  3.89090  5.16580  6.858400  9.105600
[25,]  1.25230  1.66260  2.20740  2.93070  3.89090  5.165800  6.858400
[26,]  0.94325  1.25230  1.66260  2.20740  2.93070  3.890900  5.165800
[27,]  0.71046  0.94325  1.25230  1.66260  2.20740  2.930700  3.890900
[28,]  0.53513  0.71046  0.94325  1.25230  1.66260  2.207400  2.930700
[29,]  0.40306  0.53513  0.71046  0.94325  1.25230  1.662600  2.207400
          [,22]     [,23]     [,24]     [,25]     [,26]     [,27]     [,28]
 [1,]  0.055434  0.041753  0.031449  0.023688  0.017842  0.013438  0.010122
 [2,]  0.073597  0.055434  0.041753  0.031449  0.023688  0.017842  0.013438
 [3,]  0.097712  0.073597  0.055434  0.041753  0.031449  0.023688  0.017842
 [4,]  0.129730  0.097712  0.073597  0.055434  0.041753  0.031449  0.023688
 [5,]  0.172230  0.129730  0.097712  0.073597  0.055434  0.041753  0.031449
 [6,]  0.228670  0.172230  0.129730  0.097712  0.073597  0.055434  0.041753
 [7,]  0.303590  0.228670  0.172230  0.129730  0.097712  0.073597  0.055434
 [8,]  0.403060  0.303590  0.228670  0.172230  0.129730  0.097712  0.073597
 [9,]  0.535130  0.403060  0.303590  0.228670  0.172230  0.129730  0.097712
[10,]  0.710460  0.535130  0.403060  0.303590  0.228670  0.172230  0.129730
[11,]  0.943250  0.710460  0.535130  0.403060  0.303590  0.228670  0.172230
[12,]  1.252300  0.943250  0.710460  0.535130  0.403060  0.303590  0.228670
[13,]  1.662600  1.252300  0.943250  0.710460  0.535130  0.403060  0.303590
[14,]  2.207400  1.662600  1.252300  0.943250  0.710460  0.535130  0.403060
[15,]  2.930700  2.207400  1.662600  1.252300  0.943250  0.710460  0.535130
[16,]  3.890900  2.930700  2.207400  1.662600  1.252300  0.943250  0.710460
[17,]  5.165800  3.890900  2.930700  2.207400  1.662600  1.252300  0.943250
[18,]  6.858400  5.165800  3.890900  2.930700  2.207400  1.662600  1.252300
[19,]  9.105600  6.858400  5.165800  3.890900  2.930700  2.207400  1.662600
[20,] 12.089000  9.105600  6.858400  5.165800  3.890900  2.930700  2.207400
[21,] 16.050000 12.089000  9.105600  6.858400  5.165800  3.890900  2.930700
[22,] 21.309000 16.050000 12.089000  9.105600  6.858400  5.165800  3.890900
[23,] 16.050000 21.309000 16.050000 12.089000  9.105600  6.858400  5.165800
[24,] 12.089000 16.050000 21.309000 16.050000 12.089000  9.105600  6.858400
[25,]  9.105600 12.089000 16.050000 21.309000 16.050000 12.089000  9.105600
[26,]  6.858400  9.105600 12.089000 16.050000 21.309000 16.050000 12.089000
[27,]  5.165800  6.858400  9.105600 12.089000 16.050000 21.309000 16.050000
[28,]  3.890900  5.165800  6.858400  9.105600 12.089000 16.050000 21.309000
[29,]  2.930700  3.890900  5.165800  6.858400  9.105600 12.089000 16.050000
           [,29]
 [1,]  0.0076239
 [2,]  0.0101220
 [3,]  0.0134380
 [4,]  0.0178420
 [5,]  0.0236880
 [6,]  0.0314490
 [7,]  0.0417530
 [8,]  0.0554340
 [9,]  0.0735970
[10,]  0.0977120
[11,]  0.1297300
[12,]  0.1722300
[13,]  0.2286700
[14,]  0.3035900
[15,]  0.4030600
[16,]  0.5351300
[17,]  0.7104600
[18,]  0.9432500
[19,]  1.2523000
[20,]  1.6626000
[21,]  2.2074000
[22,]  2.9307000
[23,]  3.8909000
[24,]  5.1658000
[25,]  6.8584000
[26,]  9.1056000
[27,] 12.0890000
[28,] 16.0500000
[29,] 21.3090000
  Standard Deviations: 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 4.6162 
> 
> 
> 
> cleanEx()
> nameEx("gls")
> ### * gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gls
> ### Title: Fit Linear Model Using Generalized Least Squares
> ### Aliases: gls update.gls
> ### Keywords: models
> 
> ### ** Examples
> 
> # AR(1) errors within each Mare
> fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
+            correlation = corAR1(form = ~ 1 | Mare))
> # variance increases as a power of the absolute fitted values
> fm2 <- update(fm1, weights = varPower())
> 
> 
> 
> cleanEx()
> nameEx("glsControl")
> ### * glsControl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glsControl
> ### Title: Control Values for gls Fit
> ### Aliases: glsControl
> ### Keywords: models
> 
> ### ** Examples
> 
> # decrease the maximum number iterations in the optimization call and
> # request that information on the evolution of the ms iterations be printed
> glsControl(msMaxIter = 20, msVerbose = TRUE)
$maxIter
[1] 50

$msMaxIter
[1] 20

$tolerance
[1] 1e-06

$msTol
[1] 1e-07

$msVerbose
[1] TRUE

$singular.ok
[1] FALSE

$returnObject
[1] FALSE

$apVar
[1] TRUE

$minAbsParApVar
[1] 0.05

$.relStep
[1] 6.055454e-06

$opt
[1] "nlminb"

$optimMethod
[1] "BFGS"

$natural
[1] TRUE

$sigma
[1] 0

> 
> 
> 
> cleanEx()
> nameEx("glsStruct")
> ### * glsStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: glsStruct
> ### Title: Generalized Least Squares Structure
> ### Aliases: glsStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> gls1 <- glsStruct(corAR1(), varPower())
> 
> 
> 
> cleanEx()
> nameEx("gnls")
> ### * gnls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gnls
> ### Title: Fit Nonlinear Model Using Generalized Least Squares
> ### Aliases: gnls
> ### Keywords: models
> 
> ### ** Examples
> 
> # variance increases with a power of the absolute fitted values
> fm1 <- gnls(weight ~ SSlogis(Time, Asym, xmid, scal), Soybean,
+             weights = varPower())
> summary(fm1)
Generalized nonlinear least squares fit
  Model: weight ~ SSlogis(Time, Asym, xmid, scal) 
  Data: Soybean 
       AIC    BIC    logLik
  983.7947 1003.9 -486.8974

Variance function:
 Structure: Power of variance covariate
 Formula: ~fitted(.) 
 Parameter estimates:
    power 
0.8815436 

Coefficients:
        Value Std.Error  t-value p-value
Asym 17.35682 0.5226885 33.20682       0
xmid 51.87232 0.5916820 87.66925       0
scal  7.62053 0.1390958 54.78617       0

 Correlation: 
     Asym  xmid 
xmid 0.787      
scal 0.485 0.842

Standardized residuals:
         Min           Q1          Med           Q3          Max 
-2.309670601 -0.646844571 -0.004897042  0.498606011  4.986727045 

Residual standard error: 0.3662752 
Degrees of freedom: 412 total; 409 residual
> 
> 
> 
> cleanEx()
> nameEx("gnlsControl")
> ### * gnlsControl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gnlsControl
> ### Title: Control Values for gnls Fit
> ### Aliases: gnlsControl
> ### Keywords: models
> 
> ### ** Examples
> 
> # decrease the maximum number iterations in the ms call and
> # request that information on the evolution of the ms iterations be printed
> gnlsControl(msMaxIter = 20, msVerbose = TRUE)
$maxIter
[1] 50

$nlsMaxIter
[1] 7

$msMaxIter
[1] 20

$minScale
[1] 0.001

$tolerance
[1] 1e-06

$nlsTol
[1] 0.001

$msTol
[1] 1e-07

$returnObject
[1] FALSE

$msVerbose
[1] TRUE

$apVar
[1] TRUE

$opt
[1] "nlminb"

$optimMethod
[1] "BFGS"

$.relStep
[1] 6.055454e-06

$minAbsParApVar
[1] 0.05

$sigma
[1] 0

> 
> 
> 
> cleanEx()
> nameEx("gnlsStruct")
> ### * gnlsStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gnlsStruct
> ### Title: Generalized Nonlinear Least Squares Structure
> ### Aliases: gnlsStruct Initialize.gnlsStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> gnls1 <- gnlsStruct(corAR1(), varPower())
> 
> 
> 
> cleanEx()
> nameEx("groupedData")
> ### * groupedData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: groupedData
> ### Title: Construct a groupedData Object
> ### Aliases: groupedData nfGroupedData nmGroupedData [.groupedData
> ###   as.data.frame.groupedData update.groupedData
> ### Keywords: manip attribute
> 
> ### ** Examples
> 
> 
> Orth.new <-  # create a new copy of the groupedData object
+   groupedData( distance ~ age | Subject,
+               data = as.data.frame( Orthodont ),
+               FUN = mean,
+               outer = ~ Sex,
+               labels = list( x = "Age",
+                 y = "Distance from pituitary to pterygomaxillary fissure" ),
+               units = list( x = "(yr)", y = "(mm)") )
> plot( Orth.new )         # trellis plot by Subject
> formula( Orth.new )      # extractor for the formula
distance ~ age | Subject
> gsummary( Orth.new )     # apply summary by Subject
    distance age Subject    Sex
M16   23.000  11     M16   Male
M05   23.000  11     M05   Male
M02   23.375  11     M02   Male
M11   23.625  11     M11   Male
M07   23.750  11     M07   Male
M08   23.875  11     M08   Male
M03   24.250  11     M03   Male
M12   24.250  11     M12   Male
M13   24.250  11     M13   Male
M14   24.875  11     M14   Male
M09   25.125  11     M09   Male
M15   25.875  11     M15   Male
M06   26.375  11     M06   Male
M04   26.625  11     M04   Male
M01   27.750  11     M01   Male
M10   29.500  11     M10   Male
F10   18.500  11     F10 Female
F09   21.125  11     F09 Female
F06   21.125  11     F06 Female
F01   21.375  11     F01 Female
F05   22.625  11     F05 Female
F07   23.000  11     F07 Female
F02   23.000  11     F02 Female
F08   23.375  11     F08 Female
F03   23.750  11     F03 Female
F04   24.875  11     F04 Female
F11   26.375  11     F11 Female
> fm1 <- lme( Orth.new )   # fixed and groups formulae extracted from object
> Orthodont2 <- update(Orthodont, FUN = mean)
> 
> 
> 
> cleanEx()
> nameEx("gsummary")
> ### * gsummary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gsummary
> ### Title: Summarize by Groups
> ### Aliases: gsummary
> ### Keywords: manip
> 
> ### ** Examples
> 
> gsummary(Orthodont)  # default summary by Subject
    distance age Subject    Sex
M16   23.000  11     M16   Male
M05   23.000  11     M05   Male
M02   23.375  11     M02   Male
M11   23.625  11     M11   Male
M07   23.750  11     M07   Male
M08   23.875  11     M08   Male
M03   24.250  11     M03   Male
M12   24.250  11     M12   Male
M13   24.250  11     M13   Male
M14   24.875  11     M14   Male
M09   25.125  11     M09   Male
M15   25.875  11     M15   Male
M06   26.375  11     M06   Male
M04   26.625  11     M04   Male
M01   27.750  11     M01   Male
M10   29.500  11     M10   Male
F10   18.500  11     F10 Female
F09   21.125  11     F09 Female
F06   21.125  11     F06 Female
F01   21.375  11     F01 Female
F05   22.625  11     F05 Female
F07   23.000  11     F07 Female
F02   23.000  11     F02 Female
F08   23.375  11     F08 Female
F03   23.750  11     F03 Female
F04   24.875  11     F04 Female
F11   26.375  11     F11 Female
> ## gsummary with invariantsOnly = TRUE and omitGroupingFactor = TRUE
> ## determines whether there are covariates like Sex that are invariant
> ## within the repeated observations on the same Subject.
> gsummary(Orthodont, inv = TRUE, omit = TRUE)
       Sex
M16   Male
M05   Male
M02   Male
M11   Male
M07   Male
M08   Male
M03   Male
M12   Male
M13   Male
M14   Male
M09   Male
M15   Male
M06   Male
M04   Male
M01   Male
M10   Male
F10 Female
F09 Female
F06 Female
F01 Female
F05 Female
F07 Female
F02 Female
F08 Female
F03 Female
F04 Female
F11 Female
> 
> 
> 
> cleanEx()
> nameEx("intervals")
> ### * intervals
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intervals
> ### Title: Confidence Intervals on Coefficients
> ### Aliases: intervals
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method documentation
> 
> 
> 
> cleanEx()
> nameEx("intervals.gls")
> ### * intervals.gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intervals.gls
> ### Title: Confidence Intervals on gls Parameters
> ### Aliases: intervals.gls print.intervals.gls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
+            correlation = corAR1(form = ~ 1 | Mare))
> intervals(fm1)
Approximate 95% confidence intervals

 Coefficients:
                       lower       est.      upper
(Intercept)        10.908531 12.2163982 13.5242656
sin(2 * pi * Time) -4.044019 -2.7747122 -1.5054050
cos(2 * pi * Time) -2.272201 -0.8996047  0.4729919
attr(,"label")
[1] "Coefficients:"

 Correlation structure:
        lower      est.     upper
Phi 0.6684319 0.7532079 0.8186641
attr(,"label")
[1] "Correlation structure:"

 Residual standard error:
   lower     est.    upper 
3.974722 4.616172 5.361140 
> 
> 
> 
> cleanEx()
> nameEx("intervals.lmList")
> ### * intervals.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intervals.lmList
> ### Title: Confidence Intervals on lmList Coefficients
> ### Aliases: intervals.lmList print.intervals.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> intervals(fm1)
, , (Intercept)

       lower  est.    upper
M16 10.35761 16.95 23.54239
M05  7.05761 13.65 20.24239
M02  8.25761 14.85 21.44239
M11 13.45761 20.05 26.64239
M07  8.35761 14.95 21.54239
M08 13.15761 19.75 26.34239
M03  9.40761 16.00 22.59239
M12  6.65761 13.25 19.84239
M13 -3.79239  2.80  9.39239
M14 12.50761 19.10 25.69239
M09  7.80761 14.40 20.99239
M15  6.90761 13.50 20.09239
M06 12.35761 18.95 25.54239
M04 18.10761 24.70 31.29239
M01 10.70761 17.30 23.89239
M10 14.65761 21.25 27.84239
F10  6.95761 13.55 20.14239
F09 11.50761 18.10 24.69239
F06 10.40761 17.00 23.59239
F01 10.65761 17.25 23.84239
F05 13.00761 19.60 26.19239
F07 10.35761 16.95 23.54239
F02  7.60761 14.20 20.79239
F08 14.85761 21.45 28.04239
F03  7.80761 14.40 20.99239
F04 13.05761 19.65 26.24239
F11 12.35761 18.95 25.54239

, , age

          lower  est.     upper
M16 -0.03729682 0.550 1.1372968
M05  0.26270318 0.850 1.4372968
M02  0.18770318 0.775 1.3622968
M11 -0.26229682 0.325 0.9122968
M07  0.21270318 0.800 1.3872968
M08 -0.21229682 0.375 0.9622968
M03  0.16270318 0.750 1.3372968
M12  0.41270318 1.000 1.5872968
M13  1.36270318 1.950 2.5372968
M14 -0.06229682 0.525 1.1122968
M09  0.38770318 0.975 1.5622968
M15  0.53770318 1.125 1.7122968
M06  0.08770318 0.675 1.2622968
M04 -0.41229682 0.175 0.7622968
M01  0.36270318 0.950 1.5372968
M10  0.16270318 0.750 1.3372968
F10 -0.13729682 0.450 1.0372968
F09 -0.31229682 0.275 0.8622968
F06 -0.21229682 0.375 0.9622968
F01 -0.21229682 0.375 0.9622968
F05 -0.31229682 0.275 0.8622968
F07 -0.03729682 0.550 1.1372968
F02  0.21270318 0.800 1.3872968
F08 -0.41229682 0.175 0.7622968
F03  0.26270318 0.850 1.4372968
F04 -0.11229682 0.475 1.0622968
F11  0.08770318 0.675 1.2622968

> 
> 
> 
> cleanEx()
> nameEx("intervals.lme")
> ### * intervals.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intervals.lme
> ### Title: Confidence Intervals on lme Parameters
> ### Aliases: intervals.lme print.intervals.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, Orthodont, random = ~ age | Subject)
> intervals(fm1)
Approximate 95% confidence intervals

 Fixed effects:
                 lower       est.      upper
(Intercept) 15.2183223 16.7611111 18.3038999
age          0.5183867  0.6601852  0.8019837
attr(,"label")
[1] "Fixed effects:"

 Random Effects:
  Level: Subject 
                          lower       est.     upper
sd((Intercept))       0.9486114  2.3270341 5.7084364
sd(age)               0.1025364  0.2264278 0.5000132
cor((Intercept),age) -0.9381830 -0.6093329 0.2976550

 Within-group standard error:
   lower     est.    upper 
1.084783 1.310040 1.582071 
> 
> 
> 
> cleanEx()
> nameEx("isBalanced")
> ### * isBalanced
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isBalanced
> ### Title: Check a Design for Balance
> ### Aliases: isBalanced isBalanced.groupedData
> ### Keywords: data
> 
> ### ** Examples
> 
> isBalanced(Orthodont)                    # should return TRUE
[1] TRUE
> isBalanced(Orthodont, countOnly = TRUE)  # should return TRUE
[1] TRUE
> isBalanced(Pixel)                        # should return FALSE
[1] FALSE
> isBalanced(Pixel, level = 1)             # should return FALSE
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("isInitialized")
> ### * isInitialized
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: isInitialized
> ### Title: Check if Object is Initialized
> ### Aliases: isInitialized isInitialized.pdMat isInitialized.pdBlocked
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdDiag(~age)
> isInitialized(pd1)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("lmList")
> ### * lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lmList
> ### Title: List of lm Objects with a Common Model
> ### Aliases: lmList lmList.formula print.lmList update.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> summary(fm1)
Call:
  Model: distance ~ age | Subject 
   Data: Orthodont 

Coefficients:
   (Intercept) 
    Estimate Std. Error   t value     Pr(>|t|)
M16    16.95   3.288173 5.1548379 3.695247e-06
M05    13.65   3.288173 4.1512411 1.181678e-04
M02    14.85   3.288173 4.5161854 3.458934e-05
M11    20.05   3.288173 6.0976106 1.188838e-07
M07    14.95   3.288173 4.5465974 3.116705e-05
M08    19.75   3.288173 6.0063745 1.665712e-07
M03    16.00   3.288173 4.8659237 1.028488e-05
M12    13.25   3.288173 4.0295930 1.762580e-04
M13     2.80   3.288173 0.8515366 3.982319e-01
M14    19.10   3.288173 5.8086964 3.449588e-07
M09    14.40   3.288173 4.3793313 5.509579e-05
M15    13.50   3.288173 4.1056231 1.373664e-04
M06    18.95   3.288173 5.7630783 4.078189e-07
M04    24.70   3.288173 7.5117696 6.081644e-10
M01    17.30   3.288173 5.2612799 2.523621e-06
M10    21.25   3.288173 6.4625549 3.065505e-08
F10    13.55   3.288173 4.1208291 1.306536e-04
F09    18.10   3.288173 5.5045761 1.047769e-06
F06    17.00   3.288173 5.1700439 3.499774e-06
F01    17.25   3.288173 5.2460739 2.665260e-06
F05    19.60   3.288173 5.9607565 1.971127e-07
F07    16.95   3.288173 5.1548379 3.695247e-06
F02    14.20   3.288173 4.3185072 6.763806e-05
F08    21.45   3.288173 6.5233789 2.443813e-08
F03    14.40   3.288173 4.3793313 5.509579e-05
F04    19.65   3.288173 5.9759625 1.863600e-07
F11    18.95   3.288173 5.7630783 4.078189e-07
   age 
    Estimate Std. Error   t value     Pr(>|t|)
M16    0.550  0.2929338 1.8775576 6.584707e-02
M05    0.850  0.2929338 2.9016799 5.361639e-03
M02    0.775  0.2929338 2.6456493 1.065760e-02
M11    0.325  0.2929338 1.1094659 2.721458e-01
M07    0.800  0.2929338 2.7309929 8.511442e-03
M08    0.375  0.2929338 1.2801529 2.059634e-01
M03    0.750  0.2929338 2.5603058 1.328807e-02
M12    1.000  0.2929338 3.4137411 1.222240e-03
M13    1.950  0.2929338 6.6567951 1.485652e-08
M14    0.525  0.2929338 1.7922141 7.870160e-02
M09    0.975  0.2929338 3.3283976 1.577941e-03
M15    1.125  0.2929338 3.8404587 3.247135e-04
M06    0.675  0.2929338 2.3042752 2.508117e-02
M04    0.175  0.2929338 0.5974047 5.527342e-01
M01    0.950  0.2929338 3.2430540 2.030113e-03
M10    0.750  0.2929338 2.5603058 1.328807e-02
F10    0.450  0.2929338 1.5361835 1.303325e-01
F09    0.275  0.2929338 0.9387788 3.520246e-01
F06    0.375  0.2929338 1.2801529 2.059634e-01
F01    0.375  0.2929338 1.2801529 2.059634e-01
F05    0.275  0.2929338 0.9387788 3.520246e-01
F07    0.550  0.2929338 1.8775576 6.584707e-02
F02    0.800  0.2929338 2.7309929 8.511442e-03
F08    0.175  0.2929338 0.5974047 5.527342e-01
F03    0.850  0.2929338 2.9016799 5.361639e-03
F04    0.475  0.2929338 1.6215270 1.107298e-01
F11    0.675  0.2929338 2.3042752 2.508117e-02

Residual standard error: 1.31004 on 54 degrees of freedom

> 
> 
> 
> cleanEx()
> nameEx("lmList.groupedData")
> ### * lmList.groupedData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lmList.groupedData
> ### Title: lmList Fit from a groupedData Object
> ### Aliases: lmList.groupedData
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(Orthodont)
> summary(fm1)
Call:
  Model: distance ~ age | Subject 
   Data: Orthodont 

Coefficients:
   (Intercept) 
    Estimate Std. Error   t value     Pr(>|t|)
M16    16.95   3.288173 5.1548379 3.695247e-06
M05    13.65   3.288173 4.1512411 1.181678e-04
M02    14.85   3.288173 4.5161854 3.458934e-05
M11    20.05   3.288173 6.0976106 1.188838e-07
M07    14.95   3.288173 4.5465974 3.116705e-05
M08    19.75   3.288173 6.0063745 1.665712e-07
M03    16.00   3.288173 4.8659237 1.028488e-05
M12    13.25   3.288173 4.0295930 1.762580e-04
M13     2.80   3.288173 0.8515366 3.982319e-01
M14    19.10   3.288173 5.8086964 3.449588e-07
M09    14.40   3.288173 4.3793313 5.509579e-05
M15    13.50   3.288173 4.1056231 1.373664e-04
M06    18.95   3.288173 5.7630783 4.078189e-07
M04    24.70   3.288173 7.5117696 6.081644e-10
M01    17.30   3.288173 5.2612799 2.523621e-06
M10    21.25   3.288173 6.4625549 3.065505e-08
F10    13.55   3.288173 4.1208291 1.306536e-04
F09    18.10   3.288173 5.5045761 1.047769e-06
F06    17.00   3.288173 5.1700439 3.499774e-06
F01    17.25   3.288173 5.2460739 2.665260e-06
F05    19.60   3.288173 5.9607565 1.971127e-07
F07    16.95   3.288173 5.1548379 3.695247e-06
F02    14.20   3.288173 4.3185072 6.763806e-05
F08    21.45   3.288173 6.5233789 2.443813e-08
F03    14.40   3.288173 4.3793313 5.509579e-05
F04    19.65   3.288173 5.9759625 1.863600e-07
F11    18.95   3.288173 5.7630783 4.078189e-07
   age 
    Estimate Std. Error   t value     Pr(>|t|)
M16    0.550  0.2929338 1.8775576 6.584707e-02
M05    0.850  0.2929338 2.9016799 5.361639e-03
M02    0.775  0.2929338 2.6456493 1.065760e-02
M11    0.325  0.2929338 1.1094659 2.721458e-01
M07    0.800  0.2929338 2.7309929 8.511442e-03
M08    0.375  0.2929338 1.2801529 2.059634e-01
M03    0.750  0.2929338 2.5603058 1.328807e-02
M12    1.000  0.2929338 3.4137411 1.222240e-03
M13    1.950  0.2929338 6.6567951 1.485652e-08
M14    0.525  0.2929338 1.7922141 7.870160e-02
M09    0.975  0.2929338 3.3283976 1.577941e-03
M15    1.125  0.2929338 3.8404587 3.247135e-04
M06    0.675  0.2929338 2.3042752 2.508117e-02
M04    0.175  0.2929338 0.5974047 5.527342e-01
M01    0.950  0.2929338 3.2430540 2.030113e-03
M10    0.750  0.2929338 2.5603058 1.328807e-02
F10    0.450  0.2929338 1.5361835 1.303325e-01
F09    0.275  0.2929338 0.9387788 3.520246e-01
F06    0.375  0.2929338 1.2801529 2.059634e-01
F01    0.375  0.2929338 1.2801529 2.059634e-01
F05    0.275  0.2929338 0.9387788 3.520246e-01
F07    0.550  0.2929338 1.8775576 6.584707e-02
F02    0.800  0.2929338 2.7309929 8.511442e-03
F08    0.175  0.2929338 0.5974047 5.527342e-01
F03    0.850  0.2929338 2.9016799 5.361639e-03
F04    0.475  0.2929338 1.6215270 1.107298e-01
F11    0.675  0.2929338 2.3042752 2.508117e-02

Residual standard error: 1.31004 on 54 degrees of freedom

> 
> 
> 
> cleanEx()
> nameEx("lme")
> ### * lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lme
> ### Title: Linear Mixed-Effects Models
> ### Aliases: lme lme.formula update.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, data = Orthodont) # random is ~ age
> fm2 <- lme(distance ~ age + Sex, data = Orthodont, random = ~ 1)
> summary(fm1)
Linear mixed-effects model fit by REML
 Data: Orthodont 
       AIC      BIC    logLik
  454.6367 470.6173 -221.3183

Random effects:
 Formula: ~age | Subject
 Structure: General positive-definite
            StdDev    Corr  
(Intercept) 2.3270339 (Intr)
age         0.2264276 -0.609
Residual    1.3100399       

Fixed effects: distance ~ age 
                Value Std.Error DF   t-value p-value
(Intercept) 16.761111 0.7752461 80 21.620375       0
age          0.660185 0.0712533 80  9.265334       0
 Correlation: 
    (Intr)
age -0.848

Standardized Within-Group Residuals:
         Min           Q1          Med           Q3          Max 
-3.223106036 -0.493760864  0.007316632  0.472151092  3.916032734 

Number of Observations: 108
Number of Groups: 27 
> summary(fm2)
Linear mixed-effects model fit by REML
 Data: Orthodont 
       AIC      BIC    logLik
  447.5125 460.7823 -218.7563

Random effects:
 Formula: ~1 | Subject
        (Intercept) Residual
StdDev:    1.807425 1.431592

Fixed effects: distance ~ age + Sex 
                Value Std.Error DF   t-value p-value
(Intercept) 17.706713 0.8339225 80 21.233044  0.0000
age          0.660185 0.0616059 80 10.716263  0.0000
SexFemale   -2.321023 0.7614168 25 -3.048294  0.0054
 Correlation: 
          (Intr) age   
age       -0.813       
SexFemale -0.372  0.000

Standardized Within-Group Residuals:
        Min          Q1         Med          Q3         Max 
-3.74889609 -0.55034466 -0.02516628  0.45341781  3.65746539 

Number of Observations: 108
Number of Groups: 27 
> 
> 
> 
> cleanEx()
> nameEx("lme.groupedData")
> ### * lme.groupedData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lme.groupedData
> ### Title: LME fit from groupedData Object
> ### Aliases: lme.groupedData
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(Orthodont)
> summary(fm1)
Linear mixed-effects model fit by REML
 Data: Orthodont 
       AIC      BIC    logLik
  454.6367 470.6173 -221.3183

Random effects:
 Formula: ~age | Subject
 Structure: General positive-definite
            StdDev    Corr  
(Intercept) 2.3270339 (Intr)
age         0.2264276 -0.609
Residual    1.3100399       

Fixed effects: distance ~ age 
                Value Std.Error DF   t-value p-value
(Intercept) 16.761111 0.7752461 80 21.620375       0
age          0.660185 0.0712533 80  9.265334       0
 Correlation: 
    (Intr)
age -0.848

Standardized Within-Group Residuals:
         Min           Q1          Med           Q3          Max 
-3.223106036 -0.493760864  0.007316632  0.472151092  3.916032734 

Number of Observations: 108
Number of Groups: 27 
> 
> 
> 
> cleanEx()
> nameEx("lme.lmList")
> ### * lme.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lme.lmList
> ### Title: LME fit from lmList Object
> ### Aliases: lme.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(Orthodont)
> fm2 <- lme(fm1)
> summary(fm1)
Call:
  Model: distance ~ age | Subject 
   Data: Orthodont 

Coefficients:
   (Intercept) 
    Estimate Std. Error   t value     Pr(>|t|)
M16    16.95   3.288173 5.1548379 3.695247e-06
M05    13.65   3.288173 4.1512411 1.181678e-04
M02    14.85   3.288173 4.5161854 3.458934e-05
M11    20.05   3.288173 6.0976106 1.188838e-07
M07    14.95   3.288173 4.5465974 3.116705e-05
M08    19.75   3.288173 6.0063745 1.665712e-07
M03    16.00   3.288173 4.8659237 1.028488e-05
M12    13.25   3.288173 4.0295930 1.762580e-04
M13     2.80   3.288173 0.8515366 3.982319e-01
M14    19.10   3.288173 5.8086964 3.449588e-07
M09    14.40   3.288173 4.3793313 5.509579e-05
M15    13.50   3.288173 4.1056231 1.373664e-04
M06    18.95   3.288173 5.7630783 4.078189e-07
M04    24.70   3.288173 7.5117696 6.081644e-10
M01    17.30   3.288173 5.2612799 2.523621e-06
M10    21.25   3.288173 6.4625549 3.065505e-08
F10    13.55   3.288173 4.1208291 1.306536e-04
F09    18.10   3.288173 5.5045761 1.047769e-06
F06    17.00   3.288173 5.1700439 3.499774e-06
F01    17.25   3.288173 5.2460739 2.665260e-06
F05    19.60   3.288173 5.9607565 1.971127e-07
F07    16.95   3.288173 5.1548379 3.695247e-06
F02    14.20   3.288173 4.3185072 6.763806e-05
F08    21.45   3.288173 6.5233789 2.443813e-08
F03    14.40   3.288173 4.3793313 5.509579e-05
F04    19.65   3.288173 5.9759625 1.863600e-07
F11    18.95   3.288173 5.7630783 4.078189e-07
   age 
    Estimate Std. Error   t value     Pr(>|t|)
M16    0.550  0.2929338 1.8775576 6.584707e-02
M05    0.850  0.2929338 2.9016799 5.361639e-03
M02    0.775  0.2929338 2.6456493 1.065760e-02
M11    0.325  0.2929338 1.1094659 2.721458e-01
M07    0.800  0.2929338 2.7309929 8.511442e-03
M08    0.375  0.2929338 1.2801529 2.059634e-01
M03    0.750  0.2929338 2.5603058 1.328807e-02
M12    1.000  0.2929338 3.4137411 1.222240e-03
M13    1.950  0.2929338 6.6567951 1.485652e-08
M14    0.525  0.2929338 1.7922141 7.870160e-02
M09    0.975  0.2929338 3.3283976 1.577941e-03
M15    1.125  0.2929338 3.8404587 3.247135e-04
M06    0.675  0.2929338 2.3042752 2.508117e-02
M04    0.175  0.2929338 0.5974047 5.527342e-01
M01    0.950  0.2929338 3.2430540 2.030113e-03
M10    0.750  0.2929338 2.5603058 1.328807e-02
F10    0.450  0.2929338 1.5361835 1.303325e-01
F09    0.275  0.2929338 0.9387788 3.520246e-01
F06    0.375  0.2929338 1.2801529 2.059634e-01
F01    0.375  0.2929338 1.2801529 2.059634e-01
F05    0.275  0.2929338 0.9387788 3.520246e-01
F07    0.550  0.2929338 1.8775576 6.584707e-02
F02    0.800  0.2929338 2.7309929 8.511442e-03
F08    0.175  0.2929338 0.5974047 5.527342e-01
F03    0.850  0.2929338 2.9016799 5.361639e-03
F04    0.475  0.2929338 1.6215270 1.107298e-01
F11    0.675  0.2929338 2.3042752 2.508117e-02

Residual standard error: 1.31004 on 54 degrees of freedom

> summary(fm2)
Linear mixed-effects model fit by REML
 Data: Orthodont 
       AIC      BIC    logLik
  454.6367 470.6173 -221.3183

Random effects:
 Formula: ~age | Subject
 Structure: General positive-definite, Log-Cholesky parametrization
            StdDev   Corr  
(Intercept) 2.327036 (Intr)
age         0.226428 -0.609
Residual    1.310040       

Fixed effects: distance ~ age 
                Value Std.Error DF  t-value p-value
(Intercept) 16.761111 0.7752462 80 21.62037       0
age          0.660185 0.0712533 80  9.26533       0
 Correlation: 
    (Intr)
age -0.848

Standardized Within-Group Residuals:
         Min           Q1          Med           Q3          Max 
-3.223104747 -0.493761213  0.007316586  0.472150966  3.916033386 

Number of Observations: 108
Number of Groups: 27 
> 
> 
> 
> cleanEx()
> nameEx("lmeControl")
> ### * lmeControl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lmeControl
> ### Title: Specifying Control Values for lme Fit
> ### Aliases: lmeControl
> ### Keywords: models
> 
> ### ** Examples
> 
> # decrease the maximum number iterations in the ms call and
> # request that information on the evolution of the ms iterations be printed
> str(lCtr <- lmeControl(msMaxIter = 20, msVerbose = TRUE))
List of 17
 $ maxIter       : num 50
 $ msMaxIter     : num 20
 $ tolerance     : num 1e-06
 $ niterEM       : num 25
 $ msMaxEval     : num 200
 $ msTol         : num 1e-07
 $ msVerbose     : logi TRUE
 $ returnObject  : logi FALSE
 $ gradHess      : logi TRUE
 $ apVar         : logi TRUE
 $ .relStep      : num 6.06e-06
 $ opt           : chr "nlminb"
 $ optimMethod   : chr "BFGS"
 $ minAbsParApVar: num 0.05
 $ natural       : logi TRUE
 $ sigma         : num 0
 $ allow.n.lt.q  : logi FALSE
> ## This should always work:
> do.call(lmeControl, lCtr)
$maxIter
[1] 50

$msMaxIter
[1] 20

$tolerance
[1] 1e-06

$niterEM
[1] 25

$msMaxEval
[1] 200

$msTol
[1] 1e-07

$msVerbose
[1] TRUE

$returnObject
[1] FALSE

$gradHess
[1] TRUE

$apVar
[1] TRUE

$.relStep
[1] 6.055454e-06

$opt
[1] "nlminb"

$optimMethod
[1] "BFGS"

$minAbsParApVar
[1] 0.05

$natural
[1] TRUE

$sigma
[1] 0

$allow.n.lt.q
[1] FALSE

> 
> 
> 
> cleanEx()
> nameEx("lmeStruct")
> ### * lmeStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lmeStruct
> ### Title: Linear Mixed-Effects Structure
> ### Aliases: lmeStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> lms1 <- lmeStruct(reStruct(~age), corAR1(), varPower())
> 
> 
> 
> cleanEx()
> nameEx("logDet")
> ### * logDet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logDet
> ### Title: Extract the Logarithm of the Determinant
> ### Aliases: logDet
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("logDet.corStruct")
> ### * logDet.corStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logDet.corStruct
> ### Title: Extract corStruct Log-Determinant
> ### Aliases: logDet.corStruct logDet.corIdent
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corAR1(0.3)
> logDet(cs1, covariate = 1:4)
[1] -0.141466
> 
> 
> 
> cleanEx()
> nameEx("logDet.pdMat")
> ### * logDet.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logDet.pdMat
> ### Title: Extract Log-Determinant from a pdMat Object
> ### Aliases: logDet.pdMat logDet.pdBlocked logDet.pdCompSymm logDet.pdDiag
> ###   logDet.pdIdent logDet.pdNatural logDet.pdSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdSymm(diag(1:3))
> logDet(pd1)
[1] 0.8958797
> 
> 
> 
> cleanEx()
> nameEx("logDet.reStruct")
> ### * logDet.reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logDet.reStruct
> ### Title: Extract reStruct Log-Determinants
> ### Aliases: logDet.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(list(A = pdSymm(diag(1:3), form = ~Score),
+   B = pdDiag(2 * diag(4), form = ~Educ)))
> logDet(rs1)
        B         A 
1.3862944 0.8958797 
> 
> 
> 
> cleanEx()
> nameEx("logLik.corStruct")
> ### * logLik.corStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logLik.corStruct
> ### Title: Extract corStruct Log-Likelihood
> ### Aliases: logLik.corStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corAR1(0.2)
> cs1 <- Initialize(cs1, data = Orthodont)
> logLik(cs1)
[1] 2.183977
> 
> 
> 
> cleanEx()
> nameEx("logLik.gnls")
> ### * logLik.gnls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logLik.gnls
> ### Title: Log-Likelihood of a gnls Object
> ### Aliases: logLik.gnls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gnls(weight ~ SSlogis(Time, Asym, xmid, scal), Soybean,
+             weights = varPower())
> logLik(fm1)
'log Lik.' -486.8974 (df=5)
> 
> 
> 
> cleanEx()
> nameEx("logLik.lmList")
> ### * logLik.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logLik.lmList
> ### Title: Log-Likelihood of an lmList Object
> ### Aliases: logLik.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> logLik(fm1)   # returns NA when it should not
'log Lik.' -144.9816 (df=55)
> 
> 
> 
> cleanEx()
> nameEx("logLik.lme")
> ### * logLik.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logLik.lme
> ### Title: Log-Likelihood of an lme Object
> ### Aliases: logLik.lme logLik.gls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ Sex * age, Orthodont, random = ~ age, method = "ML")
> logLik(fm1)
'log Lik.' -213.903 (df=8)
> logLik(fm1, REML = TRUE)
'log Lik.' -216.3293 (df=8)
> 
> 
> 
> cleanEx()
> nameEx("logLik.varFunc")
> ### * logLik.varFunc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logLik.varFunc
> ### Title: Extract varFunc logLik
> ### Aliases: logLik.varFunc logLik.varComb
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varPower(form = ~age)
> vf1 <- Initialize(vf1, Orthodont)
> coef(vf1) <- 0.1
> logLik(vf1)
'log Lik.' -25.66617 (df=1)
> 
> 
> 
> cleanEx()
> nameEx("model.matrix.reStruct")
> ### * model.matrix.reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model.matrix.reStruct
> ### Title: reStruct Model Matrix
> ### Aliases: model.matrix.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(list(Dog = ~day, Side = ~1), data = Pixel)
> model.matrix(rs1, Pixel)
    Side.(Intercept) Dog.(Intercept) Dog.day
1                  1               1       0
2                  1               1       1
3                  1               1       2
4                  1               1       4
5                  1               1       6
6                  1               1      10
7                  1               1      14
8                  1               1       0
9                  1               1       1
10                 1               1       2
11                 1               1       4
12                 1               1       6
13                 1               1      10
14                 1               1      14
15                 1               1       0
16                 1               1       4
17                 1               1       6
18                 1               1       8
19                 1               1      10
20                 1               1      14
21                 1               1      21
22                 1               1       0
23                 1               1       4
24                 1               1       6
25                 1               1       8
26                 1               1      10
27                 1               1      14
28                 1               1      21
29                 1               1       4
30                 1               1       6
31                 1               1       8
32                 1               1      10
33                 1               1      14
34                 1               1       4
35                 1               1       6
36                 1               1       8
37                 1               1      10
38                 1               1      14
39                 1               1       4
40                 1               1       6
41                 1               1      10
42                 1               1      14
43                 1               1       4
44                 1               1       6
45                 1               1      10
46                 1               1      14
47                 1               1       4
48                 1               1       8
49                 1               1       4
50                 1               1       6
51                 1               1       8
52                 1               1       0
53                 1               1       1
54                 1               1       2
55                 1               1       4
56                 1               1       6
57                 1               1      10
58                 1               1      14
59                 1               1       0
60                 1               1       1
61                 1               1       2
62                 1               1       4
63                 1               1       6
64                 1               1      10
65                 1               1      14
66                 1               1       0
67                 1               1       4
68                 1               1       6
69                 1               1       8
70                 1               1      10
71                 1               1      14
72                 1               1      21
73                 1               1       0
74                 1               1       4
75                 1               1       6
76                 1               1       8
77                 1               1      10
78                 1               1      14
79                 1               1      21
80                 1               1       4
81                 1               1       6
82                 1               1       8
83                 1               1      10
84                 1               1      14
85                 1               1       4
86                 1               1       6
87                 1               1       8
88                 1               1      10
89                 1               1      14
90                 1               1       4
91                 1               1       6
92                 1               1      10
93                 1               1      14
94                 1               1       4
95                 1               1       6
96                 1               1      10
97                 1               1      14
98                 1               1       4
99                 1               1       8
100                1               1       4
101                1               1       6
102                1               1       8
attr(,"ncols")
Side  Dog 
   1    2 
attr(,"nams")
attr(,"nams")$Side
[1] "(Intercept)"

attr(,"nams")$Dog
[1] "(Intercept)" "day"        

attr(,"contr")
attr(,"contr")$day
NULL

> 
> 
> 
> cleanEx()
> nameEx("needUpdate")
> ### * needUpdate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: needUpdate
> ### Title: Check if Update is Needed
> ### Aliases: needUpdate needUpdate.default needUpdate.varComb
> ###   needUpdate.varIdent
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varExp()
> vf1 <- Initialize(vf1, data = Orthodont)
> needUpdate(vf1)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("needUpdate.modelStruct")
> ### * needUpdate.modelStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: needUpdate.modelStruct
> ### Title: Check if a modelStruct Object Needs Updating
> ### Aliases: needUpdate.modelStruct needUpdate.corStruct
> ###   needUpdate.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> lms1 <- lmeStruct(reStruct = reStruct(pdDiag(diag(2), ~age)),
+    varStruct = varPower(form = ~age))
> needUpdate(lms1)
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("nlme")
> ### * nlme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlme
> ### Title: Nonlinear Mixed-Effects Models
> ### Aliases: nlme nlme.formula
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- nlme(height ~ SSasymp(age, Asym, R0, lrc),
+             data = Loblolly,
+             fixed = Asym + R0 + lrc ~ 1,
+             random = Asym ~ 1,
+             start = c(Asym = 103, R0 = -8.5, lrc = -3.3))
> summary(fm1)
Nonlinear mixed-effects model fit by maximum likelihood
  Model: height ~ SSasymp(age, Asym, R0, lrc) 
 Data: Loblolly 
       AIC      BIC    logLik
  239.4856 251.6397 -114.7428

Random effects:
 Formula: Asym ~ 1 | Seed
            Asym  Residual
StdDev: 3.650642 0.7188625

Fixed effects: Asym + R0 + lrc ~ 1 
         Value Std.Error DF   t-value p-value
Asym 101.44960 2.4616951 68  41.21128       0
R0    -8.62733 0.3179505 68 -27.13420       0
lrc   -3.23375 0.0342702 68 -94.36052       0
 Correlation: 
    Asym   R0    
R0   0.704       
lrc -0.908 -0.827

Standardized Within-Group Residuals:
        Min          Q1         Med          Q3         Max 
-2.23601930 -0.62380854  0.05917466  0.65727206  1.95794425 

Number of Observations: 84
Number of Groups: 14 
> fm2 <- update(fm1, random = pdDiag(Asym + lrc ~ 1))
> summary(fm2)
Nonlinear mixed-effects model fit by maximum likelihood
  Model: height ~ SSasymp(age, Asym, R0, lrc) 
 Data: Loblolly 
       AIC      BIC    logLik
  238.9662 253.5511 -113.4831

Random effects:
 Formula: list(Asym ~ 1, lrc ~ 1)
 Level: Seed
 Structure: Diagonal
            Asym        lrc  Residual
StdDev: 2.806185 0.03449969 0.6920003

Fixed effects: Asym + R0 + lrc ~ 1 
         Value Std.Error DF   t-value p-value
Asym 101.85205 2.3239828 68  43.82651       0
R0    -8.59039 0.3058441 68 -28.08747       0
lrc   -3.24011 0.0345017 68 -93.91167       0
 Correlation: 
    Asym   R0    
R0   0.727       
lrc -0.902 -0.796

Standardized Within-Group Residuals:
        Min          Q1         Med          Q3         Max 
-2.06072906 -0.69785679  0.08721706  0.73687722  1.79015782 

Number of Observations: 84
Number of Groups: 14 
> 
> 
> 
> cleanEx()
> nameEx("nlme.nlsList")
> ### * nlme.nlsList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlme.nlsList
> ### Title: NLME fit from nlsList Object
> ### Aliases: nlme.nlsList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- nlsList(SSasymp, data = Loblolly)
> fm2 <- nlme(fm1, random = Asym ~ 1)
> summary(fm1)
Call:
  Model: height ~ SSasymp(age, Asym, R0, lrc) | Seed 
   Data: Loblolly 

Coefficients:
   Asym 
     Estimate Std. Error   t value     Pr(>|t|)
329  94.12820   7.854473 11.984025 0.0015250903
327  94.94058   8.034073 11.817241 0.0012377237
325  89.88487   6.107469 14.717206 0.0006432969
307 110.69919  10.969922 10.091156 0.0025753994
331 111.00287  11.125081  9.977713 0.0032192119
311 109.98575  10.393098 10.582575 0.0032302621
315 101.05622   8.088408 12.493957 0.0006267587
321 127.13400  15.734953  8.079719 0.0041760501
319 101.08748   7.800912 12.958419 0.0009328591
301  95.66688   6.469242 14.787959 0.0004839491
323  95.55627   6.178278 15.466489 0.0004783920
309 113.51390  10.199357 11.129516 0.0006540778
303 105.71792   7.936191 13.320991 0.0006901480
305  99.17191   6.091461 16.280482 0.0006761877
   R0 
     Estimate Std. Error   t value    Pr(>|t|)
329 -8.250753   1.146068 -7.199181 0.006700134
327 -7.757495   1.143211 -6.785709 0.006226357
325 -8.759017   1.181264 -7.414952 0.004805581
307 -8.169431   1.108136 -7.372226 0.006382603
331 -8.462608   1.106725 -7.646532 0.006927323
311 -8.558543   1.113691 -7.684848 0.008098734
315 -8.443628   1.142368 -7.391340 0.002941994
321 -7.679356   1.075754 -7.138578 0.005963178
319 -8.502343   1.146942 -7.413052 0.004783021
301 -9.078241   1.172624 -7.741816 0.003259525
323 -9.665035   1.179503 -8.194157 0.003113070
309 -7.595622   1.115674 -6.808100 0.002782876
303 -8.906081   1.144754 -7.779906 0.003356654
305 -9.916654   1.181667 -8.392087 0.004722701
   lrc 
     Estimate Std. Error   t value     Pr(>|t|)
329 -3.217578  0.1295370 -24.83907 1.750358e-04
327 -3.229325  0.1313231 -24.59068 1.399840e-04
325 -3.086219  0.1120207 -27.55043 9.918120e-05
307 -3.390345  0.1439118 -23.55849 2.091688e-04
331 -3.397574  0.1447737 -23.46817 2.570655e-04
311 -3.362518  0.1383662 -24.30158 2.770780e-04
315 -3.232825  0.1237859 -26.11625 6.945353e-05
321 -3.575331  0.1692979 -21.11858 2.452645e-04
319 -3.214021  0.1204012 -26.69426 1.083870e-04
301 -3.116381  0.1099075 -28.35459 6.931135e-05
323 -3.092266  0.1058796 -29.20549 7.171926e-05
309 -3.352815  0.1334770 -25.11905 5.763078e-05
303 -3.222957  0.1165915 -27.64315 7.822383e-05
305 -3.084841  0.1011074 -30.51055 1.039483e-04

Residual standard error: 0.7003965 on 42 degrees of freedom

> summary(fm2)
Nonlinear mixed-effects model fit by maximum likelihood
  Model: height ~ SSasymp(age, Asym, R0, lrc) 
 Data: Loblolly 
      AIC      BIC   logLik
  239.486 251.6401 -114.743

Random effects:
 Formula: Asym ~ 1 | Seed
            Asym  Residual
StdDev: 3.650645 0.7188624

Fixed effects: list(Asym ~ 1, R0 ~ 1, lrc ~ 1) 
         Value Std.Error DF   t-value p-value
Asym 101.44830 2.4616151 68  41.21209       0
R0    -8.62749 0.3179519 68 -27.13459       0
lrc   -3.23373 0.0342695 68 -94.36168       0
 Correlation: 
    Asym   R0    
R0   0.704       
lrc -0.908 -0.827

Standardized Within-Group Residuals:
        Min          Q1         Med          Q3         Max 
-2.23604174 -0.62389999  0.05912777  0.65724316  1.95790785 

Number of Observations: 84
Number of Groups: 14 
> 
> 
> 
> cleanEx()
> nameEx("nlmeControl")
> ### * nlmeControl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlmeControl
> ### Title: Control Values for nlme Fit
> ### Aliases: nlmeControl
> ### Keywords: models
> 
> ### ** Examples
> 
> # decrease the maximum number iterations in the ms call and
> # request that information on the evolution of the ms iterations be printed
> nlmeControl(msMaxIter = 20, msVerbose = TRUE)
$maxIter
[1] 50

$pnlsMaxIter
[1] 7

$msMaxIter
[1] 20

$minScale
[1] 0.001

$tolerance
[1] 1e-05

$niterEM
[1] 25

$pnlsTol
[1] 0.001

$msTol
[1] 1e-06

$returnObject
[1] FALSE

$msVerbose
[1] TRUE

$msWarnNoConv
[1] TRUE

$gradHess
[1] TRUE

$apVar
[1] TRUE

$.relStep
[1] 6.055454e-06

$minAbsParApVar
[1] 0.05

$opt
[1] "nlminb"

$natural
[1] TRUE

$sigma
[1] 0

> 
> 
> 
> cleanEx()
> nameEx("nlmeStruct")
> ### * nlmeStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlmeStruct
> ### Title: Nonlinear Mixed-Effects Structure
> ### Aliases: nlmeStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> nlms1 <- nlmeStruct(reStruct(~age), corAR1(), varPower())
> 
> 
> 
> cleanEx()
> nameEx("nlsList")
> ### * nlsList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlsList
> ### Title: List of nls Objects with a Common Model
> ### Aliases: nlsList nlsList.formula update.nlsList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- nlsList(uptake ~ SSasympOff(conc, Asym, lrc, c0),
+    data = CO2, start = c(Asym = 30, lrc = -4.5, c0 = 52))
> summary(fm1)
Call:
  Model: uptake ~ SSasympOff(conc, Asym, lrc, c0) | Plant 
   Data: CO2 

Coefficients:
   Asym 
    Estimate Std. Error  t value     Pr(>|t|)
Qn1 38.13977  0.9911148 38.48169 1.991990e-06
Qn2 42.87169  1.0932089 39.21638 2.583953e-06
Qn3 44.22800  1.0241029 43.18706 1.809264e-07
Qc1 36.42874  1.1941594 30.50576 1.140085e-05
Qc3 40.68373  1.2480923 32.59673 1.424635e-04
Qc2 39.81950  1.0167249 39.16447 2.692304e-06
Mn3 28.48286  1.0624246 26.80930 1.066434e-06
Mn2 32.12827  1.0174826 31.57624 3.488786e-06
Mn1 34.08482  1.3400596 25.43530 4.199333e-06
Mc2 13.55519  1.0506404 12.90184 4.385886e-06
Mc3 18.53506  0.8363371 22.16219 1.461563e-06
Mc1 21.78723  1.4113318 15.43735 5.756870e-06
   lrc 
     Estimate Std. Error    t value     Pr(>|t|)
Qn1 -4.380644  0.2208028 -19.839619 2.789830e-05
Qn2 -4.665729  0.1581312 -29.505433 8.036962e-06
Qn3 -4.486118  0.1698748 -26.408377 1.291542e-06
Qc1 -4.861743  0.2124536 -22.883790 3.574865e-05
Qc3 -4.945224  0.1794899 -27.551544 2.755565e-04
Qc2 -4.463838  0.1564976 -28.523374 9.531807e-06
Mn3 -4.591568  0.2690656 -17.064866 6.469560e-06
Mn2 -4.466159  0.2330265 -19.165888 2.548156e-05
Mn1 -5.064581  0.2069979 -24.466818 4.902553e-06
Mc2 -4.560837  0.8205919  -5.557985 1.242261e-04
Mc3 -3.465154  1.2239549  -2.831113 4.548635e-03
Mc1 -5.142254  0.4475241 -11.490451 1.865741e-05
   c0 
     Estimate Std. Error    t value     Pr(>|t|)
Qn1  51.22339  12.621415  4.0584503 0.0117881705
Qn2  55.85812   9.998223  5.5868047 0.0051398910
Qn3  54.64957   9.814189  5.5684251 0.0006120973
Qc1  31.07523  18.988562  1.6365238 0.2228656247
Qc3  35.08849  15.994855  2.1937360 0.3930978982
Qc2  72.09421   6.924937 10.4108111 0.0005089520
Mn3  46.97175  18.133617  2.5903133 0.0092921369
Mn2  56.03854  13.055059  4.2924772 0.0079487725
Mn1  36.40792  19.079715  1.9082002 0.0606748414
Mc2  13.05797  78.005843  0.1673973 0.6806034305
Mc3  67.84888  33.737248  2.0110971 0.0150825859
Mc1 -20.39979  62.466416 -0.3265722 0.5367855446

Residual standard error: 1.79822 on 48 degrees of freedom

> cfm1 <- confint(fm1) # via profiling each % FIXME: only *one* message instead of one *each*
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
Waiting for profiling to be done...
> mat.class <- class(matrix(1)) # ("matrix", "array") for R >= 4.0.0;  ("matrix" in older R)
> i.ok <- which(vapply(cfm1,
+                 function(r) identical(class(r), mat.class), NA))
> stopifnot(length(i.ok) > 0, !anyNA(match(c(2:4, 6:9, 12), i.ok)))
> ## where as (some of) the others gave errors during profile re-fitting :
> str(cfm1[- i.ok])
List of 4
 $ Qn1: logi [1:2] NA NA
  ..- attr(*, "errMsg")= chr "NA/NaN/Inf in foreign function call (arg 1)"
 $ Qc3: logi [1:2] NA NA
  ..- attr(*, "errMsg")= chr "step factor 0.000488281 reduced below 'minFactor' of 0.000976562"
 $ Mc2: logi [1:2] NA NA
  ..- attr(*, "errMsg")= chr "NA/NaN/Inf in foreign function call (arg 1)"
 $ Mc3: logi [1:2] NA NA
  ..- attr(*, "errMsg")= chr "singular gradient"
> 
> 
> 
> cleanEx()
> nameEx("nlsList.selfStart")
> ### * nlsList.selfStart
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlsList.selfStart
> ### Title: nlsList Fit from a selfStart Function
> ### Aliases: nlsList.selfStart
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- nlsList(SSasympOff, CO2)
> summary(fm1)
Call:
  Model: uptake ~ SSasympOff(conc, Asym, lrc, c0) | Plant 
   Data: CO2 

Coefficients:
   Asym 
    Estimate Std. Error  t value     Pr(>|t|)
Qn1 38.13978  0.9911157 38.48167 1.991995e-06
Qn2 42.87169  1.0932085 39.21638 2.583951e-06
Qn3 44.22800  1.0241029 43.18706 1.809264e-07
Qc1 36.42873  1.1941583 30.50578 1.140081e-05
Qc3 40.68370  1.2480885 32.59681 1.424622e-04
Qc2 39.81950  1.0167249 39.16447 2.692304e-06
Mn3 28.48285  1.0624237 26.80932 1.066432e-06
Mn2 32.12827  1.0174819 31.57625 3.488780e-06
Mn1 34.08481  1.3400580 25.43532 4.199318e-06
Mc2 13.55520  1.0506456 12.90178 4.385958e-06
Mc3 18.53506  0.8363374 22.16218 1.461565e-06
Mc1 21.78723  1.4113332 15.43734 5.756890e-06
   lrc 
     Estimate Std. Error    t value     Pr(>|t|)
Qn1 -4.380647  0.2208027 -19.839647 2.789814e-05
Qn2 -4.665728  0.1581312 -29.505427 8.036968e-06
Qn3 -4.486118  0.1698748 -26.408376 1.291542e-06
Qc1 -4.861741  0.2124535 -22.883785 3.574868e-05
Qc3 -4.945218  0.1794898 -27.551534 2.755569e-04
Qc2 -4.463838  0.1564976 -28.523374 9.531808e-06
Mn3 -4.591566  0.2690656 -17.064855 6.469578e-06
Mn2 -4.466157  0.2330265 -19.165873 2.548164e-05
Mn1 -5.064579  0.2069978 -24.466818 4.902553e-06
Mc2 -4.560851  0.8205907  -5.558010 1.242239e-04
Mc3 -3.465158  1.2239475  -2.831133 4.548516e-03
Mc1 -5.142256  0.4475243 -11.490450 1.865741e-05
   c0 
     Estimate Std. Error    t value     Pr(>|t|)
Qn1  51.22324  12.621453  4.0584263 0.0117884093
Qn2  55.85816   9.998214  5.5868139 0.0051398604
Qn3  54.64958   9.814188  5.5684259 0.0006120970
Qc1  31.07538  18.988521  1.6365349 0.2228630364
Qc3  35.08889  15.994755  2.1937748 0.3930903207
Qc2  72.09422   6.924937 10.4108114 0.0005089519
Mn3  46.97188  18.133572  2.5903269 0.0092919672
Mn2  56.03863  13.055031  4.2924933 0.0079486676
Mn1  36.40805  19.079675  1.9082112 0.0606738847
Mc2  13.05675  78.006927  0.1673794 0.6806349052
Mc3  67.84877  33.737187  2.0110975 0.0150825747
Mc1 -20.39998  62.466523 -0.3265746 0.5367826137

Residual standard error: 1.79822 on 48 degrees of freedom

> 
> 
> 
> cleanEx()
> nameEx("pairs.compareFits")
> ### * pairs.compareFits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pairs.compareFits
> ### Title: Pairs Plot of compareFits Object
> ### Aliases: pairs.compareFits
> ### Keywords: models
> 
> ### ** Examples
> 
> example(compareFits) # cF12 <- compareFits(coef(lmList(Orthodont)), .. lme(*))

cmprFt> fm1 <- lmList(Orthodont)

cmprFt> fm2 <- lme(fm1)

cmprFt> (cF12 <- compareFits(coef(fm1), coef(fm2)))
, , (Intercept)

    coef(fm1) coef(fm2)
M16     16.95  16.57335
M05     13.65  15.58444
M02     14.85  16.03361
M11     20.05  17.65160
M07     14.95  16.15314
M08     19.75  17.62141
M03     16.00  16.58721
M12     13.25  15.76312
M13      2.80  12.63156
M14     19.10  17.66546
M09     14.40  16.31671
M15     13.50  16.22614
M06     18.95  17.97875
M04     24.70  19.76157
M01     17.30  17.81269
M10     21.25  19.41435
F10     13.55  14.47973
F09     18.10  16.47016
F06     17.00  16.14053
F01     17.25  16.27515
F05     19.60  17.27792
F07     16.95  16.57335
F02     14.20  15.74926
F08     21.45  18.01143
F03     14.40  15.98832
F04     19.65  17.83028
F11     18.95  17.97875

, , age

    coef(fm1) coef(fm2)
M16     0.550 0.5913314
M05     0.850 0.6857856
M02     0.775 0.6746931
M11     0.325 0.5413591
M07     0.800 0.6950853
M08     0.375 0.5654488
M03     0.750 0.6960376
M12     1.000 0.7747494
M13     1.950 1.0738543
M14     0.525 0.6460653
M09     0.975 0.7960939
M15     1.125 0.8683630
M06     0.675 0.7433764
M04     0.175 0.5943001
M01     0.950 0.8758698
M10     0.750 0.8713317
F10     0.450 0.4095945
F09     0.275 0.4421434
F06     0.375 0.4736281
F01     0.375 0.4819754
F05     0.275 0.4922274
F07     0.550 0.5913314
F02     0.800 0.6700432
F08     0.175 0.4857847
F03     0.850 0.7108276
F04     0.475 0.6303229
F11     0.675 0.7433764

> pairs(cF12)
> 
> 
> 
> cleanEx()
> nameEx("pairs.lmList")
> ### * pairs.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pairs.lmList
> ### Title: Pairs Plot of an lmList Object
> ### Aliases: pairs.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> 
> # scatter plot of coefficients by gender, identifying unusual subjects
> pairs(fm1, ~coef(.) | Sex, id = 0.1, adj = -0.5)
> 
> # scatter plot of estimated random effects -- "bivariate Gaussian (?)"
> pairs(fm1, ~ranef(.))
> 
> 
> 
> cleanEx()
> nameEx("pairs.lme")
> ### * pairs.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pairs.lme
> ### Title: Pairs Plot of an lme Object
> ### Aliases: pairs.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, Orthodont, random = ~ age | Subject)
> 
> # scatter plot of coefficients by gender, identifying unusual subjects
> pairs(fm1, ~coef(., augFrame = TRUE) | Sex, id = 0.1, adj = -0.5)    
> 
> # scatter plot of estimated random effects :
> pairs(fm1, ~ranef(.))
> 
> 
> 
> cleanEx()
> nameEx("pdBlocked")
> ### * pdBlocked
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdBlocked
> ### Title: Positive-Definite Block Diagonal Matrix
> ### Aliases: pdBlocked
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdBlocked(list(diag(1:2), diag(c(0.1, 0.2, 0.3))),
+                  nam = list(c("A","B"), c("a1", "a2", "a3")))
> pd1
Positive definite matrix structure of class pdBlocked representing
   A B  a1  a2  a3
A  1 0 0.0 0.0 0.0
B  0 2 0.0 0.0 0.0
a1 0 0 0.1 0.0 0.0
a2 0 0 0.0 0.2 0.0
a3 0 0 0.0 0.0 0.3
> 
> 
> 
> cleanEx()
> nameEx("pdCompSymm")
> ### * pdCompSymm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdCompSymm
> ### Title: Positive-Definite Matrix with Compound Symmetry Structure
> ### Aliases: pdCompSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdCompSymm(diag(3) + 1, nam = c("A","B","C"))
> pd1
Positive definite matrix structure of class pdCompSymm representing
  A B C
A 2 1 1
B 1 2 1
C 1 1 2
> 
> 
> 
> cleanEx()
> nameEx("pdConstruct")
> ### * pdConstruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdConstruct
> ### Title: Construct pdMat Objects
> ### Aliases: pdConstruct pdConstruct.pdCompSymm pdConstruct.pdDiag
> ###   pdConstruct.pdIdent pdConstruct.pdMat pdConstruct.pdNatural
> ###   pdConstruct.pdSymm pdConstruct.pdLogChol
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdSymm()
> pdConstruct(pd1, diag(1:4))
Positive definite matrix structure of class pdSymm representing
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    2    0    0
[3,]    0    0    3    0
[4,]    0    0    0    4
> 
> 
> 
> cleanEx()
> nameEx("pdConstruct.pdBlocked")
> ### * pdConstruct.pdBlocked
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdConstruct.pdBlocked
> ### Title: Construct pdBlocked Objects
> ### Aliases: pdConstruct.pdBlocked
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdBlocked(list(c("A","B"), c("a1", "a2", "a3")))
> pdConstruct(pd1, list(diag(1:2), diag(c(0.1, 0.2, 0.3))))
Positive definite matrix structure of class pdBlocked representing
   A B  a1  a2  a3
A  1 0 0.0 0.0 0.0
B  0 2 0.0 0.0 0.0
a1 0 0 0.1 0.0 0.0
a2 0 0 0.0 0.2 0.0
a3 0 0 0.0 0.0 0.3
> 
> 
> 
> cleanEx()
> nameEx("pdDiag")
> ### * pdDiag
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdDiag
> ### Title: Diagonal Positive-Definite Matrix
> ### Aliases: pdDiag
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdDiag(diag(1:3), nam = c("A","B","C"))
> pd1
Positive definite matrix structure of class pdDiag representing
  A B C
A 1 0 0
B 0 2 0
C 0 0 3
> 
> 
> 
> cleanEx()
> nameEx("pdFactor")
> ### * pdFactor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdFactor
> ### Title: Square-Root Factor of a Positive-Definite Matrix
> ### Aliases: pdFactor pdFactor.pdBlocked pdFactor.pdCompSymm
> ###   pdFactor.pdDiag pdFactor.pdIdent pdFactor.pdMat pdFactor.pdNatural
> ###   pdFactor.pdSymm pdFactor.pdLogChol
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdCompSymm(4 * diag(3) + 1)
> pdFactor(pd1)
[1]  1.5275252 -1.4142136 -0.8164966  1.5275252  1.4142136 -0.8164966  1.5275252
[8]  0.0000000  1.6329932
> 
> 
> 
> cleanEx()
> nameEx("pdFactor.reStruct")
> ### * pdFactor.reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdFactor.reStruct
> ### Title: Extract Square-Root Factor from Components of an reStruct Object
> ### Aliases: pdFactor.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(pdSymm(diag(3), ~age+Sex, data = Orthodont))
> pdFactor(rs1)
[1] 1 0 0 0 1 0 0 0 1
> 
> 
> 
> cleanEx()
> nameEx("pdIdent")
> ### * pdIdent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdIdent
> ### Title: Multiple of the Identity Positive-Definite Matrix
> ### Aliases: pdIdent
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdIdent(4 * diag(3), nam = c("A","B","C"))
> pd1
Positive definite matrix structure of class pdIdent representing
  A B C
A 4 0 0
B 0 4 0
C 0 0 4
> 
> 
> 
> cleanEx()
> nameEx("pdLogChol")
> ### * pdLogChol
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdLogChol
> ### Title: General Positive-Definite Matrix
> ### Aliases: pdLogChol
> ### Keywords: models
> 
> ### ** Examples
> 
> (pd1 <- pdLogChol(diag(1:3), nam = c("A","B","C")))
Positive definite matrix structure of class pdLogChol representing
  A B C
A 1 0 0
B 0 2 0
C 0 0 3
> 
> (pd4 <- pdLogChol(1:6))
Positive definite matrix structure of class pdLogChol representing
          [,1]     [,2]      [,3]
[1,]  7.389056 10.87313  13.59141
[2,] 10.873127 70.59815  64.33434
[3,] 13.591409 64.33434 464.42879
> (pd4c <- chol(pd4)) # -> upper-tri matrix with off-diagonals  4 5 6
         [,1]     [,2]     [,3]
[1,] 2.718282 4.000000  5.00000
[2,] 0.000000 7.389056  6.00000
[3,] 0.000000 0.000000 20.08554
> pd4c[upper.tri(pd4c)]
[1] 4 5 6
> log(diag(pd4c)) # 1 2 3
[1] 1 2 3
> 
> 
> 
> cleanEx()
> nameEx("pdMat")
> ### * pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdMat
> ### Title: Positive-Definite Matrix
> ### Aliases: pdMat plot.pdMat
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdMat(diag(1:4), pdClass = "pdDiag")
> pd1
Positive definite matrix structure of class pdDiag representing
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    2    0    0
[3,]    0    0    3    0
[4,]    0    0    0    4
> 
> 
> 
> cleanEx()
> nameEx("pdMatrix")
> ### * pdMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdMatrix
> ### Title: Extract Matrix or Square-Root Factor from a pdMat Object
> ### Aliases: pdMatrix pdMatrix.pdBlocked pdMatrix.pdCompSymm
> ###   pdMatrix.pdDiag pdMatrix.pdIdent pdMatrix.pdMat pdMatrix.pdSymm
> ###   pdMatrix.pdNatural
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdSymm(diag(1:4))
> pdMatrix(pd1)
     [,1] [,2] [,3] [,4]
[1,]    1    0    0    0
[2,]    0    2    0    0
[3,]    0    0    3    0
[4,]    0    0    0    4
> 
> 
> 
> cleanEx()
> nameEx("pdMatrix.reStruct")
> ### * pdMatrix.reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdMatrix.reStruct
> ### Title: Extract Matrix or Square-Root Factor from Components of an
> ###   reStruct Object
> ### Aliases: pdMatrix.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(pdSymm(diag(3), ~age+Sex, data = Orthodont))
> pdMatrix(rs1)
[[1]]
            (Intercept) age SexFemale
(Intercept)           1   0         0
age                   0   1         0
SexFemale             0   0         1

> 
> 
> 
> cleanEx()
> nameEx("pdNatural")
> ### * pdNatural
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdNatural
> ### Title: General Positive-Definite Matrix in Natural Parametrization
> ### Aliases: pdNatural
> ### Keywords: models
> 
> ### ** Examples
> 
> pdNatural(diag(1:3))
Positive definite matrix structure of class pdNatural representing
     [,1] [,2] [,3]
[1,]    1    0    0
[2,]    0    2    0
[3,]    0    0    3
> 
> 
> 
> cleanEx()
> nameEx("pdSymm")
> ### * pdSymm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pdSymm
> ### Title: General Positive-Definite Matrix
> ### Aliases: pdSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdSymm(diag(1:3), nam = c("A","B","C"))
> pd1
Positive definite matrix structure of class pdSymm representing
  A B C
A 1 0 0
B 0 2 0
C 0 0 3
> 
> 
> 
> cleanEx()
> nameEx("plot.ACF")
> ### * plot.ACF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.ACF
> ### Title: Plot an ACF Object
> ### Aliases: plot.ACF
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary)
> plot(ACF(fm1, maxLag = 10), alpha = 0.01)
> 
> 
> 
> cleanEx()
> nameEx("plot.Variogram")
> ### * plot.Variogram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.Variogram
> ### Title: Plot a Variogram Object
> ### Aliases: plot.Variogram
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary)
> plot(Variogram(fm1, form = ~ Time | Mare, maxDist = 0.7))
> 
> 
> 
> cleanEx()
> nameEx("plot.augPred")
> ### * plot.augPred
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.augPred
> ### Title: Plot an augPred Object
> ### Aliases: plot.augPred
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(Orthodont)
> plot(augPred(fm1, level = 0:1, length.out = 2))
> 
> 
> 
> cleanEx()
> nameEx("plot.compareFits")
> ### * plot.compareFits
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.compareFits
> ### Title: Plot a compareFits Object
> ### Aliases: plot.compareFits
> ### Keywords: models
> 
> ### ** Examples
> 
> example(compareFits) # cF12 <- compareFits(coef(lmList(Orthodont)), .. lme(*))

cmprFt> fm1 <- lmList(Orthodont)

cmprFt> fm2 <- lme(fm1)

cmprFt> (cF12 <- compareFits(coef(fm1), coef(fm2)))
, , (Intercept)

    coef(fm1) coef(fm2)
M16     16.95  16.57335
M05     13.65  15.58444
M02     14.85  16.03361
M11     20.05  17.65160
M07     14.95  16.15314
M08     19.75  17.62141
M03     16.00  16.58721
M12     13.25  15.76312
M13      2.80  12.63156
M14     19.10  17.66546
M09     14.40  16.31671
M15     13.50  16.22614
M06     18.95  17.97875
M04     24.70  19.76157
M01     17.30  17.81269
M10     21.25  19.41435
F10     13.55  14.47973
F09     18.10  16.47016
F06     17.00  16.14053
F01     17.25  16.27515
F05     19.60  17.27792
F07     16.95  16.57335
F02     14.20  15.74926
F08     21.45  18.01143
F03     14.40  15.98832
F04     19.65  17.83028
F11     18.95  17.97875

, , age

    coef(fm1) coef(fm2)
M16     0.550 0.5913314
M05     0.850 0.6857856
M02     0.775 0.6746931
M11     0.325 0.5413591
M07     0.800 0.6950853
M08     0.375 0.5654488
M03     0.750 0.6960376
M12     1.000 0.7747494
M13     1.950 1.0738543
M14     0.525 0.6460653
M09     0.975 0.7960939
M15     1.125 0.8683630
M06     0.675 0.7433764
M04     0.175 0.5943001
M01     0.950 0.8758698
M10     0.750 0.8713317
F10     0.450 0.4095945
F09     0.275 0.4421434
F06     0.375 0.4736281
F01     0.375 0.4819754
F05     0.275 0.4922274
F07     0.550 0.5913314
F02     0.800 0.6700432
F08     0.175 0.4857847
F03     0.850 0.7108276
F04     0.475 0.6303229
F11     0.675 0.7433764

> plot(cF12)
> 
> 
> 
> cleanEx()
> nameEx("plot.gls")
> ### * plot.gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.gls
> ### Title: Plot a gls Object
> ### Aliases: plot.gls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
+            correlation = corAR1(form = ~ 1 | Mare))
> # standardized residuals versus fitted values by Mare
> plot(fm1, resid(., type = "p") ~ fitted(.) | Mare, abline = 0)
> # box-plots of residuals by Mare
> plot(fm1, Mare ~ resid(.))
> # observed versus fitted values by Mare
> plot(fm1, follicles ~ fitted(.) | Mare, abline = c(0,1))
> 
> 
> 
> cleanEx()
> nameEx("plot.intervals.lmList")
> ### * plot.intervals.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.intervals.lmList
> ### Title: Plot lmList Confidence Intervals
> ### Aliases: plot.intervals.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> plot(intervals(fm1))
> 
> 
> 
> cleanEx()
> nameEx("plot.lmList")
> ### * plot.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.lmList
> ### Title: Plot an lmList Object
> ### Aliases: plot.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> # standardized residuals versus fitted values by gender
> plot(fm1, resid(., type = "pool") ~ fitted(.) | Sex, abline = 0, id = 0.05)
> # box-plots of residuals by Subject
> plot(fm1, Subject ~ resid(.))
> # observed versus fitted values by Subject
> plot(fm1, distance ~ fitted(.) | Subject, abline = c(0,1))
> 
> 
> 
> cleanEx()
> nameEx("plot.lme")
> ### * plot.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.lme
> ### Title: Plot an lme or nls object
> ### Aliases: plot.lme plot.nls
> ### Keywords: models hplot
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, Orthodont, random = ~ age | Subject)
> # standardized residuals versus fitted values by gender
> plot(fm1, resid(., type = "p") ~ fitted(.) | Sex, abline = 0)
> # box-plots of residuals by Subject
> plot(fm1, Subject ~ resid(.))
> # observed versus fitted values by Subject
> plot(fm1, distance ~ fitted(.) | Subject, abline = c(0,1))
> 
> 
> 
> cleanEx()
> nameEx("plot.nffGroupedData")
> ### * plot.nffGroupedData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.nffGroupedData
> ### Title: Plot an nffGroupedData Object
> ### Aliases: plot.nffGroupedData
> ### Keywords: models
> 
> ### ** Examples
> 
> plot(Machines)
> plot(Machines, inner = TRUE)
> 
> 
> 
> cleanEx()
> nameEx("plot.nfnGroupedData")
> ### * plot.nfnGroupedData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.nfnGroupedData
> ### Title: Plot an nfnGroupedData Object
> ### Aliases: plot.nfnGroupedData
> ### Keywords: models
> 
> ### ** Examples
> 
> # different panels per Subject
> plot(Orthodont)
> # different panels per gender
> plot(Orthodont, outer = TRUE)
> 
> 
> 
> cleanEx()
> nameEx("plot.nmGroupedData")
> ### * plot.nmGroupedData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.nmGroupedData
> ### Title: Plot an nmGroupedData Object
> ### Aliases: plot.nmGroupedData
> ### Keywords: models
> 
> ### ** Examples
> 
> # no collapsing, panels by Dog
> plot(Pixel, display = "Dog", inner = ~Side)
> # collapsing by Dog, preserving day
> plot(Pixel, collapse = "Dog", preserve = ~day)
> 
> 
> 
> cleanEx()
> nameEx("plot.ranef.lmList")
> ### * plot.ranef.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.ranef.lmList
> ### Title: Plot a ranef.lmList Object
> ### Aliases: plot.ranef.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> plot(ranef(fm1))
> fm1RE <- ranef(fm1, aug = TRUE)
> plot(fm1RE, form = ~ Sex)
> plot(fm1RE, form = age ~ Sex)
> 
> 
> 
> cleanEx()
> nameEx("plot.ranef.lme")
> ### * plot.ranef.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.ranef.lme
> ### Title: Plot a ranef.lme Object
> ### Aliases: plot.ranef.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, Orthodont, random = ~ age | Subject)
> plot(ranef(fm1))
> fm1RE <- ranef(fm1, aug = TRUE)
> plot(fm1RE, form = ~ Sex)
> plot(fm1RE, form = age ~ Sex) # "connected" boxplots
> 
> 
> 
> cleanEx()
> nameEx("pooledSD")
> ### * pooledSD
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pooledSD
> ### Title: Extract Pooled Standard Deviation
> ### Aliases: pooledSD
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(Orthodont)
> pooledSD(fm1)
[1] 1.31004
attr(,"df")
[1] 54
> 
> 
> 
> cleanEx()
> nameEx("predict.gls")
> ### * predict.gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.gls
> ### Title: Predictions from a gls Object
> ### Aliases: predict.gls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
+            correlation = corAR1(form = ~ 1 | Mare))
> newOvary <- data.frame(Time = c(-0.75, -0.5, 0, 0.5, 0.75))
> predict(fm1, newOvary)
[1]  9.441686 13.116003 11.316793 13.116003 14.991110
attr(,"label")
[1] "Predicted values"
> 
> 
> 
> cleanEx()
> nameEx("predict.gnls")
> ### * predict.gnls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.gnls
> ### Title: Predictions from a gnls Object
> ### Aliases: predict.gnls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gnls(weight ~ SSlogis(Time, Asym, xmid, scal), Soybean,
+             weights = varPower())
> newSoybean <- data.frame(Time = c(10,30,50,80,100))
> predict(fm1, newSoybean)
          1           2           3           4           5 
 0.07102023  0.93114602  7.61762570 16.93437696 17.32549701 
attr(,"label")
[1] "Predicted values (g)"
> 
> 
> 
> cleanEx()
> nameEx("predict.lmList")
> ### * predict.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.lmList
> ### Title: Predictions from an lmList Object
> ### Aliases: predict.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> predict(fm1, se.fit = TRUE)
    Subject   fit    se.fit
1       M16 21.35 1.0960578
2       M16 22.45 0.7175382
3       M16 23.55 0.7175382
4       M16 24.65 1.0960578
5       M05 20.45 1.0960578
6       M05 22.15 0.7175382
7       M05 23.85 0.7175382
8       M05 25.55 1.0960578
9       M02 21.05 1.0960578
10      M02 22.60 0.7175382
11      M02 24.15 0.7175382
12      M02 25.70 1.0960578
13      M11 22.65 1.0960578
14      M11 23.30 0.7175382
15      M11 23.95 0.7175382
16      M11 24.60 1.0960578
17      M07 21.35 1.0960578
18      M07 22.95 0.7175382
19      M07 24.55 0.7175382
20      M07 26.15 1.0960578
21      M08 22.75 1.0960578
22      M08 23.50 0.7175382
23      M08 24.25 0.7175382
24      M08 25.00 1.0960578
25      M03 22.00 1.0960578
26      M03 23.50 0.7175382
27      M03 25.00 0.7175382
28      M03 26.50 1.0960578
29      M12 21.25 1.0960578
30      M12 23.25 0.7175382
31      M12 25.25 0.7175382
32      M12 27.25 1.0960578
33      M13 18.40 1.0960578
34      M13 22.30 0.7175382
35      M13 26.20 0.7175382
36      M13 30.10 1.0960578
37      M14 23.30 1.0960578
38      M14 24.35 0.7175382
39      M14 25.40 0.7175382
40      M14 26.45 1.0960578
41      M09 22.20 1.0960578
42      M09 24.15 0.7175382
43      M09 26.10 0.7175382
44      M09 28.05 1.0960578
45      M15 22.50 1.0960578
46      M15 24.75 0.7175382
47      M15 27.00 0.7175382
48      M15 29.25 1.0960578
49      M06 24.35 1.0960578
50      M06 25.70 0.7175382
51      M06 27.05 0.7175382
52      M06 28.40 1.0960578
53      M04 26.10 1.0960578
54      M04 26.45 0.7175382
55      M04 26.80 0.7175382
56      M04 27.15 1.0960578
57      M01 24.90 1.0960578
58      M01 26.80 0.7175382
59      M01 28.70 0.7175382
60      M01 30.60 1.0960578
61      M10 27.25 1.0960578
62      M10 28.75 0.7175382
63      M10 30.25 0.7175382
64      M10 31.75 1.0960578
65      F10 17.15 1.0960578
66      F10 18.05 0.7175382
67      F10 18.95 0.7175382
68      F10 19.85 1.0960578
69      F09 20.30 1.0960578
70      F09 20.85 0.7175382
71      F09 21.40 0.7175382
72      F09 21.95 1.0960578
73      F06 20.00 1.0960578
74      F06 20.75 0.7175382
75      F06 21.50 0.7175382
76      F06 22.25 1.0960578
77      F01 20.25 1.0960578
78      F01 21.00 0.7175382
79      F01 21.75 0.7175382
80      F01 22.50 1.0960578
81      F05 21.80 1.0960578
82      F05 22.35 0.7175382
83      F05 22.90 0.7175382
84      F05 23.45 1.0960578
85      F07 21.35 1.0960578
86      F07 22.45 0.7175382
87      F07 23.55 0.7175382
88      F07 24.65 1.0960578
89      F02 20.60 1.0960578
90      F02 22.20 0.7175382
91      F02 23.80 0.7175382
92      F02 25.40 1.0960578
93      F08 22.85 1.0960578
94      F08 23.20 0.7175382
95      F08 23.55 0.7175382
96      F08 23.90 1.0960578
97      F03 21.20 1.0960578
98      F03 22.90 0.7175382
99      F03 24.60 0.7175382
100     F03 26.30 1.0960578
101     F04 23.45 1.0960578
102     F04 24.40 0.7175382
103     F04 25.35 0.7175382
104     F04 26.30 1.0960578
105     F11 24.35 1.0960578
106     F11 25.70 0.7175382
107     F11 27.05 0.7175382
108     F11 28.40 1.0960578
> 
> 
> 
> cleanEx()
> nameEx("predict.lme")
> ### * predict.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.lme
> ### Title: Predictions from an lme Object
> ### Aliases: predict.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, Orthodont, random = ~ age | Subject)
> newOrth <- data.frame(Sex = c("Male","Male","Female","Female","Male","Male"),
+                       age = c(15, 20, 10, 12, 2, 4),
+                       Subject = c("M01","M01","F30","F30","M04","M04"))
> ## The 'Orthodont' data has *no* 'F30', so predict  NA  at level 1 :
> predict(fm1, newOrth, level = 0:1)
  Subject predict.fixed predict.Subject
1     M01      26.66389        30.95074
2     M01      29.96481        35.33009
3     F30      23.36296              NA
4     F30      24.68333              NA
5     M04      18.08148        20.95016
6     M04      19.40185        22.13877
> 
> 
> 
> cleanEx()
> nameEx("predict.nlme")
> ### * predict.nlme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.nlme
> ### Title: Predictions from an nlme Object
> ### Aliases: predict.nlme
> ### Keywords: models
> 
> ### ** Examples
> 
> head(Loblolly) # groupedData  w/  'Seed' is grouping variable :
Grouped Data: height ~ age | Seed
   height age Seed
1    4.51   3  301
15  10.89   5  301
29  28.72  10  301
43  41.74  15  301
57  52.70  20  301
71  60.92  25  301
> ## Grouped Data: height ~ age | Seed
> ##    height age Seed
> ## 1    4.51   3  301
> ## 15  10.89   5  301
> ## ..  .....   .  ...
> 
> fm1 <- nlme(height ~ SSasymp(age, Asym, R0, lrc),  data = Loblolly,
+             fixed = Asym + R0 + lrc ~ 1,
+             random = Asym ~ 1, ## <---grouping--->  Asym ~ 1 | Seed
+             start = c(Asym = 103, R0 = -8.5, lrc = -3.3))
> fm1
Nonlinear mixed-effects model fit by maximum likelihood
  Model: height ~ SSasymp(age, Asym, R0, lrc) 
  Data: Loblolly 
  Log-likelihood: -114.7428
  Fixed: Asym + R0 + lrc ~ 1 
      Asym         R0        lrc 
101.449600  -8.627331  -3.233751 

Random effects:
 Formula: Asym ~ 1 | Seed
            Asym  Residual
StdDev: 3.650642 0.7188625

Number of Observations: 84
Number of Groups: 14 
> 
> age. <- seq(from = 2, to = 30, by = 2)
> newLL.301 <- data.frame(age = age., Seed = 301)
> newLL.329 <- data.frame(age = age., Seed = 329)
> (p301 <- predict(fm1, newLL.301, level = 0:1))
   Seed predict.fixed predict.Seed
1   301    -0.2843099   -0.1318218
2   301     7.4263714    7.7197901
3   301    14.5526398   14.9763077
4   301    21.1387895   21.6828346
5   301    27.2257576   27.8810562
6   301    32.8513783   33.6094982
7   301    38.0506184   38.9037665
8   301    42.8557944   43.7967683
9   301    47.2967734   48.3189165
10  301    51.4011589   52.4983192
11  301    55.1944622   56.3609540
12  301    58.7002611   59.9308295
13  301    61.9403462   63.2301347
14  301    64.9348567   66.2793769
15  301    67.7024054   69.0975089
> (p329 <- predict(fm1, newLL.329, level = 0:1))
   Seed predict.fixed predict.Seed
1   329    -0.2843099   -0.7061314
2   329     7.4263714    6.6146994
3   329    14.5526398   13.3806651
4   329    21.1387895   19.6338204
5   329    27.2257576   25.4130326
6   329    32.8513783   30.7542231
7   329    38.0506184   35.6905906
8   329    42.8557944   40.2528179
9   329    47.2967734   44.4692619
10  329    51.4011589   48.3661305
11  329    55.1944622   51.9676451
12  329    58.7002611   55.2961915
13  329    61.9403462   58.3724586
14  329    64.9348567   61.2155672
15  329    67.7024054   63.8431892
> ## Prediction are the same at level 0 :
> all.equal(p301[,"predict.fixed"],
+           p329[,"predict.fixed"])
[1] TRUE
> ## and differ by the 'Seed' effect at level 1 :
> p301[,"predict.Seed"] -
+ p329[,"predict.Seed"]
 [1] 0.5743096 1.1050907 1.5956426 2.0490142 2.4680236 2.8552752 3.2131759
 [8] 3.5439504 3.8496546 4.1321888 4.3933089 4.6346380 4.8576761 5.0638096
[15] 5.2543197
> 
> 
> 
> cleanEx()
> nameEx("print.summary.pdMat")
> ### * print.summary.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.summary.pdMat
> ### Title: Print a summary.pdMat Object
> ### Aliases: print.summary.pdMat
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdCompSymm(3 * diag(2) + 1, form = ~age + age^2,
+          data = Orthodont)
> print(summary(pd1), sigma = 1.2, resid = TRUE)
 Formula: ~age + age^2
 Structure: Compound Symmetry
            StdDev Corr
(Intercept) 2.4        
age         2.4    0.25
Residual    1.2        
> 
> 
> 
> cleanEx()
> nameEx("print.varFunc")
> ### * print.varFunc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.varFunc
> ### Title: Print a varFunc Object
> ### Aliases: print.varFunc print.varComb
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varPower(0.3, form = ~age)
> vf1 <- Initialize(vf1, Orthodont)
> print(vf1)
Variance function structure of class varPower representing
power 
  0.3 
> 
> 
> 
> cleanEx()
> nameEx("qqnorm.gls")
> ### * qqnorm.gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qqnorm.gls
> ### Title: Normal Plot of Residuals from a gls Object
> ### Aliases: qqnorm.gls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
+            correlation = corAR1(form = ~ 1 | Mare))
> qqnorm(fm1, abline = c(0,1))
> 
> 
> 
> cleanEx()
> nameEx("qqnorm.lme")
> ### * qqnorm.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qqnorm.lme
> ### Title: Normal Plot of Residuals or Random Effects from an lme Object
> ### Aliases: qqnorm.lm qqnorm.lme qqnorm.lmList qqnorm.nls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, Orthodont, random = ~ age | Subject)
> ## normal plot of standardized residuals by gender
> qqnorm(fm1, ~ resid(., type = "p") | Sex, abline = c(0, 1))
> ## normal plots of random effects
> qqnorm(fm1, ~ranef(.))
> 
> 
> 
> cleanEx()
> nameEx("random.effects")
> ### * random.effects
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: random.effects
> ### Title: Extract Random Effects
> ### Aliases: random.effects ranef print.ranef
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("ranef.lmList")
> ### * ranef.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ranef.lmList
> ### Title: Extract lmList Random Effects
> ### Aliases: random.effects.lmList ranef.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> ranef(fm1)
    (Intercept)         age
M16   0.1888889 -0.11018519
M05  -3.1111111  0.18981481
M02  -1.9111111  0.11481481
M11   3.2888889 -0.33518519
M07  -1.8111111  0.13981481
M08   2.9888889 -0.28518519
M03  -0.7611111  0.08981481
M12  -3.5111111  0.33981481
M13 -13.9611111  1.28981481
M14   2.3388889 -0.13518519
M09  -2.3611111  0.31481481
M15  -3.2611111  0.46481481
M06   2.1888889  0.01481481
M04   7.9388889 -0.48518519
M01   0.5388889  0.28981481
M10   4.4888889  0.08981481
F10  -3.2111111 -0.21018519
F09   1.3388889 -0.38518519
F06   0.2388889 -0.28518519
F01   0.4888889 -0.28518519
F05   2.8388889 -0.38518519
F07   0.1888889 -0.11018519
F02  -2.5611111  0.13981481
F08   4.6888889 -0.48518519
F03  -2.3611111  0.18981481
F04   2.8888889 -0.18518519
F11   2.1888889  0.01481481
> random.effects(fm1)              # same as above
    (Intercept)         age
M16   0.1888889 -0.11018519
M05  -3.1111111  0.18981481
M02  -1.9111111  0.11481481
M11   3.2888889 -0.33518519
M07  -1.8111111  0.13981481
M08   2.9888889 -0.28518519
M03  -0.7611111  0.08981481
M12  -3.5111111  0.33981481
M13 -13.9611111  1.28981481
M14   2.3388889 -0.13518519
M09  -2.3611111  0.31481481
M15  -3.2611111  0.46481481
M06   2.1888889  0.01481481
M04   7.9388889 -0.48518519
M01   0.5388889  0.28981481
M10   4.4888889  0.08981481
F10  -3.2111111 -0.21018519
F09   1.3388889 -0.38518519
F06   0.2388889 -0.28518519
F01   0.4888889 -0.28518519
F05   2.8388889 -0.38518519
F07   0.1888889 -0.11018519
F02  -2.5611111  0.13981481
F08   4.6888889 -0.48518519
F03  -2.3611111  0.18981481
F04   2.8888889 -0.18518519
F11   2.1888889  0.01481481
> 
> 
> 
> cleanEx()
> nameEx("ranef.lme")
> ### * ranef.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ranef.lme
> ### Title: Extract lme Random Effects
> ### Aliases: ranef.lme random.effects.lme print.ranef.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, Orthodont, random = ~ age | Subject)
> ranef(fm1)
    (Intercept)          age
M16  -0.1877570 -0.068853738
M05  -1.1766674  0.025600303
M02  -0.7275013  0.014507811
M11   0.8904899 -0.118825905
M07  -0.6079721  0.034900000
M08   0.8602971 -0.094736219
M03  -0.1739024  0.035852351
M12  -0.9979944  0.114564052
M13  -4.1295439  0.413668516
M14   0.9043445 -0.014119816
M09  -0.4443954  0.135908591
M15  -0.5349736  0.208177649
M06   1.2176432  0.083191278
M04   3.0004528 -0.065884778
M01   1.0515831  0.215684551
M10   2.6532362  0.211146609
F10  -2.2813818 -0.250590641
F09  -0.2909482 -0.218041702
F06  -0.6205850 -0.186557022
F01  -0.4859593 -0.178209676
F05   0.5168057 -0.167957628
F07  -0.1877570 -0.068853738
F02  -1.0118490  0.009857963
F08   1.2503194 -0.174400272
F03  -0.7727905  0.050642340
F04   1.0691629 -0.029862156
F11   1.2176432  0.083191278
> random.effects(fm1)             # same as above
    (Intercept)          age
M16  -0.1877570 -0.068853738
M05  -1.1766674  0.025600303
M02  -0.7275013  0.014507811
M11   0.8904899 -0.118825905
M07  -0.6079721  0.034900000
M08   0.8602971 -0.094736219
M03  -0.1739024  0.035852351
M12  -0.9979944  0.114564052
M13  -4.1295439  0.413668516
M14   0.9043445 -0.014119816
M09  -0.4443954  0.135908591
M15  -0.5349736  0.208177649
M06   1.2176432  0.083191278
M04   3.0004528 -0.065884778
M01   1.0515831  0.215684551
M10   2.6532362  0.211146609
F10  -2.2813818 -0.250590641
F09  -0.2909482 -0.218041702
F06  -0.6205850 -0.186557022
F01  -0.4859593 -0.178209676
F05   0.5168057 -0.167957628
F07  -0.1877570 -0.068853738
F02  -1.0118490  0.009857963
F08   1.2503194 -0.174400272
F03  -0.7727905  0.050642340
F04   1.0691629 -0.029862156
F11   1.2176432  0.083191278
> random.effects(fm1, augFrame = TRUE)
    (Intercept)          age distance    Sex
M16  -0.1877570 -0.068853738   23.000   Male
M05  -1.1766674  0.025600303   23.000   Male
M02  -0.7275013  0.014507811   23.375   Male
M11   0.8904899 -0.118825905   23.625   Male
M07  -0.6079721  0.034900000   23.750   Male
M08   0.8602971 -0.094736219   23.875   Male
M03  -0.1739024  0.035852351   24.250   Male
M12  -0.9979944  0.114564052   24.250   Male
M13  -4.1295439  0.413668516   24.250   Male
M14   0.9043445 -0.014119816   24.875   Male
M09  -0.4443954  0.135908591   25.125   Male
M15  -0.5349736  0.208177649   25.875   Male
M06   1.2176432  0.083191278   26.375   Male
M04   3.0004528 -0.065884778   26.625   Male
M01   1.0515831  0.215684551   27.750   Male
M10   2.6532362  0.211146609   29.500   Male
F10  -2.2813818 -0.250590641   18.500 Female
F09  -0.2909482 -0.218041702   21.125 Female
F06  -0.6205850 -0.186557022   21.125 Female
F01  -0.4859593 -0.178209676   21.375 Female
F05   0.5168057 -0.167957628   22.625 Female
F07  -0.1877570 -0.068853738   23.000 Female
F02  -1.0118490  0.009857963   23.000 Female
F08   1.2503194 -0.174400272   23.375 Female
F03  -0.7727905  0.050642340   23.750 Female
F04   1.0691629 -0.029862156   24.875 Female
F11   1.2176432  0.083191278   26.375 Female
> 
> 
> 
> cleanEx()
> nameEx("reStruct")
> ### * reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: reStruct
> ### Title: Random Effects Structure
> ### Aliases: reStruct [.reStruct print.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(list(Dog = ~day, Side = ~1), data = Pixel)
> rs1
Uninitialized random effects structure
> 
> 
> 
> cleanEx()
> nameEx("recalc")
> ### * recalc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: recalc
> ### Title: Recalculate Condensed Linear Model Object
> ### Aliases: recalc
> ### Keywords: models
> 
> ### ** Examples
> 
> ## see the method function documentation
> 
> 
> 
> cleanEx()
> nameEx("residuals.gls")
> ### * residuals.gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: residuals.gls
> ### Title: Extract gls Residuals
> ### Aliases: residuals.gls residuals.gnls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
+            correlation = corAR1(form = ~ 1 | Mare))
> residuals(fm1)
           1            2            3            4            5            6 
  6.27573063   2.04027463   6.86503938   4.68320654   2.42849305   0.04052024 
           7            8            9           10           11           12 
  2.46970493   4.68127816   3.65809863  10.40204413  11.93385973   4.29147301 
          13           14           15           16           17           18 
  6.52692900   4.70216334   0.88399710   4.13871134  -0.47331660   1.09749871 
          19           20           21           22           23           24 
  1.88592548   2.90910501   3.16515951   2.63334391   0.27573063  -0.95972537 
          25           26           27           28           29           30 
 -0.13495971   2.68320654  -0.57150013   1.04051908   6.46970779  -7.93241312 
          31           32           33           34           35           36 
 -7.11953759  -4.21825648  -4.31679346   5.49660997   0.14233223   3.55716553 
          37           38           39           40           41           42 
 -0.29949692  -2.44168598  -3.85548321  -2.50038324  -3.31325878  -6.21453989 
          43           44           45           46           47           48 
 -5.11600290  -6.92940633  -5.57512859  -8.98996189 -11.13329944  -9.99111038 
          49           50           51           52           53           54 
 -6.57731315  -2.93241312  -0.11953759  -2.21825648  -5.31679346  -3.50339003 
          55           56           57           58           59           60 
 -3.85766777  -4.44283447  -1.04725655  -2.21074789  -2.26648413  -5.31679346 
          61           62           63           64           65           66 
 -2.46458894  -3.80221972  -0.40146518  -0.30575152   0.47454816  -2.03675818 
          67           68           69           70           71           72 
  3.21573748   1.31304069   1.35296935   2.43956375   5.67180565   6.13289361 
          73           74           75           76           77           78 
  9.88122735   7.94407788   4.31463513   7.95274345   2.78925211   8.73351551 
          79           80           81           82           83           84 
  7.68320654   9.53541722   7.19777823  14.59853627  -4.72426937  -3.95972537 
          85           86           87           88           89           90 
 -5.13496062  -5.31679346  -3.57150695  -3.95947976  -8.53029507  -8.31872184 
          91           92           93           94           95           96 
 -8.34190137  -4.59795587  -4.06614027  -7.70852699  -6.47307100  -9.29783666 
          97           98           99          100          101          102 
 -7.11600290  -5.86128866  -8.47331660  -9.90250129  -9.11407452  -7.09089499 
         103          104          105          106          107          108 
 -3.83484049  -0.36665609  -5.72426937  -3.95972537  -2.13495971  -4.31679346 
         109          110          111          112          113          114 
 -3.57150013  -3.95948092   1.46970779  -3.72426937  -0.95972537  -0.13496062 
         115          116          117          118          119          120 
  5.68320654  -1.57150695   0.04052024  -6.53029507   2.68127816   3.65809863 
         121          122          123          124          125          126 
 -0.59795587  -6.06614027  -3.70852699  -7.47307100  -0.29783666   0.88399710 
         127          128          129          130          131          132 
 -1.86128866   0.52668340   2.09749871  -0.11407452  -2.09089499   3.16515951 
         133          134          135          136          137          138 
  4.63334391  -0.72426937  -3.95972537  -0.13495971  -3.31679346  -0.57150013 
         139          140          141          142          143          144 
 -4.95948092   4.46970779   2.27573063   4.04027463   0.86503938   5.68320654 
         145          146          147          148          149          150 
  4.42849305  -0.95947976  -1.53029507  -4.31872184  -0.34190137  -1.59795587 
         151          152          153          154          155          156 
 -2.06614027   2.29147301   2.52692900   0.70216334   0.88399710   0.13871134 
         157          158          159          160          161          162 
 -3.47331660   2.09749871   5.88592548   5.90910501   6.16515951   5.63334391 
         163          164          165          166          167          168 
  3.27573063   5.04027463   9.86504029  -1.31679346   0.42849987   1.04051908 
         169          170          171          172          173          174 
  2.46970779   4.06758688  -0.11953759   1.78174352   0.68320654   0.49660997 
         175          176          177          178          179          180 
 -1.85766777  -4.44283447  -1.29949692   0.55831402   1.14451679  -0.50038324 
         181          182          183          184          185          186 
  0.68674122  -2.21453989  -4.11600290  -1.92940633  -0.57512859   1.01003811 
         187          188          189          190          191          192 
 -2.13329944  -3.99111038  -1.57731315  -0.93241312  -2.11953759  -1.21825648 
         193          194          195          196          197          198 
 -3.31679346   3.49660997  -5.85766777  -2.44283447  -0.54229940  -3.82467368 
         199          200          201          202          203          204 
  2.93440483   3.68320654   1.37070166  -2.04996158   0.38173623  -3.36362444 
         205          206          207          208          209          210 
 -0.30339714  -1.44168598   0.23093283  -4.26322883  -2.89049697   1.39187678 
         211          212          213          214          215          216 
 -0.36720064  -1.11600290   1.19650152   6.61716559  10.18546741   5.93082808 
         217          218          219          220          221          222 
  5.87060078   9.00888962   5.33627081   5.83043247   4.45770060   7.17532686 
         223          224          225          226          227          228 
  7.93440428   7.68320654   1.37070674  -3.04996563  -1.61826377  -4.16956753 
         229          230          231          232          233          234 
  0.68918858  -0.32005381  -1.31679346  -3.42203874   2.25628953   0.63637556 
         235          236          237          238          239          240 
 -1.32762532   0.35994499   4.73677117   3.87801506  -0.11274182   5.88399710 
         241          242          243          244          245          246 
  0.98924180   1.31091411  -0.06917192   1.89482896  -0.79274136   1.83043247 
         247          248          249          250          251          252 
  1.68918858  -1.32005454  -1.31679346  -3.42203238  -5.74371145  -1.36362330 
         253          254          255          256          257          258 
 -2.72426937   3.04027463   2.86503938   0.68320654   0.42849305  -3.95947976 
         259          260          261          262          263          264 
  1.46970493   2.68127816   1.65809863   6.40204413   4.93385973   0.29147301 
         265          266          267          268          269          270 
 -4.47307100   1.70216334   6.88399710   8.13871134   8.52668340   6.09749871 
         271          272          273          274          275          276 
  5.88592548   7.90910501   7.16515951   7.63334391   3.27573063   4.04027463 
         277          278          279          280          281          282 
  4.86504029   5.68320654   3.42849987   2.04051908   1.46970779  -4.93241312 
         283          284          285          286          287          288 
 -5.11953759  -4.21825648  -3.31679346  -2.50339003  -3.85766777  -2.44283447 
         289          290          291          292          293          294 
 -1.29949692   0.55831402   0.14451679   3.49961676   1.68674122  -4.21453989 
         295          296          297          298          299          300 
 -5.11600290  -5.92940633  -5.57512859   1.01003811  -3.13329944  -4.99111038 
         301          302          303          304          305          306 
 -2.57731315  -1.93241312  -4.11953759  -6.21825648  -2.31679346  -3.50339003 
         307          308 
 -4.85766777  -4.44283447 
attr(,"std")
  [1] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
  [9] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
 [17] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
 [25] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
 [33] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
 [41] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
 [49] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
 [57] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
 [65] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
 [73] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
 [81] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
 [89] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
 [97] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[105] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[113] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[121] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[129] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[137] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[145] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[153] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[161] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[169] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[177] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[185] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[193] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[201] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[209] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[217] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[225] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[233] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[241] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[249] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[257] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[265] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[273] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[281] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[289] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[297] 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172 4.616172
[305] 4.616172 4.616172 4.616172 4.616172
attr(,"label")
[1] "Residuals"
> 
> 
> 
> cleanEx()
> nameEx("residuals.lmList")
> ### * residuals.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: residuals.lmList
> ### Title: Extract lmList Residuals
> ### Aliases: residuals.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> residuals(fm1)
          M01           M01           M01           M01           M02 
 1.100000e+00 -1.800000e+00  3.000000e-01  4.000000e-01  4.500000e-01 
          M02           M02           M02           M03           M03 
-1.000000e-01 -1.150000e+00  8.000000e-01  1.000000e+00 -1.000000e+00 
          M03           M03           M04           M04           M04 
-1.000000e+00  1.000000e+00 -6.000000e-01  1.050000e+00 -3.000000e-01 
          M04           M05           M05           M05           M05 
-1.500000e-01 -4.500000e-01  1.350000e+00 -1.350000e+00  4.500000e-01 
          M06           M06           M06           M06           M07 
 1.500000e-01 -2.000000e-01 -5.000000e-02  1.000000e-01  6.500000e-01 
          M07           M07           M07           M08           M08 
-9.500000e-01 -5.000000e-02  3.500000e-01  1.250000e+00 -2.000000e+00 
          M08           M08           M09           M09           M09 
 2.500000e-01  5.000000e-01  8.000000e-01 -3.650000e+00  4.900000e+00 
          M09           M10           M10           M10           M10 
-2.050000e+00  2.500000e-01 -7.500000e-01  7.500000e-01 -2.500000e-01 
          M11           M11           M11           M11           M12 
 3.500000e-01 -3.000000e-01 -4.500000e-01  4.000000e-01  2.500000e-01 
          M12           M12           M12           M13           M13 
 2.500000e-01 -1.250000e+00  7.500000e-01 -1.400000e+00  2.200000e+00 
          M13           M13           M14           M14           M14 
-2.000000e-01 -6.000000e-01 -8.000000e-01  1.150000e+00  1.000000e-01 
          M14           M15           M15           M15           M15 
-4.500000e-01  5.000000e-01 -2.500000e-01 -1.000000e+00  7.500000e-01 
          M16           M16           M16           M16           F01 
 6.500000e-01 -9.500000e-01 -5.000000e-02  3.500000e-01  7.500000e-01 
          F01           F01           F01           F02           F02 
-1.000000e+00 -2.500000e-01  5.000000e-01  4.000000e-01 -7.000000e-01 
          F02           F02           F03           F03           F03 
 2.000000e-01  1.000000e-01 -7.000000e-01  1.100000e+00 -1.000000e-01 
          F03           F04           F04           F04           F04 
-3.000000e-01  5.000000e-02  1.000000e-01 -3.500000e-01  2.000000e-01 
          F05           F05           F05           F05           F06 
-3.000000e-01  6.500000e-01 -4.000000e-01  5.000000e-02  5.551115e-17 
          F06           F06           F06           F07           F07 
 2.500000e-01 -5.000000e-01  2.500000e-01  1.500000e-01  5.000000e-02 
          F07           F07           F08           F08           F08 
-5.500000e-01  3.500000e-01  1.500000e-01 -2.000000e-01 -5.000000e-02 
          F08           F09           F09           F09           F09 
 1.000000e-01 -3.000000e-01  1.500000e-01  6.000000e-01 -4.500000e-01 
          F10           F10           F10           F10           F11 
-6.500000e-01  9.500000e-01  5.000000e-02 -3.500000e-01  1.500000e-01 
          F11           F11           F11 
-7.000000e-01  9.500000e-01 -4.000000e-01 
attr(,"label")
[1] "Residuals (mm)"
> 
> 
> 
> cleanEx()
> nameEx("residuals.lme")
> ### * residuals.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: residuals.lme
> ### Title: Extract lme Residuals
> ### Aliases: residuals.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age + Sex, data = Orthodont, random = ~ 1)
> head(residuals(fm1, level = 0:1))
       fixed    Subject
1  3.0118056  0.6076280
2  0.6914352 -1.7127424
3  3.3710648  0.9668872
4  4.0506944  1.6465169
5 -1.4881944 -0.1105197
6 -1.8085648 -0.4308900
> summary(residuals(fm1) /
+         residuals(fm1, type = "p")) # constant scaling factor 1.432
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.432   1.432   1.432   1.432   1.432   1.432 
> 
> 
> 
> cleanEx()
> nameEx("simulate.lme")
> ### * simulate.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulate.lme
> ### Title: Simulate Results from 'lme' Models
> ### Aliases: simulate.lme plot.simulate.lme print.simulate.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("solve.pdMat")
> ### * solve.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: solve.pdMat
> ### Title: Calculate Inverse of a Positive-Definite Matrix
> ### Aliases: solve.pdMat solve.pdBlocked solve.pdDiag solve.pdIdent
> ###   solve.pdLogChol solve.pdNatural solve.pdSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> pd1 <- pdCompSymm(3 * diag(3) + 1)
> solve(pd1)
Positive definite matrix structure of class pdCompSymm representing
            [,1]        [,2]        [,3]
[1,]  0.27777778 -0.05555556 -0.05555556
[2,] -0.05555556  0.27777778 -0.05555556
[3,] -0.05555556 -0.05555556  0.27777778
> 
> 
> 
> cleanEx()
> nameEx("solve.reStruct")
> ### * solve.reStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: solve.reStruct
> ### Title: Apply Solve to an reStruct Object
> ### Aliases: solve.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> rs1 <- reStruct(list(A = pdSymm(diag(1:3), form = ~Score),
+   B = pdDiag(2 * diag(4), form = ~Educ)))
> solve(rs1)
Random effects:
 Formula: ~Score | A
 Structure: General positive-definite
   StdDev    Corr   
V1 1.0000000 V1   V2
V2 0.7071068 0      
V3 0.5773503 0    0 

 Formula: ~Educ | B %in% A
 Structure: Diagonal
               V1        V2        V3        V4 Residual
StdDev: 0.7071068 0.7071068 0.7071068 0.7071068        1

> 
> 
> 
> cleanEx()
> nameEx("splitFormula")
> ### * splitFormula
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: splitFormula
> ### Title: Split a Formula
> ### Aliases: splitFormula
> ### Keywords: models
> 
> ### ** Examples
> 
> splitFormula(~ g1/g2/g3)
[[1]]
~g1
<environment: 0x562788d4b758>

[[2]]
~g2
<environment: 0x562788d4c8a0>

[[3]]
~g3
<environment: 0x562788d4a130>

> 
> 
> 
> cleanEx()
> nameEx("summary.corStruct")
> ### * summary.corStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.corStruct
> ### Title: Summarize a corStruct Object
> ### Aliases: summary.corStruct summary.corAR1 summary.corARMA
> ###   summary.corCAR1 summary.corCompSymm summary.corExp summary.corGaus
> ###   summary.corIdent summary.corLin summary.corNatural summary.corRatio
> ###   summary.corSpher summary.corSymm
> ### Keywords: models
> 
> ### ** Examples
> 
> cs1 <- corAR1(0.2)
> summary(cs1)
Correlation Structure: AR(1)
 Formula: ~1 
 Parameter estimate(s):
Phi 
0.2 
> 
> 
> 
> cleanEx()
> nameEx("summary.gls")
> ### * summary.gls
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.gls
> ### Title: Summarize a Generalized Least Squares 'gls' Object
> ### Aliases: summary.gls
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- gls(follicles ~ sin(2*pi*Time) + cos(2*pi*Time), Ovary,
+            correlation = corAR1(form = ~ 1 | Mare))
> summary(fm1)
Generalized least squares fit by REML
  Model: follicles ~ sin(2 * pi * Time) + cos(2 * pi * Time) 
  Data: Ovary 
       AIC      BIC    logLik
  1571.455 1590.056 -780.7273

Correlation Structure: AR(1)
 Formula: ~1 | Mare 
 Parameter estimate(s):
      Phi 
0.7532079 

Coefficients:
                       Value Std.Error   t-value p-value
(Intercept)        12.216398 0.6646437 18.380373  0.0000
sin(2 * pi * Time) -2.774712 0.6450478 -4.301561  0.0000
cos(2 * pi * Time) -0.899605 0.6975383 -1.289685  0.1981

 Correlation: 
                   (Intr) s(*p*T
sin(2 * pi * Time)  0.000       
cos(2 * pi * Time) -0.294  0.000

Standardized residuals:
        Min          Q1         Med          Q3         Max 
-2.41180365 -0.75405234 -0.02923628  0.63156880  3.16247697 

Residual standard error: 4.616172 
Degrees of freedom: 308 total; 305 residual
> coef(summary(fm1)) # "the matrix"
                        Value Std.Error   t-value      p-value
(Intercept)        12.2163982 0.6646437 18.380373 2.618737e-51
sin(2 * pi * Time) -2.7747122 0.6450478 -4.301561 2.286284e-05
cos(2 * pi * Time) -0.8996047 0.6975383 -1.289685 1.981371e-01
> 
> 
> 
> cleanEx()
> nameEx("summary.lmList")
> ### * summary.lmList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.lmList
> ### Title: Summarize an lmList Object
> ### Aliases: summary.lmList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lmList(distance ~ age | Subject, Orthodont)
> summary(fm1)
Call:
  Model: distance ~ age | Subject 
   Data: Orthodont 

Coefficients:
   (Intercept) 
    Estimate Std. Error   t value     Pr(>|t|)
M16    16.95   3.288173 5.1548379 3.695247e-06
M05    13.65   3.288173 4.1512411 1.181678e-04
M02    14.85   3.288173 4.5161854 3.458934e-05
M11    20.05   3.288173 6.0976106 1.188838e-07
M07    14.95   3.288173 4.5465974 3.116705e-05
M08    19.75   3.288173 6.0063745 1.665712e-07
M03    16.00   3.288173 4.8659237 1.028488e-05
M12    13.25   3.288173 4.0295930 1.762580e-04
M13     2.80   3.288173 0.8515366 3.982319e-01
M14    19.10   3.288173 5.8086964 3.449588e-07
M09    14.40   3.288173 4.3793313 5.509579e-05
M15    13.50   3.288173 4.1056231 1.373664e-04
M06    18.95   3.288173 5.7630783 4.078189e-07
M04    24.70   3.288173 7.5117696 6.081644e-10
M01    17.30   3.288173 5.2612799 2.523621e-06
M10    21.25   3.288173 6.4625549 3.065505e-08
F10    13.55   3.288173 4.1208291 1.306536e-04
F09    18.10   3.288173 5.5045761 1.047769e-06
F06    17.00   3.288173 5.1700439 3.499774e-06
F01    17.25   3.288173 5.2460739 2.665260e-06
F05    19.60   3.288173 5.9607565 1.971127e-07
F07    16.95   3.288173 5.1548379 3.695247e-06
F02    14.20   3.288173 4.3185072 6.763806e-05
F08    21.45   3.288173 6.5233789 2.443813e-08
F03    14.40   3.288173 4.3793313 5.509579e-05
F04    19.65   3.288173 5.9759625 1.863600e-07
F11    18.95   3.288173 5.7630783 4.078189e-07
   age 
    Estimate Std. Error   t value     Pr(>|t|)
M16    0.550  0.2929338 1.8775576 6.584707e-02
M05    0.850  0.2929338 2.9016799 5.361639e-03
M02    0.775  0.2929338 2.6456493 1.065760e-02
M11    0.325  0.2929338 1.1094659 2.721458e-01
M07    0.800  0.2929338 2.7309929 8.511442e-03
M08    0.375  0.2929338 1.2801529 2.059634e-01
M03    0.750  0.2929338 2.5603058 1.328807e-02
M12    1.000  0.2929338 3.4137411 1.222240e-03
M13    1.950  0.2929338 6.6567951 1.485652e-08
M14    0.525  0.2929338 1.7922141 7.870160e-02
M09    0.975  0.2929338 3.3283976 1.577941e-03
M15    1.125  0.2929338 3.8404587 3.247135e-04
M06    0.675  0.2929338 2.3042752 2.508117e-02
M04    0.175  0.2929338 0.5974047 5.527342e-01
M01    0.950  0.2929338 3.2430540 2.030113e-03
M10    0.750  0.2929338 2.5603058 1.328807e-02
F10    0.450  0.2929338 1.5361835 1.303325e-01
F09    0.275  0.2929338 0.9387788 3.520246e-01
F06    0.375  0.2929338 1.2801529 2.059634e-01
F01    0.375  0.2929338 1.2801529 2.059634e-01
F05    0.275  0.2929338 0.9387788 3.520246e-01
F07    0.550  0.2929338 1.8775576 6.584707e-02
F02    0.800  0.2929338 2.7309929 8.511442e-03
F08    0.175  0.2929338 0.5974047 5.527342e-01
F03    0.850  0.2929338 2.9016799 5.361639e-03
F04    0.475  0.2929338 1.6215270 1.107298e-01
F11    0.675  0.2929338 2.3042752 2.508117e-02

Residual standard error: 1.31004 on 54 degrees of freedom

> 
> 
> 
> cleanEx()
> nameEx("summary.lme")
> ### * summary.lme
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.lme
> ### Title: Summarize an lme Object
> ### Aliases: summary.lme print.summary.lme
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- lme(distance ~ age, Orthodont, random = ~ age | Subject)
> (s1 <- summary(fm1))
Linear mixed-effects model fit by REML
 Data: Orthodont 
       AIC      BIC    logLik
  454.6367 470.6173 -221.3183

Random effects:
 Formula: ~age | Subject
 Structure: General positive-definite, Log-Cholesky parametrization
            StdDev    Corr  
(Intercept) 2.3270341 (Intr)
age         0.2264278 -0.609
Residual    1.3100397       

Fixed effects: distance ~ age 
                Value Std.Error DF   t-value p-value
(Intercept) 16.761111 0.7752460 80 21.620377       0
age          0.660185 0.0712533 80  9.265333       0
 Correlation: 
    (Intr)
age -0.848

Standardized Within-Group Residuals:
         Min           Q1          Med           Q3          Max 
-3.223106028 -0.493761143  0.007316632  0.472151114  3.916033225 

Number of Observations: 108
Number of Groups: 27 
> ## Don't show: 
> stopifnot(is.matrix(coef(s1)))
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("summary.modelStruct")
> ### * summary.modelStruct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.modelStruct
> ### Title: Summarize a modelStruct Object
> ### Aliases: summary.modelStruct summary.reStruct
> ### Keywords: models
> 
> ### ** Examples
> 
> lms1 <- lmeStruct(reStruct = reStruct(pdDiag(diag(2), ~age)),
+    corStruct = corAR1(0.3))
> summary(lms1)
Random effects:
 Formula: ~age | 1
 Structure: Diagonal
        V1 V2 Residual
StdDev:  1  1        1

Correlation Structure: AR(1)
 Formula: ~1 
 Parameter estimate(s):
Phi 
0.3 
> 
> 
> 
> cleanEx()
> nameEx("summary.nlsList")
> ### * summary.nlsList
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.nlsList
> ### Title: Summarize an nlsList Object
> ### Aliases: summary.nlsList
> ### Keywords: models
> 
> ### ** Examples
> 
> fm1 <- nlsList(SSasymp, Loblolly)
> summary(fm1)
Call:
  Model: height ~ SSasymp(age, Asym, R0, lrc) | Seed 
   Data: Loblolly 

Coefficients:
   Asym 
     Estimate Std. Error   t value     Pr(>|t|)
329  94.12820   7.854473 11.984025 0.0015250903
327  94.94058   8.034073 11.817241 0.0012377237
325  89.88487   6.107469 14.717206 0.0006432969
307 110.69919  10.969922 10.091156 0.0025753994
331 111.00287  11.125081  9.977713 0.0032192119
311 109.98575  10.393098 10.582575 0.0032302621
315 101.05622   8.088408 12.493957 0.0006267587
321 127.13400  15.734953  8.079719 0.0041760501
319 101.08748   7.800912 12.958419 0.0009328591
301  95.66688   6.469242 14.787959 0.0004839491
323  95.55627   6.178278 15.466489 0.0004783920
309 113.51390  10.199357 11.129516 0.0006540778
303 105.71792   7.936191 13.320991 0.0006901480
305  99.17191   6.091461 16.280482 0.0006761877
   R0 
     Estimate Std. Error   t value    Pr(>|t|)
329 -8.250753   1.146068 -7.199181 0.006700134
327 -7.757495   1.143211 -6.785709 0.006226357
325 -8.759017   1.181264 -7.414952 0.004805581
307 -8.169431   1.108136 -7.372226 0.006382603
331 -8.462608   1.106725 -7.646532 0.006927323
311 -8.558543   1.113691 -7.684848 0.008098734
315 -8.443628   1.142368 -7.391340 0.002941994
321 -7.679356   1.075754 -7.138578 0.005963178
319 -8.502343   1.146942 -7.413052 0.004783021
301 -9.078241   1.172624 -7.741816 0.003259525
323 -9.665035   1.179503 -8.194157 0.003113070
309 -7.595622   1.115674 -6.808100 0.002782876
303 -8.906081   1.144754 -7.779906 0.003356654
305 -9.916654   1.181667 -8.392087 0.004722701
   lrc 
     Estimate Std. Error   t value     Pr(>|t|)
329 -3.217578  0.1295370 -24.83907 1.750358e-04
327 -3.229325  0.1313231 -24.59068 1.399840e-04
325 -3.086219  0.1120207 -27.55043 9.918120e-05
307 -3.390345  0.1439118 -23.55849 2.091688e-04
331 -3.397574  0.1447737 -23.46817 2.570655e-04
311 -3.362518  0.1383662 -24.30158 2.770780e-04
315 -3.232825  0.1237859 -26.11625 6.945353e-05
321 -3.575331  0.1692979 -21.11858 2.452645e-04
319 -3.214021  0.1204012 -26.69426 1.083870e-04
301 -3.116381  0.1099075 -28.35459 6.931135e-05
323 -3.092266  0.1058796 -29.20549 7.171926e-05
309 -3.352815  0.1334770 -25.11905 5.763078e-05
303 -3.222957  0.1165915 -27.64315 7.822383e-05
305 -3.084841  0.1011074 -30.51055 1.039483e-04

Residual standard error: 0.7003965 on 42 degrees of freedom

> 
> 
> 
> cleanEx()
> nameEx("summary.pdMat")
> ### * summary.pdMat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.pdMat
> ### Title: Summarize a pdMat Object
> ### Aliases: summary.pdMat summary.pdBlocked summary.pdCompSymm
> ###   summary.pdDiag summary.pdIdent summary.pdNatural summary.pdSymm
> ###   summary.pdLogChol
> ### Keywords: models
> 
> ### ** Examples
> 
> summary(pdSymm(diag(4)))
 Structure: General positive-definite
   StdDev Corr      
V1 1      V1   V2 V3
V2 1      0         
V3 1      0    0    
V4 1      0    0  0 
> 
> 
> 
> cleanEx()
> nameEx("summary.varFunc")
> ### * summary.varFunc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.varFunc
> ### Title: Summarize varFunc Object
> ### Aliases: summary.varFunc summary.varComb summary.varConstPower
> ###   summary.varExp summary.varFixed summary.varIdent summary.varPower
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varPower(0.3, form = ~age)
> vf1 <- Initialize(vf1, Orthodont)
> summary(vf1)
Variance function:
 Structure: Power of variance covariate
 Formula: ~age 
 Parameter estimates:
power 
  0.3 
> 
> 
> 
> cleanEx()
> nameEx("varComb")
> ### * varComb
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: varComb
> ### Title: Combination of Variance Functions
> ### Aliases: varComb
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varComb(varIdent(form = ~1|Sex), varPower())
> 
> 
> 
> cleanEx()
> nameEx("varConstPower")
> ### * varConstPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: varConstPower
> ### Title: Constant Plus Power Variance Function
> ### Aliases: varConstPower
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varConstPower(1.2, 0.2, form = ~age|Sex)
> 
> 
> 
> cleanEx()
> nameEx("varExp")
> ### * varExp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: varExp
> ### Title: Exponential Variance Function
> ### Aliases: varExp
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varExp(0.2, form = ~age|Sex)
> 
> 
> 
> cleanEx()
> nameEx("varFixed")
> ### * varFixed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: varFixed
> ### Title: Fixed Variance Function
> ### Aliases: varFixed
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varFixed(~age)
> 
> 
> 
> cleanEx()
> nameEx("varFunc")
> ### * varFunc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: varFunc
> ### Title: Variance Function Structure
> ### Aliases: varFunc
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varFunc(~age)
> 
> 
> 
> cleanEx()
> nameEx("varIdent")
> ### * varIdent
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: varIdent
> ### Title: Constant Variance Function
> ### Aliases: varIdent
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varIdent(c(Female = 0.5), form = ~ 1 | Sex)
> 
> 
> 
> cleanEx()
> nameEx("varPower")
> ### * varPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: varPower
> ### Title: Power Variance Function
> ### Aliases: varPower
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varPower(0.2, form = ~age|Sex)
> 
> 
> 
> cleanEx()
> nameEx("varWeights")
> ### * varWeights
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: varWeights
> ### Title: Extract Variance Function Weights
> ### Aliases: varWeights varWeights.varComb varWeights.varFunc
> ### Keywords: models
> 
> ### ** Examples
> 
> vf1 <- varPower(form=~age)
> vf1 <- Initialize(vf1, Orthodont)
> coef(vf1) <- 0.3
> varWeights(vf1)[1:10]
 [1] 0.5358867 0.5011872 0.4745103 0.4530661 0.5358867 0.5011872 0.4745103
 [8] 0.4530661 0.5358867 0.5011872
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  58.701 36.18 35.906 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
