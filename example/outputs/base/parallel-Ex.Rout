
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "parallel"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('parallel')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("RngStream")
> ### * RngStream
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: RNGstreams
> ### Title: Implementation of Pierre L'Ecuyer's RngStreams
> ### Aliases: nextRNGStream nextRNGSubStream clusterSetRNGStream
> ###   mc.reset.stream
> ### Keywords: distribution sysdata
> 
> ### ** Examples
> 
> RNGkind("L'Ecuyer-CMRG")
> set.seed(123)
> (s <- .Random.seed)
[1]      10407 1806547166 -983674937  643431772 1162448557 -959247990 -133913213
> ## do some work involving random numbers.
> nextRNGStream(s)
[1]       10407  1801422725 -2057975723  1156894209  1595475487   210384600
[7] -1655729657
> nextRNGSubStream(s)
[1]       10407   701401935  -355687987  1513178397  1735140456 -1584327974
[7]  -452417912
> 
> 
> 
> cleanEx()
> nameEx("children")
> ### * children
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcchildren
> ### Title: Low-level Functions for Management of Forked Processes
> ### Aliases: children readChild readChildren selectChildren sendChildStdin
> ###   sendMaster mckill
> ### Keywords: interface
> 
> ### ** Examples
> ## Not run: 
> ##D p  <- mcparallel(scan(n = 1, quiet = TRUE))
> ##D sendChildStdin(p, "17.4\n")
> ##D mccollect(p)[[1]]
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("clusterApply")
> ### * clusterApply
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterApply
> ### Title: Apply Operations using Clusters
> ### Aliases: clusterApply clusterApplyLB clusterCall clusterEvalQ
> ###   clusterExport clusterMap clusterSplit parApply parCapply parLapply
> ###   parRapply parSapply parLapplyLB parSapplyLB
> 
> ### ** Examples
> 
> 
> cleanEx()
> nameEx("detectCores")
> ### * detectCores
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: detectCores
> ### Title: Detect the Number of CPU Cores
> ### Aliases: detectCores
> 
> ### ** Examples
> 
> detectCores()
[1] 4
> detectCores(logical = FALSE)
[1] 4
> 
> 
> 
> cleanEx()
> nameEx("mcfork")
> ### * mcfork
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcfork
> ### Title: Fork a Copy of the Current R Process
> ### Aliases: mcfork mcexit
> ### Keywords: interface
> 
> ### ** Examples
> 
> 
> cleanEx()
> nameEx("mclapply")
> ### * mclapply
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mclapply
> ### Title: Parallel Versions of 'lapply' and 'mapply' using Forking
> ### Aliases: mclapply mcmapply mcMap
> ### Keywords: interface
> 
> ### ** Examples
> 
> 
> cleanEx()
> nameEx("mcparallel")
> ### * mcparallel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mcparallel
> ### Title: Evaluate an R Expression Asynchronously in a Separate Process
> ### Aliases: mccollect mcparallel
> ### Keywords: interface
> 
> ### ** Examples
> 
> p <- mcparallel(1:10)
> q <- mcparallel(1:20)
> # wait for both jobs to finish and collect all results
> res <- mccollect(list(p, q))
> 
> ## IGNORE_RDIFF_BEGIN
> ## reports process ids, so not reproducible
> p <- mcparallel(1:10)
> mccollect(p, wait = FALSE, 10) # will retrieve the result (since it's fast)
$`1466`
 [1]  1  2  3  4  5  6  7  8  9 10

> mccollect(p, wait = FALSE)     # will signal the job as terminating
Warning in selectChildren(jobs, timeout) :
  cannot wait for child 1466 as it does not exist
NULL
> mccollect(p, wait = FALSE)     # there is no longer such a job
Warning in selectChildren(jobs, timeout) :
  cannot wait for child 1466 as it does not exist
NULL
> ## IGNORE_RDIFF_END
> 
> ## Don't show: 
> set.seed(123, "L'Ecuyer"); mc.reset.stream()
> ## End(Don't show)
> # a naive parallel lapply can be created using mcparallel alone:
> jobs <- lapply(1:10, function(x) mcparallel(rnorm(x), name = x))
> mccollect(jobs)
$`1`
[1] -0.4094454

$`2`
[1] -0.4890608  0.4330424

$`3`
[1] -1.038866  1.574512  0.747082

$`4`
[1]  0.7613014  2.2994158  0.2002062 -0.2975786

$`5`
[1] -1.1488680  1.0644774  0.8791396 -0.1692537 -0.1012806

$`6`
[1]  0.14836653  0.43279556 -0.35691071 -0.02761709  0.21090550 -2.17389511

$`7`
[1]  0.2670713  0.9296685 -0.5291401  0.2836047  0.3435986  0.4877843  0.4819221

$`8`
[1]  0.36764919 -0.79251417  0.07705502  0.19320999  0.55602609 -1.90995676
[7]  1.21007078 -1.22764971

$`9`
[1] -0.1725950  1.1217942 -0.5825666 -0.9731069 -0.6959691 -0.9587487  0.7436966
[8] -0.3303662  0.4979673

$`10`
 [1] -0.6021753 -0.6793939  0.1818081 -0.9625097 -0.9990960 -1.0793282
 [7]  0.3247805  1.0635314  0.8807099 -0.8558186

> 
> 
> 
> cleanEx()
> nameEx("pvec")
> ### * pvec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pvec
> ### Title: Parallelize a Vector Map Function using Forking
> ### Aliases: pvec
> ### Keywords: interface
> 
> ### ** Examples
> 
> x <- pvec(1:1000, sqrt)
> stopifnot(all(x == sqrt(1:1000)))
> 
> 
> 
> cleanEx()
> nameEx("splitIndices")
> ### * splitIndices
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: splitIndices
> ### Title: Divide Tasks for Distribution in a Cluster
> ### Aliases: splitIndices
> ### Keywords: utility
> 
> ### ** Examples
> 
> splitIndices(20, 3)
[[1]]
[1] 1 2 3 4 5 6 7

[[2]]
[1]  8  9 10 11 12 13

[[3]]
[1] 14 15 16 17 18 19 20

> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.107 0.043 0.172 0.022 0.048 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
