
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## partly moved from ../man/smooth.spline.Rd , quite system-specific.
> if(!dev.interactive(TRUE)) pdf("smooth.spline-test.pdf")
> 
> ##-- artificial example
> y18 <- c(1:3, 5, 4, 7:3, 2*(2:5), rep(10, 4))
> ## "truly 64 bit platform" {have seen "x86-64" instead of "x86_64")
> (b.64 <- grepl("^x86.64", Sys.info()[["machine"]]) &&
+      .Machine$sizeof.pointer > 4)## "truly 64 bit platform"
[1] TRUE
> (Lb.64 <- b.64 && Sys.info()[["sysname"]] == "Linux" && .Machine$sizeof.pointer == 8)
[1] TRUE
> ## i386-Linux: Df ~= (even! > ) 18 : interpolating -- much smaller PRESS
> ## It is the too low 'low = -3' which "kills" the algo; low= -2.6 still ok
> ## On other platforms, e.g., x64, ends quite differently (and fine)
> ## typically with Df = 8.636
> (s2. <- smooth.spline(y18, cv = TRUE,
+                       control = list(trace=TRUE, tol = 1e-6,
+                                      low = if(b.64) -3 else -2)))
sbart (ratio =   3.5942194e-05) iterations; initial tol1 = 3.589564e-07 :
       spar             CV      b - a           e  Kind   NEW lspar         crit
 -------------------------------------------------------------------------------
-1.28115295            inf 4.5000e+00           0 GS -- 3.68346e-09      1.11272
-0.21884705     1.11271929 2.7812e+00      2.7812 GS -- 0.000203977     0.659278
 0.43769410    0.659277543 1.7188e+00      1.7188 GS --    0.174228      2.66235
 0.43769410    0.659277543 1.0623e+00      1.0623 FP PI 2.56393e-06     0.971201
 0.43769410    0.659277543 6.6884e-01     0.40576 FP GS  0.00268738      1.81965
 0.43769410    0.659277543 4.1807e-01     0.40576 FP GS 3.83344e-05      0.64684
 0.33720667    0.646840116 2.6308e-01    -0.26308 FP PI 7.78159e-05     0.606543
 0.37976608    0.606542704 1.0049e-01    -0.10049 FP PI 8.36361e-05     0.605561
 0.38410195    0.605560618 5.7928e-02    0.042559 FP PI 9.12005e-05     0.605286
 0.38930677    0.605285808 5.3592e-02   0.0043359 FP PI 8.94687e-05     0.605259
 0.38815436    0.605259398 5.2048e-03   0.0052048 FP PI 8.94135e-05     0.605259
 0.38811729    0.605259383 4.0524e-03  -0.0011524 FP PI 8.94247e-05     0.605259
 0.38812479    0.605259382 3.7069e-05 -3.7069e-05 FP PI 8.94242e-05     0.605259
 0.38812479    0.605259382 2.9915e-05  7.4943e-06 FP PI 8.94252e-05     0.605259
 0.38812479    0.605259382 6.8219e-07 -4.0082e-08  >>>  8.94252e-05     0.605259
Call:
smooth.spline(x = y18, cv = TRUE, control.spar = list(trace = TRUE, 
    tol = 1e-06, low = if (b.64) -3 else -2))

Smoothing Parameter  spar= 0.3881248  lambda= 8.94252e-05 (15 iterations)
Equivalent Degrees of Freedom (Df): 8.636023
Penalized Criterion (RSS): 3.488119
PRESS(l.o.o. CV): 0.6052594
> plot(y18)
> xx <- seq(1,length(y18), len=201)
> lines(predict(s2., xx), col = 4)
> mtext(deparse(s2.$call,200), side= 1, line= -1, cex= 0.8, col= 4)
> 
> (sdf8 <- smooth.spline(y18, df = 8, control=list(trace=TRUE)))# 11 iter.
sbart (ratio =   3.5942194e-05) iterations; initial tol1 = 3.334042e-05 :
       spar     (df0-df)^2      b - a           e  Kind   NEW lspar         crit
 -------------------------------------------------------------------------------
-0.35410197     99.9915098 3.0000e+00           0 GS -- 5.07753e-05      2.97655
 0.35410197     2.97654935 1.8541e+00      1.8541 FP GS   0.0737682      30.6098
 0.35410197     2.97654935 1.1459e+00      1.1459 FP PI 9.56917e-05     0.263677
 0.39219645    0.263677031 4.3769e-01     0.43769 FP PI 0.000405904      2.93065
 0.39219645    0.263677031 1.2496e-01    0.038094 FP GS 0.000166179     0.178429
 0.42537453    0.178428942 8.6861e-02    0.086861 FP PI 0.000130527  0.000705384
 0.41085824 0.000705384101 3.3178e-02    0.033178 FP PI 0.000129544   0.00019138
 0.41040405 0.000191379589 1.8662e-02   -0.014516 FP PI 0.000128396  1.41589e-06
 0.40986876 1.41588963e-06 1.8208e-02 -0.00045419 FP PI 0.000128485  4.20394e-10
 0.40991039 4.20394386e-10 5.3529e-04 -0.00053529 FP PI 0.000128556  8.39052e-07
 0.40991039 4.20394386e-10 7.4969e-05  4.1628e-05  >>>  0.000128556  4.20394e-10
Call:
smooth.spline(x = y18, df = 8, control.spar = list(trace = TRUE))

Smoothing Parameter  spar= 0.4099104  lambda= 0.0001285563 (11 iterations)
Equivalent Degrees of Freedom (Df): 7.999084
Penalized Criterion (RSS): 4.016055
GCV: 0.7227574
> sdf8$df - 8 # -0.0009159978
[1] -0.0009159978
> (sdf8. <- smooth.spline(y18, df = 8, control=list(tol = 1e-8)))# 14 iter.
Call:
smooth.spline(x = y18, df = 8, control.spar = list(tol = 1e-08))

Smoothing Parameter  spar= 0.4099111  lambda= 0.0001284865 (14 iterations)
Equivalent Degrees of Freedom (Df): 8
Penalized Criterion (RSS): 4.015164
GCV: 0.7227295
> 
> ## This gave error: "... spar 'way too large'" -- now sees in dpbfa() that it can't factorize
> ## --> and gives *warning* about too large spar only
> ## e <- try(smooth.spline(y18, spar = 50)) #>> error
> ## stopifnot(inherits(e, "try-error"))
> ss50 <- try(smooth.spline(y18, spar = 50)) #>> warning only (in R >= 3.4.0) -- FIXME ??
Error in smooth.spline(y18, spar = 50) : 
  NA lev[]; probably smoothing parameter 'spar' way too large!
>    e <- try(smooth.spline(y18, spar = -9)) #>> error : .. too small', not on 32-bit
Error in smooth.spline(y18, spar = -9) : 
  smoothing parameter value too small
> ## if(Lb.64) stopifnot(inherits(e, "try-error"))
> if(Lb.64) inherits(e, "try-error") else "not Linux 64-bit"
[1] TRUE
> ## I see (in 32 bit Windows),
> b.64 || inherits(ss50, "try-error")  # TRUE .. always?
[1] TRUE
> 
> ## "extreme" range of spar, i.e., 'lambda' directly  (" spar = c(lambda = *) "):
> ##  ---------------------  --> problem/bug for too large lambda
> e10 <- c(-20, -10, -7, -4:4, 7, 10)
> (lams <- setNames(10^e10, paste0("lambda = 10^", e10)))
lambda = 10^-20 lambda = 10^-10  lambda = 10^-7  lambda = 10^-4  lambda = 10^-3 
          1e-20           1e-10           1e-07           1e-04           1e-03 
 lambda = 10^-2  lambda = 10^-1   lambda = 10^0   lambda = 10^1   lambda = 10^2 
          1e-02           1e-01           1e+00           1e+01           1e+02 
  lambda = 10^3   lambda = 10^4   lambda = 10^7  lambda = 10^10 
          1e+03           1e+04           1e+07           1e+10 
> lamExp <- as.expression(lapply(e10, function(E)
+ 				substitute(lambda == 10^e, list(e = E))))
> sspl <- lapply(lams, function(LAM) try(smooth.spline(y18, lambda = LAM)))
> sspl
$`lambda = 10^-20`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 1e-20
Equivalent Degrees of Freedom (Df): 17.9797
Penalized Criterion (RSS): 3.75202e-29
GCV: 1.638358e-24

$`lambda = 10^-10`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 1e-10
Equivalent Degrees of Freedom (Df): 17.99989
Penalized Criterion (RSS): 9.618349e-10
GCV: 1.447754

$`lambda = 10^-7`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 1e-07
Equivalent Degrees of Freedom (Df): 17.89231
Penalized Criterion (RSS): 0.0009263607
GCV: 1.437775

$`lambda = 10^-4`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 1e-04
Equivalent Degrees of Freedom (Df): 8.43473
Penalized Criterion (RSS): 3.637606
GCV: 0.7156386

$`lambda = 10^-3`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 0.001
Equivalent Degrees of Freedom (Df): 5.23426
Penalized Criterion (RSS): 11.92284
GCV: 1.316922

$`lambda = 10^-2`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 0.01
Equivalent Degrees of Freedom (Df): 3.392756
Penalized Criterion (RSS): 30.24056
GCV: 2.55109

$`lambda = 10^-1`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 0.1
Equivalent Degrees of Freedom (Df): 2.374223
Penalized Criterion (RSS): 38.63155
GCV: 2.847943

$`lambda = 10^0`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 1
Equivalent Degrees of Freedom (Df): 2.048551
Penalized Criterion (RSS): 40.76116
GCV: 2.883492

$`lambda = 10^1`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 10
Equivalent Degrees of Freedom (Df): 2.005012
Penalized Criterion (RSS): 41.05381
GCV: 2.888405

$`lambda = 10^2`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 100
Equivalent Degrees of Freedom (Df): 2.000503
Penalized Criterion (RSS): 41.08432
GCV: 2.888923

$`lambda = 10^3`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 1000
Equivalent Degrees of Freedom (Df): 2.00005
Penalized Criterion (RSS): 41.08738
GCV: 2.888974

$`lambda = 10^4`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 10000
Equivalent Degrees of Freedom (Df): 2.000005
Penalized Criterion (RSS): 41.08769
GCV: 2.88898

$`lambda = 10^7`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 1e+07
Equivalent Degrees of Freedom (Df): 2.000072
Penalized Criterion (RSS): 41.08772
GCV: 2.889006

$`lambda = 10^10`
Call:
smooth.spline(x = y18, lambda = LAM)

Smoothing Parameter  spar= NA  lambda= 1e+10
Equivalent Degrees of Freedom (Df): 2.180394
Penalized Criterion (RSS): 59.22321
GCV: 4.259642

> ok <- vapply(sspl, class, "") == "smooth.spline"
> stopifnot(ok[e10 <= 7])
> ssok <- sspl[ok]
> ssGet  <- function(ch) t(sapply(ssok, `[` , ch))
> ssGet1 <- function(ch)   sapply(ssok, `[[`, ch)
> stopifnot(all.equal(ssGet1("crit"), ssGet1("cv.crit"), tol = 1e-10))# seeing rel.diff = 6.57e-12
> ## Interesting:  for really large lambda, solution "diverges" from the straight line
> ssGet(c("lambda", "df", "crit", "pen.crit"))
                lambda df       crit         pen.crit    
lambda = 10^-20 1e-20  17.9797  1.638358e-24 3.75202e-29 
lambda = 10^-10 1e-10  17.99989 1.447754     9.618349e-10
lambda = 10^-7  1e-07  17.89231 1.437775     0.0009263607
lambda = 10^-4  1e-04  8.43473  0.7156386    3.637606    
lambda = 10^-3  0.001  5.23426  1.316922     11.92284    
lambda = 10^-2  0.01   3.392756 2.55109      30.24056    
lambda = 10^-1  0.1    2.374223 2.847943     38.63155    
lambda = 10^0   1      2.048551 2.883492     40.76116    
lambda = 10^1   10     2.005012 2.888405     41.05381    
lambda = 10^2   100    2.000503 2.888923     41.08432    
lambda = 10^3   1000   2.00005  2.888974     41.08738    
lambda = 10^4   10000  2.000005 2.88898      41.08769    
lambda = 10^7   1e+07  2.000072 2.889006     41.08772    
lambda = 10^10  1e+10  2.180394 4.259642     59.22321    
> 
> plot(y18); lines(predict(s2., xx), lwd = 5, col = adjustcolor(4, 1/4))
> invisible(lapply(seq_along(ssok), function(i) lines(predict(ssok[[i]], xx), col=i)))
> i18 <- 1:18
> abline(lm(y18 ~ i18), col = adjustcolor('tomato',1/2), lwd = 5, lty = 3)
> ## --> lambda = 10^10 is clearly wrong: a *line* but not the L.S. one
> legend("topleft", lamExp[ok], ncol = 2, bty = "n", col = seq_along(ssok), lty=1)
> 
> ##--- Explore 'all.knots' and 'keep.stuff'
> 
> s2   <- smooth.spline(y18, cv = TRUE, keep.stuff=TRUE)
> 
> s2.7  <- smooth.spline(y18, cv = TRUE, keep.stuff=TRUE, nknots = 7)
> s2.11 <- smooth.spline(y18, cv = TRUE, keep.stuff=TRUE, nknots = 11)
> plot(y18)
> lines(predict(s2, xx), lwd = 5, col = adjustcolor(4, 1/4))
> lines(predict(s2.7,  xx), lwd = 3, col = adjustcolor("red", 1/4))
> lines(predict(s2.11, xx), lwd = 2, col = adjustcolor("forestgreen", 1/4))
> ## s2.11 is very close to 's2'
> 
> if(!requireNamespace("Matrix") && !interactive())
+     q("no")
Loading required namespace: Matrix
> 
> if(Lb.64 && interactive()) ## extra checks (from above), but _not_ part of R checks
+     stopifnot(inherits(e, "try-error"))
> ## in any case:
> rbind("s-9_err" = inherits(e, "try-error"),
+       "s+50_err"= inherits(ss50, "try-error"))
         [,1]
s-9_err  TRUE
s+50_err TRUE
> 
> 
> aux2Mat <- function(auxM) {
+     stopifnot(is.list(auxM),
+               identical(vapply(auxM, class, ""),
+                         setNames(rep("numeric", 4), c("XWy", "XWX", "Sigma", "R"))))
+     ## requireNamespace("Matrix")# want sparse matrices
+     nk <- length(XWy <- auxM[["XWy"]])
+     list(XWy = XWy,
+          XWX =  Matrix::bandSparse(nk, k= 0:3, diagonals= matrix(auxM[[ "XWX" ]], nk,4), symmetric=TRUE),
+          Sigma= Matrix::bandSparse(nk, k= 0:3, diagonals= matrix(auxM[["Sigma"]], nk,4), symmetric=TRUE))
+ }
> 
> ## "Prove" basic property :
> ##
> ##     \hat{\beta} =  (X'W X + \lambda \Sigma)^{-1} X'W y
> ##     ---------------------------------------------------
> ##
> chkB <- function(smspl, tol = 1e-10) {
+     stopifnot(inherits(smspl, "smooth.spline"))
+     if(!is.list(smspl$auxM))
+         stop("need result of  smooth.spline(., keep.stuff = TRUE)")
+     lM <- aux2Mat(smspl$auxM)
+     beta.hat <- solve(lM$XWX + smspl$lambda * lM$Sigma, lM$XWy)
+     all.equal(as.vector(beta.hat),
+               smspl$fit$coef, tolerance = tol)
+ }
> 
> stopifnot(chkB(s2))
> stopifnot(chkB(s2.7))
> stopifnot(chkB(s2.11))
> 
> lM <- aux2Mat(s2$auxM)
> A <- lM$XWX + s2$lambda * lM$Sigma
> R <- Matrix::chol(A)
> c. <- s2$fit$coef
> stopifnot(all.equal(c., as.vector( solve(A, lM$XWy))) )
> 
> ## c' Sigma c =
> pen <- as.vector(c. %*% lM$Sigma %*% c.)
> c(unscaled.penalty = pen,
+   scaled.penalty   = s2$lambda * pen)
unscaled.penalty   scaled.penalty 
    32994.321839         2.952336 
> 
> Sigma.tit <- quote(list(Sigma == Omega, "where"~~ Omega[list(j,k)] ==
+                                       integral({B[j]*second}(t)~{B[k]*second}(t)~dt)))
> Matrix::image(lM$XWX, main = quote({X*minute}*W*X))
> Matrix::image(lM$Sigma, main = Sigma.tit)
> Matrix::image(A, main = quote({X*minute}*W*X + lambda*Sigma))
> Matrix::image(R, main = quote(R == chol({X*minute}*W*X + lambda*Sigma)))
> 
> 
> ## Specifying  'all.knots' ourselves
> 
> ## 1) compatibly :
> s2.7.k  <- smooth.spline(y18, cv = TRUE, keep.stuff=TRUE,
+                          all.knots = s2.7$fit$knot[3+ 1:7])
> ii <- names(s2.7) != "call"
> stopifnot( all.equal(s2.7  [ii],
+                      s2.7.k[ii]))
> 
> ## 2) "free" but approximately in [0,1]
> s2.9f  <- smooth.spline(y18, cv = TRUE, keep.stuff=TRUE,
+                         all.knots = seq(0, 1, length.out = 9))
> lines(predict(s2.9f, xx), lwd = 2, lty=3, col = adjustcolor("tomato", 1/2))
> ## knots partly outside [0,1]  --- is that correct ? (see below)
> s2.7f  <- smooth.spline(y18, cv = TRUE, keep.stuff=TRUE,
+                         all.knots = c(-1,1,3,5,7,9,12)/10)
> 
> if(FALSE) { ## not allowed (currently)
+     ## knots partly *inside* [0,1] i.e. data outside knots
+     s2.5f  <- smooth.spline(y18, cv = TRUE, keep.stuff=TRUE, control=list(trace=TRUE),
+                             all.knots = c(1,3,5,7,9)/10)
+     ## ------ OOOPS!  Segmentation fault ... "in attrib.c" {when returning from .Fortran()}
+     lines(predict(s2.5f, xx), lwd = 2, lty=3, col = adjustcolor("brown", 1/2))
+ }
> ##' back-transform knots to "data-scale":
> dScaledKnots <- function(smsp, drop.ends=TRUE) {
+     stopifnot(inherits(smsp, "smooth.spline"))
+     sf <- smsp$fit
+     nk <- length(kk <- sf$knot)
+     stopifnot((nk <- length(kk <- sf$knot)) >= 7)
+     if(drop.ends) kk <- kk[4:(nk-3)]
+     sf$min + sf$range * kk
+ }
> pLines <- function(ss) {
+     abline(v = dScaledKnots(ss), lty=3, col=adjustcolor("black", 1/2))
+     abline(h = 0, v = range(ss$x), lty=4, lwd = 1.5, col="skyblue4")
+ }
> 
> ## The following shows the data boundaries are used even when the knots are outside:
> xe <- seq(-5, 25, length=256)
> ##
> plot(y18, xlim=range(xe), ylim = c(-4,10)+.5, xlab="x")
> lines(predict(s2.7f, xe), col=2, lwd = 2)
> pLines(s2.7f)
> 
> str(m2 <- predict(s2.7f, x=xe, deriv=2)) # \hat{m''}(x)
List of 2
 $ x: num [1:256] -5 -4.88 -4.76 -4.65 -4.53 ...
 $ y: num [1:256] 0 0 0 0 0 0 0 0 0 0 ...
> plot(m2, type="l", col=2, lwd = 2,
+      main = "m''(x) -- for  m(.) := smooth.spl(*, all.knots=c(..))",
+      sub = "(knots shown as vertical dotted lines)")
> pLines(s2.7f)
> 
> ## same phenomenon (data boundaries, ...):
> m1 <- predict(s2.7f, x=xe, deriv = 1) # \hat{m'}(x)
> plot(m1, type="l", col=2, lwd = 2,
+      main = "m'(x) -- for m(.) := smooth.spl(*, all.knots=c(..))",
+      sub = "(knots shown as vertical dotted lines)")
> pLines(s2.7f)
> 
