
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #  File src/library/stats/tests/ts-tests.R
> #  Part of the R package, https://www.R-project.org
> #
> #  This program is free software; you can redistribute it and/or modify
> #  it under the terms of the GNU General Public License as published by
> #  the Free Software Foundation; either version 2 of the License, or
> #  (at your option) any later version.
> #
> #  This program is distributed in the hope that it will be useful,
> #  but WITHOUT ANY WARRANTY; without even the implied warranty of
> #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
> #  GNU General Public License for more details.
> #
> #  A copy of the GNU General Public License is available at
> #  https://www.R-project.org/Licenses/
> 
> ## tests of time-series functionality
> 
> .proctime00 <- proc.time()
> library(stats)
> 
> pdf("ts-test.pdf")
> 
> ### ar
> ar(lh)

Call:
ar(x = lh)

Coefficients:
      1        2        3  
 0.6534  -0.0636  -0.2269  

Order selected 3  sigma^2 estimated as  0.1959
> ar(lh, method = "burg")

Call:
ar(x = lh, method = "burg")

Coefficients:
      1        2        3  
 0.6588  -0.0608  -0.2234  

Order selected 3  sigma^2 estimated as  0.1786
> ar(lh, method = "ols")

Call:
ar(x = lh, method = "ols")

Coefficients:
    1  
0.586  

Intercept: 0.006234 (0.06551) 

Order selected 1  sigma^2 estimated as  0.2016
> ar(lh, FALSE, 4) # fit ar(4)

Call:
ar(x = lh, aic = FALSE, order.max = 4)

Coefficients:
      1        2        3        4  
 0.6767  -0.0571  -0.2941   0.1028  

Order selected 4  sigma^2 estimated as  0.1983
> ar.ols(lh)

Call:
ar.ols(x = lh)

Coefficients:
    1  
0.586  

Intercept: 0.006234 (0.06551) 

Order selected 1  sigma^2 estimated as  0.2016
> ar.ols(lh, FALSE, 4) # fit ar(4) by OLS

Call:
ar.ols(x = lh, aic = FALSE, order.max = 4)

Coefficients:
      1        2        3        4  
 0.6761  -0.0571  -0.3001   0.0967  

Intercept: 0.0004346 (0.06642) 

Order selected 4  sigma^2 estimated as  0.1924
> 
> ar(LakeHuron)

Call:
ar(x = LakeHuron)

Coefficients:
      1        2  
 1.0538  -0.2668  

Order selected 2  sigma^2 estimated as  0.5075
> ar(LakeHuron, method = "burg")

Call:
ar(x = LakeHuron, method = "burg")

Coefficients:
      1        2  
 1.0449  -0.2456  

Order selected 2  sigma^2 estimated as  0.4789
> ar(LakeHuron, method = "ols")

Call:
ar(x = LakeHuron, method = "ols")

Coefficients:
      1        2  
 1.0217  -0.2376  

Intercept: -0.02382 (0.06878) 

Order selected 2  sigma^2 estimated as  0.454
> ar(LakeHuron, method = "mle")

Call:
ar(x = LakeHuron, method = "mle")

Coefficients:
      1        2  
 1.0437  -0.2496  

Order selected 2  sigma^2 estimated as  0.4788
> 
> ar(sunspot.year, method = "yw")

Call:
ar(x = sunspot.year, method = "yw")

Coefficients:
      1        2        3        4        5        6        7        8  
 1.1305  -0.3524  -0.1745   0.1403  -0.1358   0.0963  -0.0556   0.0076  
      9  
 0.1941  

Order selected 9  sigma^2 estimated as  267.5
> ar(sunspot.year, method = "burg")

Call:
ar(x = sunspot.year, method = "burg")

Coefficients:
      1        2        3        4        5        6        7        8  
 1.1692  -0.4193  -0.1669   0.1842  -0.1376   0.0507   0.0054  -0.0261  
      9  
 0.2179  

Order selected 9  sigma^2 estimated as  222.5
> ar(sunspot.year, method = "ols")

Call:
ar(x = sunspot.year, method = "ols")

Coefficients:
      1        2        3        4        5        6        7        8  
 1.1913  -0.4315  -0.1667   0.1821  -0.1331   0.0416   0.0057  -0.0291  
      9  
 0.2240  

Intercept: 0.6441 (0.8919) 

Order selected 9  sigma^2 estimated as  222.3
> ar(sunspot.year, method = "mle")

Call:
ar(x = sunspot.year, method = "mle")

Coefficients:
      1        2        3        4        5        6        7        8  
 1.1851  -0.4197  -0.1672   0.1823  -0.1325   0.0458   0.0067  -0.0287  
      9  
 0.2218  

Order selected 9  sigma^2 estimated as  221.9
> 
> 
> ### tests using presidents, contains missing values
> acf(presidents, na.action = na.pass)
> pacf(presidents, na.action = na.pass)
> ## graphs in example(acf) suggest order 1 or 3
> (fit1 <- arima(presidents, c(1, 0, 0)))

Call:
arima(x = presidents, order = c(1, 0, 0))

Coefficients:
         ar1  intercept
      0.8242    56.1505
s.e.  0.0555     4.6434

sigma^2 estimated as 85.47:  log likelihood = -416.89,  aic = 839.78
> tsdiag(fit1)
> (fit3 <- arima(presidents, c(3, 0, 0)))  # smaller AIC

Call:
arima(x = presidents, order = c(3, 0, 0))

Coefficients:
         ar1     ar2      ar3  intercept
      0.7496  0.2523  -0.1890    56.2223
s.e.  0.0936  0.1140   0.0946     4.2845

sigma^2 estimated as 81.12:  log likelihood = -414.08,  aic = 838.16
> tsdiag(fit3)
> 
> ## Short example for bug PR#15832:
> e <- rep(c(1.48e-6, 1.49e-6, 1.5e-6, 1.51e-6), c(2,3,9,7))
> stopifnot(abs(acf(e, plot=FALSE)$acf) <= 1)
> ## Failed for R <= 3.2.0
> 
> 
> 
> ### tests of arima:
> arima(USAccDeaths, order = c(0,1,1), seasonal = list(order=c(0,1,1)))

Call:
arima(x = USAccDeaths, order = c(0, 1, 1), seasonal = list(order = c(0, 1, 1)))

Coefficients:
          ma1     sma1
      -0.4303  -0.5528
s.e.   0.1228   0.1784

sigma^2 estimated as 99347:  log likelihood = -425.44,  aic = 856.88
> arima(USAccDeaths, order = c(0,1,1), seasonal = list(order=c(0,1,1)),
+       method = "CSS") # drops first 13 observations.

Call:
arima(x = USAccDeaths, order = c(0, 1, 1), seasonal = list(order = c(0, 1, 1)), 
    method = "CSS")

Coefficients:
          ma1     sma1
      -0.3732  -0.4549
s.e.   0.1366   0.1436

sigma^2 estimated as 110330:  part log likelihood = -426.25
> 
> ## test fitting with NAs
> tmp <- LakeHuron
> trend <- time(LakeHuron) - 1920
> tmp[c(17, 45, 96)] <- NA
> arima(tmp, order=c(2,0,0), xreg=trend)

Call:
arima(x = tmp, order = c(2, 0, 0), xreg = trend)

Coefficients:
         ar1      ar2  intercept    trend
      1.0127  -0.2968   579.1099  -0.0214
s.e.  0.0990   0.1013     0.2398   0.0082

sigma^2 estimated as 0.4592:  log likelihood = -99.52,  aic = 209.04
> arima(tmp, order=c(1,1,1), xreg=trend)

Call:
arima(x = tmp, order = c(1, 1, 1), xreg = trend)

Coefficients:
          ar1     ma1    trend
      -0.4884  0.7027  -0.0008
s.e.   0.3994  0.3554   0.0846

sigma^2 estimated as 0.5315:  log likelihood = -105.22,  aic = 218.44
> trend[c(20, 67)] <- NA
> arima(tmp, order=c(2,0,0), xreg=trend)

Call:
arima(x = tmp, order = c(2, 0, 0), xreg = trend)

Coefficients:
         ar1      ar2  intercept    trend
      1.0039  -0.2797   579.1114  -0.0209
s.e.  0.1009   0.1036     0.2461   0.0084

sigma^2 estimated as 0.4563:  log likelihood = -97.88,  aic = 205.75
> 
> ## tests of prediction
> predict(arima(lh, order=c(1,0,1)), n.ahead=5)
$pred
Time Series:
Start = 49 
End = 53 
Frequency = 1 
[1] 2.679611 2.531951 2.465179 2.434985 2.421331

$se
Time Series:
Start = 49 
End = 53 
Frequency = 1 
[1] 0.4385341 0.5231218 0.5387858 0.5419332 0.5425745

> predict(arima(lh, order=c(1,1,0)), n.ahead=5)
$pred
Time Series:
Start = 49 
End = 53 
Frequency = 1 
[1] 2.904039 2.903875 2.903882 2.903882 2.903882

$se
Time Series:
Start = 49 
End = 53 
Frequency = 1 
[1] 0.5025424 0.6964990 0.8476226 0.9755948 1.0886266

> predict(arima(lh, order=c(0,2,1)), n.ahead=5)
$pred
Time Series:
Start = 49 
End = 53 
Frequency = 1 
[1] 2.910638 2.921277 2.931915 2.942554 2.953192

$se
Time Series:
Start = 49 
End = 53 
Frequency = 1 
[1] 0.5136728 0.7339711 0.9080537 1.0589635 1.1955083

> 
> ## test of init
> arima(lh, order = c(1,0,1), init = c(0.5, 0.5, NA))

Call:
arima(x = lh, order = c(1, 0, 1), init = c(0.5, 0.5, NA))

Coefficients:
         ar1     ma1  intercept
      0.4522  0.1982     2.4101
s.e.  0.1769  0.1705     0.1358

sigma^2 estimated as 0.1923:  log likelihood = -28.76,  aic = 65.52
> arima(lh, order = c(1,0,1), init = c(0.5, 2, NA))

Call:
arima(x = lh, order = c(1, 0, 1), init = c(0.5, 2, NA))

Coefficients:
         ar1     ma1  intercept
      0.4522  0.1982     2.4101
s.e.  0.1769  0.1705     0.1358

sigma^2 estimated as 0.1923:  log likelihood = -28.76,  aic = 65.52
> try(arima(lh, order = c(1,0,1), init = c(2, NA, NA)))

Call:
arima(x = lh, order = c(1, 0, 1), init = c(2, NA, NA))

Coefficients:
         ar1     ma1  intercept
      0.4522  0.1982     2.4101
s.e.  0.1769  0.1705     0.1358

sigma^2 estimated as 0.1923:  log likelihood = -28.76,  aic = 65.52
> 
> ## test of fixed
> arima(lh, order = c(1,0,1), fixed = c(0.5, NA, NA), trans = FALSE)

Call:
arima(x = lh, order = c(1, 0, 1), transform.pars = FALSE, fixed = c(0.5, NA, 
    NA))

Coefficients:
      ar1     ma1  intercept
      0.5  0.1661     2.4114
s.e.  0.0  0.1264     0.1443

sigma^2 estimated as 0.1925:  log likelihood = -28.8,  aic = 63.6
> trend <- time(LakeHuron) - 1920
> arima(LakeHuron, order=c(2,0,0), xreg=trend)

Call:
arima(x = LakeHuron, order = c(2, 0, 0), xreg = trend)

Coefficients:
         ar1      ar2  intercept    trend
      1.0048  -0.2913   579.0993  -0.0216
s.e.  0.0976   0.1004     0.2370   0.0081

sigma^2 estimated as 0.4566:  log likelihood = -101.2,  aic = 212.4
> arima(x = LakeHuron, order = c(2, 0, 0), xreg = trend,
+       fixed = c(NA, NA, 580, -0.02))

Call:
arima(x = LakeHuron, order = c(2, 0, 0), xreg = trend, fixed = c(NA, NA, 580, 
    -0.02))

Coefficients:
         ar1      ar2  intercept  trend
      1.0517  -0.2133        580  -0.02
s.e.  0.0997   0.1000          0   0.00

sigma^2 estimated as 0.4925:  log likelihood = -105.09,  aic = 216.18
> arima(x = LakeHuron, order = c(2, 0, 0), xreg = trend,
+       fixed = c(NA, NA, 580, 0))

Call:
arima(x = LakeHuron, order = c(2, 0, 0), xreg = trend, fixed = c(NA, NA, 580, 
    0))

Coefficients:
         ar1      ar2  intercept  trend
      1.0699  -0.1985        580      0
s.e.  0.0998   0.1003          0      0

sigma^2 estimated as 0.5016:  log likelihood = -106.08,  aic = 218.16
> 
> 
> ### model selection from WWWusage
> aics <- matrix(, 6, 6, dimnames=list(p=0:5, q=0:5))
> for(q in 1:5) aics[1, 1+q] <- arima(WWWusage, c(0,1,q),
+     optim.control = list(maxit = 500))$aic
> for(p in 1:5)
+    for(q in 0:5) aics[1+p, 1+q] <- arima(WWWusage, c(p,1,q),
+        optim.control = list(maxit = 500))$aic
Warning messages:
1: In log(s2) : NaNs produced
2: In log(s2) : NaNs produced
> round(aics - min(aics, na.rm=TRUE), 2)
   q
p       0     1    2     3    4    5
  0    NA 38.67 8.74  9.13 8.24 7.72
  1 18.10  3.16 5.11  3.44 3.96 5.14
  2 11.04  5.15 6.22  4.63 2.10 6.95
  3  0.85  2.80 4.48  3.27 3.62 5.29
  4  2.79  4.82 5.04  7.94 4.26 6.99
  5  4.72  6.50 2.40 10.50 0.00 1.63
> 
> 
> 
> ### nottem
> nott <- window(nottem, end=c(1936,12))
> fit <- arima(nott,order=c(1,0,0), list(order=c(2,1,0), period=12))
> nott.fore <- predict(fit, n.ahead=36)
> ts.plot(nott, nott.fore$pred, nott.fore$pred+2*nott.fore$se,
+         nott.fore$pred-2*nott.fore$se, gpars=list(col=c(1,1,4,4)))
> 
> 
> ### StructTS
> (fit <- StructTS(log10(UKgas), type = "BSM"))

Call:
StructTS(x = log10(UKgas), type = "BSM")

Variances:
    level      slope       seas    epsilon  
0.000e+00  1.733e-05  7.137e-04  3.678e-04  
> (fit <- StructTS(log10(UKgas), type = "BSM", fixed=c(0, NA, NA, NA)))

Call:
StructTS(x = log10(UKgas), type = "BSM", fixed = c(0, NA, NA, NA))

Variances:
    level      slope       seas    epsilon  
0.000e+00  1.733e-05  7.137e-04  3.680e-04  
> (fit <- StructTS(log10(UKgas), type = "BSM", fixed=c(NA, 0, NA, NA)))

Call:
StructTS(x = log10(UKgas), type = "BSM", fixed = c(NA, 0, NA, NA))

Variances:
    level      slope       seas    epsilon  
0.0004205  0.0000000  0.0010076  0.0000000  
> (fit <- StructTS(log10(UKgas), type = "BSM", fixed=c(NA, NA, NA, 0)))

Call:
StructTS(x = log10(UKgas), type = "BSM", fixed = c(NA, NA, NA, 0))

Variances:
    level      slope       seas    epsilon  
1.566e-04  1.124e-05  9.437e-04  0.000e+00  
> 
> ### from AirPassengers
> ## The classic `airline model', by full ML
> (fit <- arima(log10(AirPassengers), c(0, 1, 1),
+               seasonal = list(order=c(0, 1 ,1), period=12)))

Call:
arima(x = log10(AirPassengers), order = c(0, 1, 1), seasonal = list(order = c(0, 
    1, 1), period = 12))

Coefficients:
          ma1     sma1
      -0.4018  -0.5569
s.e.   0.0896   0.0731

sigma^2 estimated as 0.0002543:  log likelihood = 353.96,  aic = -701.92
> update(fit, method = "CSS")

Call:
arima(x = log10(AirPassengers), order = c(0, 1, 1), seasonal = list(order = c(0, 
    1, 1), period = 12), method = "CSS")

Coefficients:
          ma1     sma1
      -0.3772  -0.5724
s.e.   0.0883   0.0704

sigma^2 estimated as 0.0002619:  part log likelihood = 354.32
> update(fit, x=window(log10(AirPassengers), start = 1954))

Call:
arima(x = window(log10(AirPassengers), start = 1954), order = c(0, 1, 1), seasonal = list(order = c(0, 
    1, 1), period = 12))

Coefficients:
          ma1     sma1
      -0.4797  -0.4460
s.e.   0.1000   0.1514

sigma^2 estimated as 0.0001603:  log likelihood = 208.02,  aic = -410.04
> pred <- predict(fit, n.ahead = 24)
> tl <- pred$pred - 1.96 * pred$se
> tu <- pred$pred + 1.96 * pred$se
> ts.plot(AirPassengers, 10^tl, 10^tu, log = "y", lty = c(1,2,2))
> 
> ## full ML fit is the same if the series is reversed, CSS fit is not
> ap0 <- rev(log10(AirPassengers))
> attributes(ap0) <- attributes(AirPassengers)
> fr1 <- arima(ap0, c(0, 1, 1), seasonal = list(order=c(0, 1 ,1), period=12))
> fr2 <- arima(ap0, c(0, 1, 1), seasonal = list(order=c(0, 1 ,1), period=12),
+              method = "CSS")
> i <- c("coef", "sigma2", "var.coef")
> stopifnot(all.equal(fr1[i], fit[i], tol=4e-4))# 64b: 9e-5 is ok
> 
> ## Structural Time Series
> ap <- log10(AirPassengers) - 2
> (fit <- StructTS(ap, type= "BSM"))

Call:
StructTS(x = ap, type = "BSM")

Variances:
    level      slope       seas    epsilon  
0.0001456  0.0000000  0.0002635  0.0000000  
> par(mfrow=c(1,2))
> plot(cbind(ap, fitted(fit)), plot.type = "single")
> plot(cbind(ap, tsSmooth(fit)), plot.type = "single")
> 
> ## PR14925
> a <- ts(matrix(1:36, 12), start = 2000, freq = 12)
> b <- ts(matrix(1:48, 16), start = c(1999,9), freq = 12)
> window(a, start = c(2000,6)) <- window(b, start = c(2000,6), end = c(2000,12))
> ## failed in R < 2.15.1
> 
> cat('Time elapsed: ', proc.time() - .proctime00,'\n')
Time elapsed:  7.112 5.792 3.789 0 0 
> 
