
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "dplyr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('dplyr')
Warning: package ‘dplyr’ was built under R version 4.0.5

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("across")
> ### * across
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: across
> ### Title: Apply a function (or functions) across multiple columns
> ### Aliases: across if_any if_all
> 
> ### ** Examples
> 
> # across() -----------------------------------------------------------------
> # Different ways to select the same set of columns
> # See <https://tidyselect.r-lib.org/articles/syntax.html> for details
> iris %>%
+   as_tibble() %>%
+   mutate(across(c(Sepal.Length, Sepal.Width), round))
# A tibble: 150 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1            5           4          1.4         0.2 setosa 
 2            5           3          1.4         0.2 setosa 
 3            5           3          1.3         0.2 setosa 
 4            5           3          1.5         0.2 setosa 
 5            5           4          1.4         0.2 setosa 
 6            5           4          1.7         0.4 setosa 
 7            5           3          1.4         0.3 setosa 
 8            5           3          1.5         0.2 setosa 
 9            4           3          1.4         0.2 setosa 
10            5           3          1.5         0.1 setosa 
# … with 140 more rows
> iris %>%
+   as_tibble() %>%
+   mutate(across(c(1, 2), round))
# A tibble: 150 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1            5           4          1.4         0.2 setosa 
 2            5           3          1.4         0.2 setosa 
 3            5           3          1.3         0.2 setosa 
 4            5           3          1.5         0.2 setosa 
 5            5           4          1.4         0.2 setosa 
 6            5           4          1.7         0.4 setosa 
 7            5           3          1.4         0.3 setosa 
 8            5           3          1.5         0.2 setosa 
 9            4           3          1.4         0.2 setosa 
10            5           3          1.5         0.1 setosa 
# … with 140 more rows
> iris %>%
+   as_tibble() %>%
+   mutate(across(1:Sepal.Width, round))
# A tibble: 150 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1            5           4          1.4         0.2 setosa 
 2            5           3          1.4         0.2 setosa 
 3            5           3          1.3         0.2 setosa 
 4            5           3          1.5         0.2 setosa 
 5            5           4          1.4         0.2 setosa 
 6            5           4          1.7         0.4 setosa 
 7            5           3          1.4         0.3 setosa 
 8            5           3          1.5         0.2 setosa 
 9            4           3          1.4         0.2 setosa 
10            5           3          1.5         0.1 setosa 
# … with 140 more rows
> iris %>%
+   as_tibble() %>%
+   mutate(across(where(is.double) & !c(Petal.Length, Petal.Width), round))
# A tibble: 150 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1            5           4          1.4         0.2 setosa 
 2            5           3          1.4         0.2 setosa 
 3            5           3          1.3         0.2 setosa 
 4            5           3          1.5         0.2 setosa 
 5            5           4          1.4         0.2 setosa 
 6            5           4          1.7         0.4 setosa 
 7            5           3          1.4         0.3 setosa 
 8            5           3          1.5         0.2 setosa 
 9            4           3          1.4         0.2 setosa 
10            5           3          1.5         0.1 setosa 
# … with 140 more rows
> 
> # A purrr-style formula
> iris %>%
+   group_by(Species) %>%
+   summarise(across(starts_with("Sepal"), ~ mean(.x, na.rm = TRUE)))
# A tibble: 3 × 3
  Species    Sepal.Length Sepal.Width
  <fct>             <dbl>       <dbl>
1 setosa             5.01        3.43
2 versicolor         5.94        2.77
3 virginica          6.59        2.97
> 
> # A named list of functions
> iris %>%
+   group_by(Species) %>%
+   summarise(across(starts_with("Sepal"), list(mean = mean, sd = sd)))
# A tibble: 3 × 5
  Species    Sepal.Length_mean Sepal.Length_sd Sepal.Width_mean Sepal.Width_sd
  <fct>                  <dbl>           <dbl>            <dbl>          <dbl>
1 setosa                  5.01           0.352             3.43          0.379
2 versicolor              5.94           0.516             2.77          0.314
3 virginica               6.59           0.636             2.97          0.322
> 
> # Use the .names argument to control the output names
> iris %>%
+   group_by(Species) %>%
+   summarise(across(starts_with("Sepal"), mean, .names = "mean_{.col}"))
# A tibble: 3 × 3
  Species    mean_Sepal.Length mean_Sepal.Width
  <fct>                  <dbl>            <dbl>
1 setosa                  5.01             3.43
2 versicolor              5.94             2.77
3 virginica               6.59             2.97
> iris %>%
+   group_by(Species) %>%
+   summarise(across(starts_with("Sepal"), list(mean = mean, sd = sd), .names = "{.col}.{.fn}"))
# A tibble: 3 × 5
  Species    Sepal.Length.mean Sepal.Length.sd Sepal.Width.mean Sepal.Width.sd
  <fct>                  <dbl>           <dbl>            <dbl>          <dbl>
1 setosa                  5.01           0.352             3.43          0.379
2 versicolor              5.94           0.516             2.77          0.314
3 virginica               6.59           0.636             2.97          0.322
> 
> # When the list is not named, .fn is replaced by the function's position
> iris %>%
+   group_by(Species) %>%
+   summarise(across(starts_with("Sepal"), list(mean, sd), .names = "{.col}.fn{.fn}"))
# A tibble: 3 × 5
  Species    Sepal.Length.fn1 Sepal.Length.fn2 Sepal.Width.fn1 Sepal.Width.fn2
  <fct>                 <dbl>            <dbl>           <dbl>           <dbl>
1 setosa                 5.01            0.352            3.43           0.379
2 versicolor             5.94            0.516            2.77           0.314
3 virginica              6.59            0.636            2.97           0.322
> 
> # if_any() and if_all() ----------------------------------------------------
> iris %>%
+   filter(if_any(ends_with("Width"), ~ . > 4))
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.7         4.4          1.5         0.4  setosa
2          5.2         4.1          1.5         0.1  setosa
3          5.5         4.2          1.4         0.2  setosa
> iris %>%
+   filter(if_all(ends_with("Width"), ~ . > 2))
   Sepal.Length Sepal.Width Petal.Length Petal.Width   Species
1           6.3         3.3          6.0         2.5 virginica
2           7.1         3.0          5.9         2.1 virginica
3           6.5         3.0          5.8         2.2 virginica
4           7.6         3.0          6.6         2.1 virginica
5           7.2         3.6          6.1         2.5 virginica
6           6.8         3.0          5.5         2.1 virginica
7           5.8         2.8          5.1         2.4 virginica
8           6.4         3.2          5.3         2.3 virginica
9           7.7         3.8          6.7         2.2 virginica
10          7.7         2.6          6.9         2.3 virginica
11          6.9         3.2          5.7         2.3 virginica
12          6.7         3.3          5.7         2.1 virginica
13          6.4         2.8          5.6         2.1 virginica
14          6.4         2.8          5.6         2.2 virginica
15          7.7         3.0          6.1         2.3 virginica
16          6.3         3.4          5.6         2.4 virginica
17          6.9         3.1          5.4         2.1 virginica
18          6.7         3.1          5.6         2.4 virginica
19          6.9         3.1          5.1         2.3 virginica
20          6.8         3.2          5.9         2.3 virginica
21          6.7         3.3          5.7         2.5 virginica
22          6.7         3.0          5.2         2.3 virginica
23          6.2         3.4          5.4         2.3 virginica
> 
> 
> 
> 
> cleanEx()
> nameEx("all_equal")
> ### * all_equal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: all_equal
> ### Title: Flexible equality comparison for data frames
> ### Aliases: all_equal
> ### Keywords: internal
> 
> ### ** Examples
> 
> scramble <- function(x) x[sample(nrow(x)), sample(ncol(x))]
> 
> # By default, ordering of rows and columns ignored
> all_equal(mtcars, scramble(mtcars))
[1] TRUE
> 
> # But those can be overriden if desired
> all_equal(mtcars, scramble(mtcars), ignore_col_order = FALSE)
[1] "- Same column names, but different order"
> all_equal(mtcars, scramble(mtcars), ignore_row_order = FALSE)
[1] "Same row values, but different order"
> 
> # By default all_equal is sensitive to variable differences
> df1 <- data.frame(x = "a", stringsAsFactors = FALSE)
> df2 <- data.frame(x = factor("a"))
> all_equal(df1, df2)
[1] "- Different types for column `x`: character vs factor<4d52a>\n"
> # But you can request dplyr convert similar types
> all_equal(df1, df2, convert = TRUE)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("arrange")
> ### * arrange
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: arrange
> ### Title: Arrange rows by column values
> ### Aliases: arrange arrange.data.frame
> 
> ### ** Examples
> 
> arrange(mtcars, cyl, disp)
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
> arrange(mtcars, desc(disp))
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
> 
> # grouped arrange ignores groups
> by_cyl <- mtcars %>% group_by(cyl)
> by_cyl %>% arrange(desc(wt))
# A tibble: 32 × 11
# Groups:   cyl [3]
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  10.4     8  460    215  3     5.42  17.8     0     0     3     4
 2  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4
 3  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4
 4  16.4     8  276.   180  3.07  4.07  17.4     0     0     3     3
 5  19.2     8  400    175  3.08  3.84  17.0     0     0     3     2
 6  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4
 7  15.2     8  276.   180  3.07  3.78  18       0     0     3     3
 8  17.3     8  276.   180  3.07  3.73  17.6     0     0     3     3
 9  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
10  15       8  301    335  3.54  3.57  14.6     0     1     5     8
# … with 22 more rows
> # Unless you specifically ask:
> by_cyl %>% arrange(desc(wt), .by_group = TRUE)
# A tibble: 32 × 11
# Groups:   cyl [3]
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  24.4     4 147.     62  3.69  3.19  20       1     0     4     2
 2  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2
 3  21.4     4 121     109  4.11  2.78  18.6     1     1     4     2
 4  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1
 5  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1
 6  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
 7  26       4 120.     91  4.43  2.14  16.7     0     1     5     2
 8  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1
 9  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1
10  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
# … with 22 more rows
> 
> # use embracing when wrapping in a function;
> # see ?dplyr_data_masking for more details
> tidy_eval_arrange <- function(.data, var) {
+   .data %>%
+     arrange({{ var }})
+ }
> tidy_eval_arrange(mtcars, mpg)
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
> 
> # use across() access select()-style semantics
> iris %>% arrange(across(starts_with("Sepal")))
    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
1            4.3         3.0          1.1         0.1     setosa
2            4.4         2.9          1.4         0.2     setosa
3            4.4         3.0          1.3         0.2     setosa
4            4.4         3.2          1.3         0.2     setosa
5            4.5         2.3          1.3         0.3     setosa
6            4.6         3.1          1.5         0.2     setosa
7            4.6         3.2          1.4         0.2     setosa
8            4.6         3.4          1.4         0.3     setosa
9            4.6         3.6          1.0         0.2     setosa
10           4.7         3.2          1.3         0.2     setosa
11           4.7         3.2          1.6         0.2     setosa
12           4.8         3.0          1.4         0.1     setosa
13           4.8         3.0          1.4         0.3     setosa
14           4.8         3.1          1.6         0.2     setosa
15           4.8         3.4          1.6         0.2     setosa
16           4.8         3.4          1.9         0.2     setosa
17           4.9         2.4          3.3         1.0 versicolor
18           4.9         2.5          4.5         1.7  virginica
19           4.9         3.0          1.4         0.2     setosa
20           4.9         3.1          1.5         0.1     setosa
21           4.9         3.1          1.5         0.2     setosa
22           4.9         3.6          1.4         0.1     setosa
23           5.0         2.0          3.5         1.0 versicolor
24           5.0         2.3          3.3         1.0 versicolor
25           5.0         3.0          1.6         0.2     setosa
26           5.0         3.2          1.2         0.2     setosa
27           5.0         3.3          1.4         0.2     setosa
28           5.0         3.4          1.5         0.2     setosa
29           5.0         3.4          1.6         0.4     setosa
30           5.0         3.5          1.3         0.3     setosa
31           5.0         3.5          1.6         0.6     setosa
32           5.0         3.6          1.4         0.2     setosa
33           5.1         2.5          3.0         1.1 versicolor
34           5.1         3.3          1.7         0.5     setosa
35           5.1         3.4          1.5         0.2     setosa
36           5.1         3.5          1.4         0.2     setosa
37           5.1         3.5          1.4         0.3     setosa
38           5.1         3.7          1.5         0.4     setosa
39           5.1         3.8          1.5         0.3     setosa
40           5.1         3.8          1.9         0.4     setosa
41           5.1         3.8          1.6         0.2     setosa
42           5.2         2.7          3.9         1.4 versicolor
43           5.2         3.4          1.4         0.2     setosa
44           5.2         3.5          1.5         0.2     setosa
45           5.2         4.1          1.5         0.1     setosa
46           5.3         3.7          1.5         0.2     setosa
47           5.4         3.0          4.5         1.5 versicolor
48           5.4         3.4          1.7         0.2     setosa
49           5.4         3.4          1.5         0.4     setosa
50           5.4         3.7          1.5         0.2     setosa
51           5.4         3.9          1.7         0.4     setosa
52           5.4         3.9          1.3         0.4     setosa
53           5.5         2.3          4.0         1.3 versicolor
54           5.5         2.4          3.8         1.1 versicolor
55           5.5         2.4          3.7         1.0 versicolor
56           5.5         2.5          4.0         1.3 versicolor
57           5.5         2.6          4.4         1.2 versicolor
58           5.5         3.5          1.3         0.2     setosa
59           5.5         4.2          1.4         0.2     setosa
60           5.6         2.5          3.9         1.1 versicolor
61           5.6         2.7          4.2         1.3 versicolor
62           5.6         2.8          4.9         2.0  virginica
63           5.6         2.9          3.6         1.3 versicolor
64           5.6         3.0          4.5         1.5 versicolor
65           5.6         3.0          4.1         1.3 versicolor
66           5.7         2.5          5.0         2.0  virginica
67           5.7         2.6          3.5         1.0 versicolor
68           5.7         2.8          4.5         1.3 versicolor
69           5.7         2.8          4.1         1.3 versicolor
70           5.7         2.9          4.2         1.3 versicolor
71           5.7         3.0          4.2         1.2 versicolor
72           5.7         3.8          1.7         0.3     setosa
73           5.7         4.4          1.5         0.4     setosa
74           5.8         2.6          4.0         1.2 versicolor
75           5.8         2.7          4.1         1.0 versicolor
76           5.8         2.7          3.9         1.2 versicolor
77           5.8         2.7          5.1         1.9  virginica
78           5.8         2.7          5.1         1.9  virginica
79           5.8         2.8          5.1         2.4  virginica
80           5.8         4.0          1.2         0.2     setosa
81           5.9         3.0          4.2         1.5 versicolor
82           5.9         3.0          5.1         1.8  virginica
83           5.9         3.2          4.8         1.8 versicolor
84           6.0         2.2          4.0         1.0 versicolor
85           6.0         2.2          5.0         1.5  virginica
86           6.0         2.7          5.1         1.6 versicolor
87           6.0         2.9          4.5         1.5 versicolor
88           6.0         3.0          4.8         1.8  virginica
89           6.0         3.4          4.5         1.6 versicolor
90           6.1         2.6          5.6         1.4  virginica
91           6.1         2.8          4.0         1.3 versicolor
92           6.1         2.8          4.7         1.2 versicolor
93           6.1         2.9          4.7         1.4 versicolor
94           6.1         3.0          4.6         1.4 versicolor
95           6.1         3.0          4.9         1.8  virginica
96           6.2         2.2          4.5         1.5 versicolor
97           6.2         2.8          4.8         1.8  virginica
98           6.2         2.9          4.3         1.3 versicolor
99           6.2         3.4          5.4         2.3  virginica
100          6.3         2.3          4.4         1.3 versicolor
101          6.3         2.5          4.9         1.5 versicolor
102          6.3         2.5          5.0         1.9  virginica
103          6.3         2.7          4.9         1.8  virginica
104          6.3         2.8          5.1         1.5  virginica
105          6.3         2.9          5.6         1.8  virginica
106          6.3         3.3          4.7         1.6 versicolor
107          6.3         3.3          6.0         2.5  virginica
108          6.3         3.4          5.6         2.4  virginica
109          6.4         2.7          5.3         1.9  virginica
110          6.4         2.8          5.6         2.1  virginica
111          6.4         2.8          5.6         2.2  virginica
112          6.4         2.9          4.3         1.3 versicolor
113          6.4         3.1          5.5         1.8  virginica
114          6.4         3.2          4.5         1.5 versicolor
115          6.4         3.2          5.3         2.3  virginica
116          6.5         2.8          4.6         1.5 versicolor
117          6.5         3.0          5.8         2.2  virginica
118          6.5         3.0          5.5         1.8  virginica
119          6.5         3.0          5.2         2.0  virginica
120          6.5         3.2          5.1         2.0  virginica
121          6.6         2.9          4.6         1.3 versicolor
122          6.6         3.0          4.4         1.4 versicolor
123          6.7         2.5          5.8         1.8  virginica
124          6.7         3.0          5.0         1.7 versicolor
125          6.7         3.0          5.2         2.3  virginica
126          6.7         3.1          4.4         1.4 versicolor
127          6.7         3.1          4.7         1.5 versicolor
128          6.7         3.1          5.6         2.4  virginica
129          6.7         3.3          5.7         2.1  virginica
130          6.7         3.3          5.7         2.5  virginica
131          6.8         2.8          4.8         1.4 versicolor
132          6.8         3.0          5.5         2.1  virginica
133          6.8         3.2          5.9         2.3  virginica
134          6.9         3.1          4.9         1.5 versicolor
135          6.9         3.1          5.4         2.1  virginica
136          6.9         3.1          5.1         2.3  virginica
137          6.9         3.2          5.7         2.3  virginica
138          7.0         3.2          4.7         1.4 versicolor
139          7.1         3.0          5.9         2.1  virginica
140          7.2         3.0          5.8         1.6  virginica
141          7.2         3.2          6.0         1.8  virginica
142          7.2         3.6          6.1         2.5  virginica
143          7.3         2.9          6.3         1.8  virginica
144          7.4         2.8          6.1         1.9  virginica
145          7.6         3.0          6.6         2.1  virginica
146          7.7         2.6          6.9         2.3  virginica
147          7.7         2.8          6.7         2.0  virginica
148          7.7         3.0          6.1         2.3  virginica
149          7.7         3.8          6.7         2.2  virginica
150          7.9         3.8          6.4         2.0  virginica
> iris %>% arrange(across(starts_with("Sepal"), desc))
    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
1            7.9         3.8          6.4         2.0  virginica
2            7.7         3.8          6.7         2.2  virginica
3            7.7         3.0          6.1         2.3  virginica
4            7.7         2.8          6.7         2.0  virginica
5            7.7         2.6          6.9         2.3  virginica
6            7.6         3.0          6.6         2.1  virginica
7            7.4         2.8          6.1         1.9  virginica
8            7.3         2.9          6.3         1.8  virginica
9            7.2         3.6          6.1         2.5  virginica
10           7.2         3.2          6.0         1.8  virginica
11           7.2         3.0          5.8         1.6  virginica
12           7.1         3.0          5.9         2.1  virginica
13           7.0         3.2          4.7         1.4 versicolor
14           6.9         3.2          5.7         2.3  virginica
15           6.9         3.1          4.9         1.5 versicolor
16           6.9         3.1          5.4         2.1  virginica
17           6.9         3.1          5.1         2.3  virginica
18           6.8         3.2          5.9         2.3  virginica
19           6.8         3.0          5.5         2.1  virginica
20           6.8         2.8          4.8         1.4 versicolor
21           6.7         3.3          5.7         2.1  virginica
22           6.7         3.3          5.7         2.5  virginica
23           6.7         3.1          4.4         1.4 versicolor
24           6.7         3.1          4.7         1.5 versicolor
25           6.7         3.1          5.6         2.4  virginica
26           6.7         3.0          5.0         1.7 versicolor
27           6.7         3.0          5.2         2.3  virginica
28           6.7         2.5          5.8         1.8  virginica
29           6.6         3.0          4.4         1.4 versicolor
30           6.6         2.9          4.6         1.3 versicolor
31           6.5         3.2          5.1         2.0  virginica
32           6.5         3.0          5.8         2.2  virginica
33           6.5         3.0          5.5         1.8  virginica
34           6.5         3.0          5.2         2.0  virginica
35           6.5         2.8          4.6         1.5 versicolor
36           6.4         3.2          4.5         1.5 versicolor
37           6.4         3.2          5.3         2.3  virginica
38           6.4         3.1          5.5         1.8  virginica
39           6.4         2.9          4.3         1.3 versicolor
40           6.4         2.8          5.6         2.1  virginica
41           6.4         2.8          5.6         2.2  virginica
42           6.4         2.7          5.3         1.9  virginica
43           6.3         3.4          5.6         2.4  virginica
44           6.3         3.3          4.7         1.6 versicolor
45           6.3         3.3          6.0         2.5  virginica
46           6.3         2.9          5.6         1.8  virginica
47           6.3         2.8          5.1         1.5  virginica
48           6.3         2.7          4.9         1.8  virginica
49           6.3         2.5          4.9         1.5 versicolor
50           6.3         2.5          5.0         1.9  virginica
51           6.3         2.3          4.4         1.3 versicolor
52           6.2         3.4          5.4         2.3  virginica
53           6.2         2.9          4.3         1.3 versicolor
54           6.2         2.8          4.8         1.8  virginica
55           6.2         2.2          4.5         1.5 versicolor
56           6.1         3.0          4.6         1.4 versicolor
57           6.1         3.0          4.9         1.8  virginica
58           6.1         2.9          4.7         1.4 versicolor
59           6.1         2.8          4.0         1.3 versicolor
60           6.1         2.8          4.7         1.2 versicolor
61           6.1         2.6          5.6         1.4  virginica
62           6.0         3.4          4.5         1.6 versicolor
63           6.0         3.0          4.8         1.8  virginica
64           6.0         2.9          4.5         1.5 versicolor
65           6.0         2.7          5.1         1.6 versicolor
66           6.0         2.2          4.0         1.0 versicolor
67           6.0         2.2          5.0         1.5  virginica
68           5.9         3.2          4.8         1.8 versicolor
69           5.9         3.0          4.2         1.5 versicolor
70           5.9         3.0          5.1         1.8  virginica
71           5.8         4.0          1.2         0.2     setosa
72           5.8         2.8          5.1         2.4  virginica
73           5.8         2.7          4.1         1.0 versicolor
74           5.8         2.7          3.9         1.2 versicolor
75           5.8         2.7          5.1         1.9  virginica
76           5.8         2.7          5.1         1.9  virginica
77           5.8         2.6          4.0         1.2 versicolor
78           5.7         4.4          1.5         0.4     setosa
79           5.7         3.8          1.7         0.3     setosa
80           5.7         3.0          4.2         1.2 versicolor
81           5.7         2.9          4.2         1.3 versicolor
82           5.7         2.8          4.5         1.3 versicolor
83           5.7         2.8          4.1         1.3 versicolor
84           5.7         2.6          3.5         1.0 versicolor
85           5.7         2.5          5.0         2.0  virginica
86           5.6         3.0          4.5         1.5 versicolor
87           5.6         3.0          4.1         1.3 versicolor
88           5.6         2.9          3.6         1.3 versicolor
89           5.6         2.8          4.9         2.0  virginica
90           5.6         2.7          4.2         1.3 versicolor
91           5.6         2.5          3.9         1.1 versicolor
92           5.5         4.2          1.4         0.2     setosa
93           5.5         3.5          1.3         0.2     setosa
94           5.5         2.6          4.4         1.2 versicolor
95           5.5         2.5          4.0         1.3 versicolor
96           5.5         2.4          3.8         1.1 versicolor
97           5.5         2.4          3.7         1.0 versicolor
98           5.5         2.3          4.0         1.3 versicolor
99           5.4         3.9          1.7         0.4     setosa
100          5.4         3.9          1.3         0.4     setosa
101          5.4         3.7          1.5         0.2     setosa
102          5.4         3.4          1.7         0.2     setosa
103          5.4         3.4          1.5         0.4     setosa
104          5.4         3.0          4.5         1.5 versicolor
105          5.3         3.7          1.5         0.2     setosa
106          5.2         4.1          1.5         0.1     setosa
107          5.2         3.5          1.5         0.2     setosa
108          5.2         3.4          1.4         0.2     setosa
109          5.2         2.7          3.9         1.4 versicolor
110          5.1         3.8          1.5         0.3     setosa
111          5.1         3.8          1.9         0.4     setosa
112          5.1         3.8          1.6         0.2     setosa
113          5.1         3.7          1.5         0.4     setosa
114          5.1         3.5          1.4         0.2     setosa
115          5.1         3.5          1.4         0.3     setosa
116          5.1         3.4          1.5         0.2     setosa
117          5.1         3.3          1.7         0.5     setosa
118          5.1         2.5          3.0         1.1 versicolor
119          5.0         3.6          1.4         0.2     setosa
120          5.0         3.5          1.3         0.3     setosa
121          5.0         3.5          1.6         0.6     setosa
122          5.0         3.4          1.5         0.2     setosa
123          5.0         3.4          1.6         0.4     setosa
124          5.0         3.3          1.4         0.2     setosa
125          5.0         3.2          1.2         0.2     setosa
126          5.0         3.0          1.6         0.2     setosa
127          5.0         2.3          3.3         1.0 versicolor
128          5.0         2.0          3.5         1.0 versicolor
129          4.9         3.6          1.4         0.1     setosa
130          4.9         3.1          1.5         0.1     setosa
131          4.9         3.1          1.5         0.2     setosa
132          4.9         3.0          1.4         0.2     setosa
133          4.9         2.5          4.5         1.7  virginica
134          4.9         2.4          3.3         1.0 versicolor
135          4.8         3.4          1.6         0.2     setosa
136          4.8         3.4          1.9         0.2     setosa
137          4.8         3.1          1.6         0.2     setosa
138          4.8         3.0          1.4         0.1     setosa
139          4.8         3.0          1.4         0.3     setosa
140          4.7         3.2          1.3         0.2     setosa
141          4.7         3.2          1.6         0.2     setosa
142          4.6         3.6          1.0         0.2     setosa
143          4.6         3.4          1.4         0.3     setosa
144          4.6         3.2          1.4         0.2     setosa
145          4.6         3.1          1.5         0.2     setosa
146          4.5         2.3          1.3         0.3     setosa
147          4.4         3.2          1.3         0.2     setosa
148          4.4         3.0          1.3         0.2     setosa
149          4.4         2.9          1.4         0.2     setosa
150          4.3         3.0          1.1         0.1     setosa
> 
> 
> 
> cleanEx()
> nameEx("arrange_all")
> ### * arrange_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: arrange_all
> ### Title: Arrange rows by a selection of variables
> ### Aliases: arrange_all arrange_at arrange_if
> 
> ### ** Examples
> 
> df <- as_tibble(mtcars)
> arrange_all(df)
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  10.4     8  460    215  3     5.42  17.8     0     0     3     4
 2  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4
 3  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4
 4  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 5  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4
 6  15       8  301    335  3.54  3.57  14.6     0     1     5     8
 7  15.2     8  276.   180  3.07  3.78  18       0     0     3     3
 8  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2
 9  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2
10  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4
# … with 22 more rows
> # ->
> arrange(df, across())
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  10.4     8  460    215  3     5.42  17.8     0     0     3     4
 2  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4
 3  13.3     8  350    245  3.73  3.84  15.4     0     0     3     4
 4  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 5  14.7     8  440    230  3.23  5.34  17.4     0     0     3     4
 6  15       8  301    335  3.54  3.57  14.6     0     1     5     8
 7  15.2     8  276.   180  3.07  3.78  18       0     0     3     3
 8  15.2     8  304    150  3.15  3.44  17.3     0     0     3     2
 9  15.5     8  318    150  2.76  3.52  16.9     0     0     3     2
10  15.8     8  351    264  4.22  3.17  14.5     0     1     5     4
# … with 22 more rows
> 
> arrange_all(df, desc)
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1
 2  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
 3  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2
 4  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
 5  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1
 6  26       4 120.     91  4.43  2.14  16.7     0     1     5     2
 7  24.4     4 147.     62  3.69  3.19  20       1     0     4     2
 8  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2
 9  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1
10  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1
# … with 22 more rows
> # ->
> arrange(df, across(everything(), desc))
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  33.9     4  71.1    65  4.22  1.84  19.9     1     1     4     1
 2  32.4     4  78.7    66  4.08  2.2   19.5     1     1     4     1
 3  30.4     4  95.1   113  3.77  1.51  16.9     1     1     5     2
 4  30.4     4  75.7    52  4.93  1.62  18.5     1     1     4     2
 5  27.3     4  79      66  4.08  1.94  18.9     1     1     4     1
 6  26       4 120.     91  4.43  2.14  16.7     0     1     5     2
 7  24.4     4 147.     62  3.69  3.19  20       1     0     4     2
 8  22.8     4 141.     95  3.92  3.15  22.9     1     0     4     2
 9  22.8     4 108      93  3.85  2.32  18.6     1     1     4     1
10  21.5     4 120.     97  3.7   2.46  20.0     1     0     3     1
# … with 22 more rows
> 
> 
> 
> cleanEx()
> nameEx("band_members")
> ### * band_members
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: band_members
> ### Title: Band membership
> ### Aliases: band_members band_instruments band_instruments2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> band_members
# A tibble: 3 × 2
  name  band   
  <chr> <chr>  
1 Mick  Stones 
2 John  Beatles
3 Paul  Beatles
> band_instruments
# A tibble: 3 × 2
  name  plays 
  <chr> <chr> 
1 John  guitar
2 Paul  bass  
3 Keith guitar
> band_instruments2
# A tibble: 3 × 2
  artist plays 
  <chr>  <chr> 
1 John   guitar
2 Paul   bass  
3 Keith  guitar
> 
> 
> 
> cleanEx()
> nameEx("between")
> ### * between
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: between
> ### Title: Do values in a numeric vector fall in specified range?
> ### Aliases: between
> 
> ### ** Examples
> 
> between(1:12, 7, 9)
 [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE
> 
> x <- rnorm(1e2)
> x[between(x, -1, 1)]
 [1] -0.626453811  0.183643324 -0.835628612  0.329507772 -0.820468384
 [6]  0.487429052  0.738324705  0.575781352 -0.305388387  0.389843236
[11] -0.621240581 -0.044933609 -0.016190263  0.943836211  0.821221195
[16]  0.593901321  0.918977372  0.782136301  0.074564983  0.619825748
[21] -0.056128740 -0.155795507 -0.478150055  0.417941560 -0.102787727
[26]  0.387671612 -0.053805041 -0.414994563 -0.394289954 -0.059313397
[31]  0.763175748 -0.164523596 -0.253361680  0.696963375  0.556663199
[36] -0.688755695 -0.707495157  0.364581962  0.768532925 -0.112346212
[41]  0.881107726  0.398105880 -0.612026393  0.341119691 -0.367221476
[46]  0.569719627 -0.135054604 -0.039240003  0.689739362  0.028002159
[51] -0.743273209  0.188792300  0.153253338  0.475509529 -0.709946431
[56]  0.610726353 -0.934097632  0.291446236 -0.443291873  0.001105352
[61]  0.074341324 -0.589520946 -0.568668733 -0.135178615  0.593946188
[66]  0.332950371 -0.304183924  0.370018810  0.267098791 -0.542520031
[71]  0.700213650  0.558486426 -0.573265414 -0.473400636
> 
> ## Or on a tibble using filter
> filter(starwars, between(height, 100, 150))
# A tibble: 5 × 14
  name     height  mass hair_color skin_color eye_color birth_year sex   gender 
  <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr>  
1 Leia Or…    150    49 brown      light      brown             19 fema… femini…
2 Mon Mot…    150    NA auburn     fair       blue              48 fema… femini…
3 Watto       137    NA black      blue, grey yellow            NA male  mascul…
4 Sebulba     112    40 none       grey, red  orange            NA male  mascul…
5 Gasgano     122    NA none       white, bl… black             NA male  mascul…
# … with 5 more variables: homeworld <chr>, species <chr>, films <list>,
#   vehicles <list>, starships <list>
> 
> 
> 
> cleanEx()
> nameEx("bind")
> ### * bind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bind
> ### Title: Efficiently bind multiple data frames by row and column
> ### Aliases: bind bind_rows bind_cols
> 
> ### ** Examples
> 
> one <- starwars[1:4, ]
> two <- starwars[9:12, ]
> 
> # You can supply data frames as arguments:
> bind_rows(one, two)
# A tibble: 8 × 14
  name     height  mass hair_color  skin_color eye_color birth_year sex   gender
  <chr>     <int> <dbl> <chr>       <chr>      <chr>          <dbl> <chr> <chr> 
1 Luke Sk…    172    77 blond       fair       blue            19   male  mascu…
2 C-3PO       167    75 <NA>        gold       yellow         112   none  mascu…
3 R2-D2        96    32 <NA>        white, bl… red             33   none  mascu…
4 Darth V…    202   136 none        white      yellow          41.9 male  mascu…
5 Biggs D…    183    84 black       light      brown           24   male  mascu…
6 Obi-Wan…    182    77 auburn, wh… fair       blue-gray       57   male  mascu…
7 Anakin …    188    84 blond       fair       blue            41.9 male  mascu…
8 Wilhuff…    180    NA auburn, gr… fair       blue            64   male  mascu…
# … with 5 more variables: homeworld <chr>, species <chr>, films <list>,
#   vehicles <list>, starships <list>
> 
> # The contents of lists are spliced automatically:
> bind_rows(list(one, two))
# A tibble: 8 × 14
  name     height  mass hair_color  skin_color eye_color birth_year sex   gender
  <chr>     <int> <dbl> <chr>       <chr>      <chr>          <dbl> <chr> <chr> 
1 Luke Sk…    172    77 blond       fair       blue            19   male  mascu…
2 C-3PO       167    75 <NA>        gold       yellow         112   none  mascu…
3 R2-D2        96    32 <NA>        white, bl… red             33   none  mascu…
4 Darth V…    202   136 none        white      yellow          41.9 male  mascu…
5 Biggs D…    183    84 black       light      brown           24   male  mascu…
6 Obi-Wan…    182    77 auburn, wh… fair       blue-gray       57   male  mascu…
7 Anakin …    188    84 blond       fair       blue            41.9 male  mascu…
8 Wilhuff…    180    NA auburn, gr… fair       blue            64   male  mascu…
# … with 5 more variables: homeworld <chr>, species <chr>, films <list>,
#   vehicles <list>, starships <list>
> bind_rows(split(starwars, starwars$homeworld))
# A tibble: 77 × 14
   name    height  mass hair_color skin_color  eye_color birth_year sex   gender
   <chr>    <int> <dbl> <chr>      <chr>       <chr>          <dbl> <chr> <chr> 
 1 Leia O…    150    49 brown      light       brown             19 fema… femin…
 2 Bail P…    191    NA black      tan         brown             67 male  mascu…
 3 Raymus…    188    79 brown      light       brown             NA male  mascu…
 4 Ratts …     79    15 none       grey, blue  unknown           NA male  mascu…
 5 Lobot      175    79 none       light       blue              37 male  mascu…
 6 Jek To…    180   110 brown      fair        blue              NA male  mascu…
 7 Nute G…    191    90 none       mottled gr… red               NA male  mascu…
 8 Ki-Adi…    198    82 white      pale        yellow            92 male  mascu…
 9 Mas Am…    196    NA none       blue        blue              NA male  mascu…
10 Mon Mo…    150    NA auburn     fair        blue              48 fema… femin…
# … with 67 more rows, and 5 more variables: homeworld <chr>, species <chr>,
#   films <list>, vehicles <list>, starships <list>
> bind_rows(list(one, two), list(two, one))
# A tibble: 16 × 14
   name    height  mass hair_color  skin_color eye_color birth_year sex   gender
   <chr>    <int> <dbl> <chr>       <chr>      <chr>          <dbl> <chr> <chr> 
 1 Luke S…    172    77 blond       fair       blue            19   male  mascu…
 2 C-3PO      167    75 <NA>        gold       yellow         112   none  mascu…
 3 R2-D2       96    32 <NA>        white, bl… red             33   none  mascu…
 4 Darth …    202   136 none        white      yellow          41.9 male  mascu…
 5 Biggs …    183    84 black       light      brown           24   male  mascu…
 6 Obi-Wa…    182    77 auburn, wh… fair       blue-gray       57   male  mascu…
 7 Anakin…    188    84 blond       fair       blue            41.9 male  mascu…
 8 Wilhuf…    180    NA auburn, gr… fair       blue            64   male  mascu…
 9 Biggs …    183    84 black       light      brown           24   male  mascu…
10 Obi-Wa…    182    77 auburn, wh… fair       blue-gray       57   male  mascu…
11 Anakin…    188    84 blond       fair       blue            41.9 male  mascu…
12 Wilhuf…    180    NA auburn, gr… fair       blue            64   male  mascu…
13 Luke S…    172    77 blond       fair       blue            19   male  mascu…
14 C-3PO      167    75 <NA>        gold       yellow         112   none  mascu…
15 R2-D2       96    32 <NA>        white, bl… red             33   none  mascu…
16 Darth …    202   136 none        white      yellow          41.9 male  mascu…
# … with 5 more variables: homeworld <chr>, species <chr>, films <list>,
#   vehicles <list>, starships <list>
> 
> 
> # In addition to data frames, you can supply vectors. In the rows
> # direction, the vectors represent rows and should have inner
> # names:
> bind_rows(
+   c(a = 1, b = 2),
+   c(a = 3, b = 4)
+ )
# A tibble: 2 × 2
      a     b
  <dbl> <dbl>
1     1     2
2     3     4
> 
> # You can mix vectors and data frames:
> bind_rows(
+   c(a = 1, b = 2),
+   tibble(a = 3:4, b = 5:6),
+   c(a = 7, b = 8)
+ )
# A tibble: 4 × 2
      a     b
  <dbl> <dbl>
1     1     2
2     3     5
3     4     6
4     7     8
> 
> 
> # When you supply a column name with the `.id` argument, a new
> # column is created to link each row to its original data frame
> bind_rows(list(one, two), .id = "id")
# A tibble: 8 × 15
  id    name      height  mass hair_color  skin_color eye_color birth_year sex  
  <chr> <chr>      <int> <dbl> <chr>       <chr>      <chr>          <dbl> <chr>
1 1     Luke Sky…    172    77 blond       fair       blue            19   male 
2 1     C-3PO        167    75 <NA>        gold       yellow         112   none 
3 1     R2-D2         96    32 <NA>        white, bl… red             33   none 
4 1     Darth Va…    202   136 none        white      yellow          41.9 male 
5 2     Biggs Da…    183    84 black       light      brown           24   male 
6 2     Obi-Wan …    182    77 auburn, wh… fair       blue-gray       57   male 
7 2     Anakin S…    188    84 blond       fair       blue            41.9 male 
8 2     Wilhuff …    180    NA auburn, gr… fair       blue            64   male 
# … with 6 more variables: gender <chr>, homeworld <chr>, species <chr>,
#   films <list>, vehicles <list>, starships <list>
> bind_rows(list(a = one, b = two), .id = "id")
# A tibble: 8 × 15
  id    name      height  mass hair_color  skin_color eye_color birth_year sex  
  <chr> <chr>      <int> <dbl> <chr>       <chr>      <chr>          <dbl> <chr>
1 a     Luke Sky…    172    77 blond       fair       blue            19   male 
2 a     C-3PO        167    75 <NA>        gold       yellow         112   none 
3 a     R2-D2         96    32 <NA>        white, bl… red             33   none 
4 a     Darth Va…    202   136 none        white      yellow          41.9 male 
5 b     Biggs Da…    183    84 black       light      brown           24   male 
6 b     Obi-Wan …    182    77 auburn, wh… fair       blue-gray       57   male 
7 b     Anakin S…    188    84 blond       fair       blue            41.9 male 
8 b     Wilhuff …    180    NA auburn, gr… fair       blue            64   male 
# … with 6 more variables: gender <chr>, homeworld <chr>, species <chr>,
#   films <list>, vehicles <list>, starships <list>
> bind_rows("group 1" = one, "group 2" = two, .id = "groups")
# A tibble: 8 × 15
  groups  name     height  mass hair_color skin_color eye_color birth_year sex  
  <chr>   <chr>     <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr>
1 group 1 Luke Sk…    172    77 blond      fair       blue            19   male 
2 group 1 C-3PO       167    75 <NA>       gold       yellow         112   none 
3 group 1 R2-D2        96    32 <NA>       white, bl… red             33   none 
4 group 1 Darth V…    202   136 none       white      yellow          41.9 male 
5 group 2 Biggs D…    183    84 black      light      brown           24   male 
6 group 2 Obi-Wan…    182    77 auburn, w… fair       blue-gray       57   male 
7 group 2 Anakin …    188    84 blond      fair       blue            41.9 male 
8 group 2 Wilhuff…    180    NA auburn, g… fair       blue            64   male 
# … with 6 more variables: gender <chr>, homeworld <chr>, species <chr>,
#   films <list>, vehicles <list>, starships <list>
> 
> # Columns don't need to match when row-binding
> bind_rows(tibble(x = 1:3), tibble(y = 1:4))
# A tibble: 7 × 2
      x     y
  <int> <int>
1     1    NA
2     2    NA
3     3    NA
4    NA     1
5    NA     2
6    NA     3
7    NA     4
> ## Not run: 
> ##D # Rows do need to match when column-binding
> ##D bind_cols(tibble(x = 1:3), tibble(y = 1:2))
> ##D 
> ##D # even with 0 columns
> ##D bind_cols(tibble(x = 1:3), tibble())
> ## End(Not run)
> 
> bind_cols(one, two)
New names:
* name -> name...1
* height -> height...2
* mass -> mass...3
* hair_color -> hair_color...4
* skin_color -> skin_color...5
* ...
# A tibble: 4 × 28
  name...1       height...2 mass...3 hair_color...4 skin_color...5 eye_color...6
  <chr>               <int>    <dbl> <chr>          <chr>          <chr>        
1 Luke Skywalker        172       77 blond          fair           blue         
2 C-3PO                 167       75 <NA>           gold           yellow       
3 R2-D2                  96       32 <NA>           white, blue    red          
4 Darth Vader           202      136 none           white          yellow       
# … with 22 more variables: birth_year...7 <dbl>, sex...8 <chr>,
#   gender...9 <chr>, homeworld...10 <chr>, species...11 <chr>,
#   films...12 <list>, vehicles...13 <list>, starships...14 <list>,
#   name...15 <chr>, height...16 <int>, mass...17 <dbl>, hair_color...18 <chr>,
#   skin_color...19 <chr>, eye_color...20 <chr>, birth_year...21 <dbl>,
#   sex...22 <chr>, gender...23 <chr>, homeworld...24 <chr>,
#   species...25 <chr>, films...26 <list>, vehicles...27 <list>, …
> bind_cols(list(one, two))
New names:
* name -> name...1
* height -> height...2
* mass -> mass...3
* hair_color -> hair_color...4
* skin_color -> skin_color...5
* ...
# A tibble: 4 × 28
  name...1       height...2 mass...3 hair_color...4 skin_color...5 eye_color...6
  <chr>               <int>    <dbl> <chr>          <chr>          <chr>        
1 Luke Skywalker        172       77 blond          fair           blue         
2 C-3PO                 167       75 <NA>           gold           yellow       
3 R2-D2                  96       32 <NA>           white, blue    red          
4 Darth Vader           202      136 none           white          yellow       
# … with 22 more variables: birth_year...7 <dbl>, sex...8 <chr>,
#   gender...9 <chr>, homeworld...10 <chr>, species...11 <chr>,
#   films...12 <list>, vehicles...13 <list>, starships...14 <list>,
#   name...15 <chr>, height...16 <int>, mass...17 <dbl>, hair_color...18 <chr>,
#   skin_color...19 <chr>, eye_color...20 <chr>, birth_year...21 <dbl>,
#   sex...22 <chr>, gender...23 <chr>, homeworld...24 <chr>,
#   species...25 <chr>, films...26 <list>, vehicles...27 <list>, …
> 
> 
> 
> cleanEx()
> nameEx("c_across")
> ### * c_across
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: c_across
> ### Title: Combine values from multiple columns
> ### Aliases: c_across
> 
> ### ** Examples
> 
> df <- tibble(id = 1:4, w = runif(4), x = runif(4), y = runif(4), z = runif(4))
> df %>%
+   rowwise() %>%
+   mutate(
+     sum = sum(c_across(w:z)),
+     sd = sd(c_across(w:z))
+  )
# A tibble: 4 × 7
# Rowwise: 
     id     w     x      y     z   sum    sd
  <int> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl>
1     1 0.266 0.202 0.629  0.687  1.78 0.248
2     2 0.372 0.898 0.0618 0.384  1.72 0.347
3     3 0.573 0.945 0.206  0.770  2.49 0.317
4     4 0.908 0.661 0.177  0.498  2.24 0.307
> 
> 
> 
> cleanEx()
> nameEx("case_when")
> ### * case_when
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: case_when
> ### Title: A general vectorised if
> ### Aliases: case_when
> 
> ### ** Examples
> 
> x <- 1:50
> case_when(
+   x %% 35 == 0 ~ "fizz buzz",
+   x %% 5 == 0 ~ "fizz",
+   x %% 7 == 0 ~ "buzz",
+   TRUE ~ as.character(x)
+ )
 [1] "1"         "2"         "3"         "4"         "fizz"      "6"        
 [7] "buzz"      "8"         "9"         "fizz"      "11"        "12"       
[13] "13"        "buzz"      "fizz"      "16"        "17"        "18"       
[19] "19"        "fizz"      "buzz"      "22"        "23"        "24"       
[25] "fizz"      "26"        "27"        "buzz"      "29"        "fizz"     
[31] "31"        "32"        "33"        "34"        "fizz buzz" "36"       
[37] "37"        "38"        "39"        "fizz"      "41"        "buzz"     
[43] "43"        "44"        "fizz"      "46"        "47"        "48"       
[49] "buzz"      "fizz"     
> 
> # Like an if statement, the arguments are evaluated in order, so you must
> # proceed from the most specific to the most general. This won't work:
> case_when(
+   TRUE ~ as.character(x),
+   x %%  5 == 0 ~ "fizz",
+   x %%  7 == 0 ~ "buzz",
+   x %% 35 == 0 ~ "fizz buzz"
+ )
 [1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12" "13" "14" "15"
[16] "16" "17" "18" "19" "20" "21" "22" "23" "24" "25" "26" "27" "28" "29" "30"
[31] "31" "32" "33" "34" "35" "36" "37" "38" "39" "40" "41" "42" "43" "44" "45"
[46] "46" "47" "48" "49" "50"
> 
> # If none of the cases match, NA is used:
> case_when(
+   x %%  5 == 0 ~ "fizz",
+   x %%  7 == 0 ~ "buzz",
+   x %% 35 == 0 ~ "fizz buzz"
+ )
 [1] NA     NA     NA     NA     "fizz" NA     "buzz" NA     NA     "fizz"
[11] NA     NA     NA     "buzz" "fizz" NA     NA     NA     NA     "fizz"
[21] "buzz" NA     NA     NA     "fizz" NA     NA     "buzz" NA     "fizz"
[31] NA     NA     NA     NA     "fizz" NA     NA     NA     NA     "fizz"
[41] NA     "buzz" NA     NA     "fizz" NA     NA     NA     "buzz" "fizz"
> 
> # Note that NA values in the vector x do not get special treatment. If you want
> # to explicitly handle NA values you can use the `is.na` function:
> x[2:4] <- NA_real_
> case_when(
+   x %% 35 == 0 ~ "fizz buzz",
+   x %% 5 == 0 ~ "fizz",
+   x %% 7 == 0 ~ "buzz",
+   is.na(x) ~ "nope",
+   TRUE ~ as.character(x)
+ )
 [1] "1"         "nope"      "nope"      "nope"      "fizz"      "6"        
 [7] "buzz"      "8"         "9"         "fizz"      "11"        "12"       
[13] "13"        "buzz"      "fizz"      "16"        "17"        "18"       
[19] "19"        "fizz"      "buzz"      "22"        "23"        "24"       
[25] "fizz"      "26"        "27"        "buzz"      "29"        "fizz"     
[31] "31"        "32"        "33"        "34"        "fizz buzz" "36"       
[37] "37"        "38"        "39"        "fizz"      "41"        "buzz"     
[43] "43"        "44"        "fizz"      "46"        "47"        "48"       
[49] "buzz"      "fizz"     
> 
> # All RHS values need to be of the same type. Inconsistent types will throw an error.
> # This applies also to NA values used in RHS: NA is logical, use
> # typed values like NA_real_, NA_complex, NA_character_, NA_integer_ as appropriate.
> case_when(
+   x %% 35 == 0 ~ NA_character_,
+   x %% 5 == 0 ~ "fizz",
+   x %% 7 == 0 ~ "buzz",
+   TRUE ~ as.character(x)
+ )
 [1] "1"    NA     NA     NA     "fizz" "6"    "buzz" "8"    "9"    "fizz"
[11] "11"   "12"   "13"   "buzz" "fizz" "16"   "17"   "18"   "19"   "fizz"
[21] "buzz" "22"   "23"   "24"   "fizz" "26"   "27"   "buzz" "29"   "fizz"
[31] "31"   "32"   "33"   "34"   NA     "36"   "37"   "38"   "39"   "fizz"
[41] "41"   "buzz" "43"   "44"   "fizz" "46"   "47"   "48"   "buzz" "fizz"
> case_when(
+   x %% 35 == 0 ~ 35,
+   x %% 5 == 0 ~ 5,
+   x %% 7 == 0 ~ 7,
+   TRUE ~ NA_real_
+ )
 [1] NA NA NA NA  5 NA  7 NA NA  5 NA NA NA  7  5 NA NA NA NA  5  7 NA NA NA  5
[26] NA NA  7 NA  5 NA NA NA NA 35 NA NA NA NA  5 NA  7 NA NA  5 NA NA NA  7  5
> 
> # case_when() evaluates all RHS expressions, and then constructs its
> # result by extracting the selected (via the LHS expressions) parts.
> # In particular NaN are produced in this case:
> y <- seq(-2, 2, by = .5)
> case_when(
+   y >= 0 ~ sqrt(y),
+   TRUE   ~ y
+ )
Warning in sqrt(y) : NaNs produced
[1] -2.0000000 -1.5000000 -1.0000000 -0.5000000  0.0000000  0.7071068  1.0000000
[8]  1.2247449  1.4142136
> 
> # This throws an error as NA is logical not numeric
> ## Not run: 
> ##D case_when(
> ##D   x %% 35 == 0 ~ 35,
> ##D   x %% 5 == 0 ~ 5,
> ##D   x %% 7 == 0 ~ 7,
> ##D   TRUE ~ NA
> ##D )
> ## End(Not run)
> 
> # case_when is particularly useful inside mutate when you want to
> # create a new variable that relies on a complex combination of existing
> # variables
> starwars %>%
+   select(name:mass, gender, species) %>%
+   mutate(
+     type = case_when(
+       height > 200 | mass > 200 ~ "large",
+       species == "Droid"        ~ "robot",
+       TRUE                      ~ "other"
+     )
+   )
# A tibble: 87 × 6
   name               height  mass gender    species type 
   <chr>               <int> <dbl> <chr>     <chr>   <chr>
 1 Luke Skywalker        172    77 masculine Human   other
 2 C-3PO                 167    75 masculine Droid   robot
 3 R2-D2                  96    32 masculine Droid   robot
 4 Darth Vader           202   136 masculine Human   large
 5 Leia Organa           150    49 feminine  Human   other
 6 Owen Lars             178   120 masculine Human   other
 7 Beru Whitesun lars    165    75 feminine  Human   other
 8 R5-D4                  97    32 masculine Droid   robot
 9 Biggs Darklighter     183    84 masculine Human   other
10 Obi-Wan Kenobi        182    77 masculine Human   other
# … with 77 more rows
> 
> 
> # `case_when()` is not a tidy eval function. If you'd like to reuse
> # the same patterns, extract the `case_when()` call in a normal
> # function:
> case_character_type <- function(height, mass, species) {
+   case_when(
+     height > 200 | mass > 200 ~ "large",
+     species == "Droid"        ~ "robot",
+     TRUE                      ~ "other"
+   )
+ }
> 
> case_character_type(150, 250, "Droid")
[1] "large"
> case_character_type(150, 150, "Droid")
[1] "robot"
> 
> # Such functions can be used inside `mutate()` as well:
> starwars %>%
+   mutate(type = case_character_type(height, mass, species)) %>%
+   pull(type)
 [1] "other" "robot" "robot" "large" "other" "other" "other" "robot" "other"
[10] "other" "other" "other" "large" "other" "other" "large" "other" "other"
[19] "other" "other" "other" "robot" "other" "other" "other" "other" "other"
[28] "other" "other" "other" "other" "other" "other" "other" "large" "large"
[37] "other" "other" "other" "other" "other" "other" "other" "other" "other"
[46] "other" "other" "other" "other" "other" "other" "other" "other" "large"
[55] "other" "other" "other" "other" "other" "other" "other" "other" "other"
[64] "other" "other" "other" "other" "other" "large" "large" "other" "other"
[73] "robot" "other" "other" "other" "large" "large" "other" "other" "large"
[82] "other" "other" "other" "robot" "other" "other"
> 
> # `case_when()` ignores `NULL` inputs. This is useful when you'd
> # like to use a pattern only under certain conditions. Here we'll
> # take advantage of the fact that `if` returns `NULL` when there is
> # no `else` clause:
> case_character_type <- function(height, mass, species, robots = TRUE) {
+   case_when(
+     height > 200 | mass > 200      ~ "large",
+     if (robots) species == "Droid" ~ "robot",
+     TRUE                           ~ "other"
+   )
+ }
> 
> starwars %>%
+   mutate(type = case_character_type(height, mass, species, robots = FALSE)) %>%
+   pull(type)
 [1] "other" "other" "other" "large" "other" "other" "other" "other" "other"
[10] "other" "other" "other" "large" "other" "other" "large" "other" "other"
[19] "other" "other" "other" "other" "other" "other" "other" "other" "other"
[28] "other" "other" "other" "other" "other" "other" "other" "large" "large"
[37] "other" "other" "other" "other" "other" "other" "other" "other" "other"
[46] "other" "other" "other" "other" "other" "other" "other" "other" "large"
[55] "other" "other" "other" "other" "other" "other" "other" "other" "other"
[64] "other" "other" "other" "other" "other" "large" "large" "other" "other"
[73] "other" "other" "other" "other" "large" "large" "other" "other" "large"
[82] "other" "other" "other" "other" "other" "other"
> 
> 
> 
> cleanEx()
> nameEx("check_dbplyr")
> ### * check_dbplyr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check_dbplyr
> ### Title: dbplyr compatibility functions
> ### Aliases: check_dbplyr wrap_dbplyr_obj
> ### Keywords: internal
> 
> ### ** Examples
> 
> if (requireNamespace("dbplyr", quietly = TRUE)) {
+ wrap_dbplyr_obj("build_sql")
+ wrap_dbplyr_obj("base_agg")
+ }
> 
> 
> 
> cleanEx()
> nameEx("coalesce")
> ### * coalesce
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coalesce
> ### Title: Find first non-missing element
> ### Aliases: coalesce
> 
> ### ** Examples
> 
> # Use a single value to replace all missing values
> x <- sample(c(1:5, NA, NA, NA))
> coalesce(x, 0L)
[1] 1 4 0 2 0 3 0 5
> 
> # Or match together a complete vector from missing pieces
> y <- c(1, 2, NA, NA, 5)
> z <- c(NA, NA, 3, 4, 5)
> coalesce(y, z)
[1] 1 2 3 4 5
> 
> # Supply lists by with dynamic dots
> vecs <- list(
+   c(1, 2, NA, NA, 5),
+   c(NA, NA, 3, 4, 5)
+ )
> coalesce(!!!vecs)
[1] 1 2 3 4 5
> 
> 
> 
> cleanEx()
> nameEx("combine")
> ### * combine
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: combine
> ### Title: Combine vectors
> ### Aliases: combine
> ### Keywords: internal
> 
> ### ** Examples
> 
> f1 <- factor("a")
> f2 <- factor("b")
> 
> combine(f1, f2)
Warning: `combine()` was deprecated in dplyr 1.0.0.
Please use `vctrs::vec_c()` instead.
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated.
[1] a b
Levels: a b
> # ->
> vctrs::vec_c(f1, f1)
[1] a a
Levels: a
> 
> combine(list(f1, f2))
[1] a b
Levels: a b
> # ->
> vctrs::vec_c(!!!list(f1, f2))
[1] a b
Levels: a b
> 
> 
> 
> cleanEx()
> nameEx("compute")
> ### * compute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compute
> ### Title: Force computation of a database query
> ### Aliases: compute collect collapse
> 
> ### ** Examples
> 
> if (require(dbplyr)) {
+   mtcars2 <- src_memdb() %>%
+     copy_to(mtcars, name = "mtcars2-cc", overwrite = TRUE)
+ 
+   remote <- mtcars2 %>%
+     filter(cyl == 8) %>%
+     select(mpg:drat)
+ 
+   # Compute query and save in remote table
+   compute(remote)
+ 
+   # Compute query bring back to this session
+   collect(remote)
+ 
+   # Creates a fresh query based on the generated SQL
+   collapse(remote)
+ }
Loading required package: dbplyr
Warning in library(package, lib.loc = lib.loc, character.only = TRUE, logical.return = TRUE,  :
  there is no package called ‘dbplyr’
> 
> 
> 
> cleanEx()
> nameEx("context")
> ### * context
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: context
> ### Title: Context dependent expressions
> ### Aliases: context n cur_data cur_data_all cur_group cur_group_id
> ###   cur_group_rows cur_column
> 
> ### ** Examples
> 
> df <- tibble(
+   g = sample(rep(letters[1:3], 1:3)),
+   x = runif(6),
+   y = runif(6)
+ )
> gf <- df %>% group_by(g)
> 
> gf %>% summarise(n = n())
# A tibble: 3 × 2
  g         n
  <chr> <int>
1 a         1
2 b         2
3 c         3
> 
> gf %>% mutate(id = cur_group_id())
# A tibble: 6 × 4
# Groups:   g [3]
  g          x     y    id
  <chr>  <dbl> <dbl> <int>
1 a     0.945  0.687     1
2 c     0.661  0.384     3
3 b     0.629  0.770     2
4 c     0.0618 0.498     3
5 b     0.206  0.718     2
6 c     0.177  0.992     3
> gf %>% summarise(row = cur_group_rows())
`summarise()` has grouped output by 'g'. You can override using the `.groups` argument.
# A tibble: 6 × 2
# Groups:   g [3]
  g       row
  <chr> <int>
1 a         1
2 b         3
3 b         5
4 c         2
5 c         4
6 c         6
> gf %>% summarise(data = list(cur_group()))
# A tibble: 3 × 2
  g     data            
  <chr> <list>          
1 a     <tibble [1 × 1]>
2 b     <tibble [1 × 1]>
3 c     <tibble [1 × 1]>
> gf %>% summarise(data = list(cur_data()))
# A tibble: 3 × 2
  g     data            
  <chr> <list>          
1 a     <tibble [1 × 2]>
2 b     <tibble [2 × 2]>
3 c     <tibble [3 × 2]>
> gf %>% summarise(data = list(cur_data_all()))
# A tibble: 3 × 2
  g     data            
  <chr> <list>          
1 a     <tibble [1 × 3]>
2 b     <tibble [2 × 3]>
3 c     <tibble [3 × 3]>
> 
> gf %>% mutate(across(everything(), ~ paste(cur_column(), round(.x, 2))))
# A tibble: 6 × 3
# Groups:   g [3]
  g     x      y     
  <chr> <chr>  <chr> 
1 a     x 0.94 y 0.69
2 c     x 0.66 y 0.38
3 b     x 0.63 y 0.77
4 c     x 0.06 y 0.5 
5 b     x 0.21 y 0.72
6 c     x 0.18 y 0.99
> 
> 
> 
> cleanEx()
> nameEx("copy_to")
> ### * copy_to
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: copy_to
> ### Title: Copy a local data frame to a remote src
> ### Aliases: copy_to
> 
> ### ** Examples
> 
> ## Not run: 
> ##D iris2 <- dbplyr::src_memdb() %>% copy_to(iris, overwrite = TRUE)
> ##D iris2
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("count")
> ### * count
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count
> ### Title: Count observations by group
> ### Aliases: count tally add_count add_tally
> 
> ### ** Examples
> 
> # count() is a convenient way to get a sense of the distribution of
> # values in a dataset
> starwars %>% count(species)
# A tibble: 38 × 2
   species       n
   <chr>     <int>
 1 Aleena        1
 2 Besalisk      1
 3 Cerean        1
 4 Chagrian      1
 5 Clawdite      1
 6 Droid         6
 7 Dug           1
 8 Ewok          1
 9 Geonosian     1
10 Gungan        3
# … with 28 more rows
> starwars %>% count(species, sort = TRUE)
# A tibble: 38 × 2
   species      n
   <chr>    <int>
 1 Human       35
 2 Droid        6
 3 <NA>         4
 4 Gungan       3
 5 Kaminoan     2
 6 Mirialan     2
 7 Twi'lek      2
 8 Wookiee      2
 9 Zabrak       2
10 Aleena       1
# … with 28 more rows
> starwars %>% count(sex, gender, sort = TRUE)
# A tibble: 6 × 3
  sex            gender        n
  <chr>          <chr>     <int>
1 male           masculine    60
2 female         feminine     16
3 none           masculine     5
4 <NA>           <NA>          4
5 hermaphroditic masculine     1
6 none           feminine      1
> starwars %>% count(birth_decade = round(birth_year, -1))
# A tibble: 15 × 2
   birth_decade     n
          <dbl> <int>
 1           10     1
 2           20     6
 3           30     4
 4           40     6
 5           50     8
 6           60     4
 7           70     4
 8           80     2
 9           90     3
10          100     1
11          110     1
12          200     1
13          600     1
14          900     1
15           NA    44
> 
> # use the `wt` argument to perform a weighted count. This is useful
> # when the data has already been aggregated once
> df <- tribble(
+   ~name,    ~gender,   ~runs,
+   "Max",    "male",       10,
+   "Sandra", "female",      1,
+   "Susan",  "female",      4
+ )
> # counts rows:
> df %>% count(gender)
# A tibble: 2 × 2
  gender     n
  <chr>  <int>
1 female     2
2 male       1
> # counts runs:
> df %>% count(gender, wt = runs)
# A tibble: 2 × 2
  gender     n
  <chr>  <dbl>
1 female     5
2 male      10
> 
> # tally() is a lower-level function that assumes you've done the grouping
> starwars %>% tally()
# A tibble: 1 × 1
      n
  <int>
1    87
> starwars %>% group_by(species) %>% tally()
# A tibble: 38 × 2
   species       n
   <chr>     <int>
 1 Aleena        1
 2 Besalisk      1
 3 Cerean        1
 4 Chagrian      1
 5 Clawdite      1
 6 Droid         6
 7 Dug           1
 8 Ewok          1
 9 Geonosian     1
10 Gungan        3
# … with 28 more rows
> 
> # both count() and tally() have add_ variants that work like
> # mutate() instead of summarise
> df %>% add_count(gender, wt = runs)
# A tibble: 3 × 4
  name   gender  runs     n
  <chr>  <chr>  <dbl> <dbl>
1 Max    male      10    10
2 Sandra female     1     5
3 Susan  female     4     5
> df %>% add_tally(wt = runs)
# A tibble: 3 × 4
  name   gender  runs     n
  <chr>  <chr>  <dbl> <dbl>
1 Max    male      10    15
2 Sandra female     1    15
3 Susan  female     4    15
> 
> 
> 
> cleanEx()
> nameEx("cumall")
> ### * cumall
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cumall
> ### Title: Cumulativate versions of any, all, and mean
> ### Aliases: cumall cumany cummean
> 
> ### ** Examples
> 
> # `cummean()` returns a numeric/integer vector of the same length
> # as the input vector.
> x <- c(1, 3, 5, 2, 2)
> cummean(x)
[1] 1.00 2.00 3.00 2.75 2.60
> cumsum(x) / seq_along(x)
[1] 1.00 2.00 3.00 2.75 2.60
> 
> # `cumall()` and `cumany()` return logicals
> cumall(x < 5)
[1]  TRUE  TRUE FALSE FALSE FALSE
> cumany(x == 3)
[1] FALSE  TRUE  TRUE  TRUE  TRUE
> 
> # `cumall()` vs. `cumany()`
> df <- data.frame(
+   date = as.Date("2020-01-01") + 0:6,
+   balance = c(100, 50, 25, -25, -50, 30, 120)
+ )
> # all rows after first overdraft
> df %>% filter(cumany(balance < 0))
        date balance
1 2020-01-04     -25
2 2020-01-05     -50
3 2020-01-06      30
4 2020-01-07     120
> # all rows until first overdraft
> df %>% filter(cumall(!(balance < 0)))
        date balance
1 2020-01-01     100
2 2020-01-02      50
3 2020-01-03      25
> 
> 
> 
> 
> cleanEx()
> nameEx("desc")
> ### * desc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: desc
> ### Title: Descending order
> ### Aliases: desc
> 
> ### ** Examples
> 
> desc(1:10)
 [1]  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10
> desc(factor(letters))
 [1]  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19
[20] -20 -21 -22 -23 -24 -25 -26
> 
> first_day <- seq(as.Date("1910/1/1"), as.Date("1920/1/1"), "years")
> desc(first_day)
 [1] 21915 21550 21185 20819 20454 20089 19724 19358 18993 18628 18263
> 
> starwars %>% arrange(desc(mass))
# A tibble: 87 × 14
   name    height  mass hair_color  skin_color eye_color birth_year sex   gender
   <chr>    <int> <dbl> <chr>       <chr>      <chr>          <dbl> <chr> <chr> 
 1 Jabba …    175  1358 <NA>        green-tan… orange         600   herm… mascu…
 2 Grievo…    216   159 none        brown, wh… green, y…       NA   male  mascu…
 3 IG-88      200   140 none        metal      red             15   none  mascu…
 4 Darth …    202   136 none        white      yellow          41.9 male  mascu…
 5 Tarfful    234   136 brown       brown      blue            NA   male  mascu…
 6 Owen L…    178   120 brown, grey light      blue            52   male  mascu…
 7 Bossk      190   113 none        green      red             53   male  mascu…
 8 Chewba…    228   112 brown       unknown    blue           200   male  mascu…
 9 Jek To…    180   110 brown       fair       blue            NA   male  mascu…
10 Dexter…    198   102 none        brown      yellow          NA   male  mascu…
# … with 77 more rows, and 5 more variables: homeworld <chr>, species <chr>,
#   films <list>, vehicles <list>, starships <list>
> 
> 
> 
> cleanEx()
> nameEx("dim_desc")
> ### * dim_desc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dim_desc
> ### Title: Describing dimensions
> ### Aliases: dim_desc
> ### Keywords: internal
> 
> ### ** Examples
> 
> dim_desc(mtcars)
[1] "[32 x 11]"
> 
> 
> 
> cleanEx()
> nameEx("distinct")
> ### * distinct
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distinct
> ### Title: Subset distinct/unique rows
> ### Aliases: distinct
> 
> ### ** Examples
> 
> df <- tibble(
+   x = sample(10, 100, rep = TRUE),
+   y = sample(10, 100, rep = TRUE)
+ )
> nrow(df)
[1] 100
> nrow(distinct(df))
[1] 65
> nrow(distinct(df, x, y))
[1] 65
> 
> distinct(df, x)
# A tibble: 10 × 1
       x
   <int>
 1     9
 2     4
 3     7
 4     1
 5     2
 6     3
 7     5
 8    10
 9     6
10     8
> distinct(df, y)
# A tibble: 10 × 1
       y
   <int>
 1     3
 2    10
 3     1
 4     6
 5     4
 6     9
 7     5
 8     7
 9     2
10     8
> 
> # You can choose to keep all other variables as well
> distinct(df, x, .keep_all = TRUE)
# A tibble: 10 × 2
       x     y
   <int> <int>
 1     9     3
 2     4    10
 3     7     3
 4     1     1
 5     2     6
 6     3     9
 7     5     1
 8    10     6
 9     6     3
10     8     2
> distinct(df, y, .keep_all = TRUE)
# A tibble: 10 × 2
       x     y
   <int> <int>
 1     9     3
 2     4    10
 3     1     1
 4     2     6
 5     2     4
 6     3     9
 7     1     5
 8    10     7
 9     9     2
10     9     8
> 
> # You can also use distinct on computed variables
> distinct(df, diff = abs(x - y))
# A tibble: 9 × 1
   diff
  <int>
1     6
2     4
3     0
4     1
5     2
6     3
7     7
8     5
9     8
> 
> # use across() to access select()-style semantics
> distinct(starwars, across(contains("color")))
# A tibble: 67 × 3
   hair_color    skin_color  eye_color
   <chr>         <chr>       <chr>    
 1 blond         fair        blue     
 2 <NA>          gold        yellow   
 3 <NA>          white, blue red      
 4 none          white       yellow   
 5 brown         light       brown    
 6 brown, grey   light       blue     
 7 brown         light       blue     
 8 <NA>          white, red  red      
 9 black         light       brown    
10 auburn, white fair        blue-gray
# … with 57 more rows
> 
> # Grouping -------------------------------------------------
> # The same behaviour applies for grouped data frames,
> # except that the grouping variables are always included
> df <- tibble(
+   g = c(1, 1, 2, 2),
+   x = c(1, 1, 2, 1)
+ ) %>% group_by(g)
> df %>% distinct(x)
# A tibble: 3 × 2
# Groups:   g [2]
      g     x
  <dbl> <dbl>
1     1     1
2     2     2
3     2     1
> 
> 
> 
> 
> cleanEx()
> nameEx("distinct_all")
> ### * distinct_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: distinct_all
> ### Title: Select distinct rows by a selection of variables
> ### Aliases: distinct_all distinct_at distinct_if
> 
> ### ** Examples
> 
> df <- tibble(x = rep(2:5, each = 2) / 2, y = rep(2:3, each = 4) / 2)
> 
> distinct_all(df)
# A tibble: 4 × 2
      x     y
  <dbl> <dbl>
1   1     1  
2   1.5   1  
3   2     1.5
4   2.5   1.5
> # ->
> distinct(df, across())
# A tibble: 4 × 2
      x     y
  <dbl> <dbl>
1   1     1  
2   1.5   1  
3   2     1.5
4   2.5   1.5
> 
> distinct_at(df, vars(x,y))
# A tibble: 4 × 2
      x     y
  <dbl> <dbl>
1   1     1  
2   1.5   1  
3   2     1.5
4   2.5   1.5
> # ->
> distinct(df, across(c(x, y)))
# A tibble: 4 × 2
      x     y
  <dbl> <dbl>
1   1     1  
2   1.5   1  
3   2     1.5
4   2.5   1.5
> 
> distinct_if(df, is.numeric)
# A tibble: 4 × 2
      x     y
  <dbl> <dbl>
1   1     1  
2   1.5   1  
3   2     1.5
4   2.5   1.5
> # ->
> distinct(df, across(where(is.numeric)))
# A tibble: 4 × 2
      x     y
  <dbl> <dbl>
1   1     1  
2   1.5   1  
3   2     1.5
4   2.5   1.5
> 
> # You can supply a function that will be applied before extracting the distinct values
> # The variables of the sorted tibble keep their original values.
> distinct_all(df, round)
# A tibble: 3 × 2
      x     y
  <dbl> <dbl>
1     1     1
2     2     1
3     2     2
> # ->
> distinct(df, across(everything(), round))
# A tibble: 3 × 2
      x     y
  <dbl> <dbl>
1     1     1
2     2     1
3     2     2
> 
> 
> 
> cleanEx()
> nameEx("do")
> ### * do
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: do
> ### Title: Do anything
> ### Aliases: do
> ### Keywords: internal
> 
> ### ** Examples
> 
> # do() with unnamed arguments becomes summarise()
> # . becomes across()
> by_cyl <- mtcars %>% group_by(cyl)
> by_cyl %>% do(head(., 2))
# A tibble: 6 × 11
# Groups:   cyl [3]
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
2  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
3  21       6  160    110  3.9   2.62  16.5     0     1     4     4
4  21       6  160    110  3.9   2.88  17.0     0     1     4     4
5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
6  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
> # ->
> by_cyl %>% summarise(head(across(), 2))
`summarise()` has grouped output by 'cyl'. You can override using the `.groups` argument.
# A tibble: 6 × 11
# Groups:   cyl [3]
    cyl   mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1     4  22.8  108     93  3.85  2.32  18.6     1     1     4     1
2     4  24.4  147.    62  3.69  3.19  20       1     0     4     2
3     6  21    160    110  3.9   2.62  16.5     0     1     4     4
4     6  21    160    110  3.9   2.88  17.0     0     1     4     4
5     8  18.7  360    175  3.15  3.44  17.0     0     0     3     2
6     8  14.3  360    245  3.21  3.57  15.8     0     0     3     4
> by_cyl %>% slice_head(n = 2)
# A tibble: 6 × 11
# Groups:   cyl [3]
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
2  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
3  21       6  160    110  3.9   2.62  16.5     0     1     4     4
4  21       6  160    110  3.9   2.88  17.0     0     1     4     4
5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
6  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
> 
> # Can refer to variables directly
> by_cyl %>% do(mean = mean(.$vs))
# A tibble: 3 × 2
# Rowwise: 
    cyl mean     
  <dbl> <list>   
1     4 <dbl [1]>
2     6 <dbl [1]>
3     8 <dbl [1]>
> # ->
> by_cyl %>% summarise(mean = mean(vs))
# A tibble: 3 × 2
    cyl  mean
  <dbl> <dbl>
1     4 0.909
2     6 0.571
3     8 0    
> 
> # do() with named arguments becomes nest_by() + mutate() & list()
> models <- by_cyl %>% do(mod = lm(mpg ~ disp, data = .))
> # ->
> models <- mtcars %>%
+   nest_by(cyl) %>%
+   mutate(mod = list(lm(mpg ~ disp, data = data)))
> models %>% summarise(rsq = summary(mod)$r.squared)
`summarise()` has grouped output by 'cyl'. You can override using the `.groups` argument.
# A tibble: 3 × 2
# Groups:   cyl [3]
    cyl    rsq
  <dbl>  <dbl>
1     4 0.648 
2     6 0.0106
3     8 0.270 
> 
> # use broom to turn models into data
> models %>% do(data.frame(
+   var = names(coef(.$mod)),
+   coef(summary(.$mod)))
+ )
# A tibble: 6 × 5
# Rowwise: 
  var         Estimate Std..Error t.value   Pr...t..
  <chr>          <dbl>      <dbl>   <dbl>      <dbl>
1 (Intercept) 40.9        3.59     11.4   0.00000120
2 disp        -0.135      0.0332   -4.07  0.00278   
3 (Intercept) 19.1        2.91      6.55  0.00124   
4 disp         0.00361    0.0156    0.232 0.826     
5 (Intercept) 22.0        3.35      6.59  0.0000259 
6 disp        -0.0196     0.00932  -2.11  0.0568    
> # ->
> if (requireNamespace("broom")) {
+   models %>% summarise(broom::tidy(mod))
+ }
Loading required namespace: broom
Failed with error:  ‘there is no package called ‘broom’’
> 
> 
> 
> cleanEx()
> nameEx("explain")
> ### * explain
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: explain
> ### Title: Explain details of a tbl
> ### Aliases: explain show_query
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("filter-joins")
> ### * filter-joins
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filter-joins
> ### Title: Filtering joins
> ### Aliases: filter-joins semi_join semi_join.data.frame anti_join
> ###   anti_join.data.frame
> 
> ### ** Examples
> 
> # "Filtering" joins keep cases from the LHS
> band_members %>% semi_join(band_instruments)
Joining, by = "name"
# A tibble: 2 × 2
  name  band   
  <chr> <chr>  
1 John  Beatles
2 Paul  Beatles
> band_members %>% anti_join(band_instruments)
Joining, by = "name"
# A tibble: 1 × 2
  name  band  
  <chr> <chr> 
1 Mick  Stones
> 
> # To suppress the message about joining variables, supply `by`
> band_members %>% semi_join(band_instruments, by = "name")
# A tibble: 2 × 2
  name  band   
  <chr> <chr>  
1 John  Beatles
2 Paul  Beatles
> # This is good practice in production code
> 
> 
> 
> cleanEx()
> nameEx("filter")
> ### * filter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filter
> ### Title: Subset rows using column values
> ### Aliases: filter
> 
> ### ** Examples
> 
> # Filtering by one criterion
> filter(starwars, species == "Human")
# A tibble: 35 × 14
   name    height  mass hair_color  skin_color eye_color birth_year sex   gender
   <chr>    <int> <dbl> <chr>       <chr>      <chr>          <dbl> <chr> <chr> 
 1 Luke S…    172    77 blond       fair       blue            19   male  mascu…
 2 Darth …    202   136 none        white      yellow          41.9 male  mascu…
 3 Leia O…    150    49 brown       light      brown           19   fema… femin…
 4 Owen L…    178   120 brown, grey light      blue            52   male  mascu…
 5 Beru W…    165    75 brown       light      blue            47   fema… femin…
 6 Biggs …    183    84 black       light      brown           24   male  mascu…
 7 Obi-Wa…    182    77 auburn, wh… fair       blue-gray       57   male  mascu…
 8 Anakin…    188    84 blond       fair       blue            41.9 male  mascu…
 9 Wilhuf…    180    NA auburn, gr… fair       blue            64   male  mascu…
10 Han So…    180    80 brown       fair       brown           29   male  mascu…
# … with 25 more rows, and 5 more variables: homeworld <chr>, species <chr>,
#   films <list>, vehicles <list>, starships <list>
> filter(starwars, mass > 1000)
# A tibble: 1 × 14
  name    height  mass hair_color skin_color  eye_color birth_year sex    gender
  <chr>    <int> <dbl> <chr>      <chr>       <chr>          <dbl> <chr>  <chr> 
1 Jabba …    175  1358 <NA>       green-tan,… orange           600 herma… mascu…
# … with 5 more variables: homeworld <chr>, species <chr>, films <list>,
#   vehicles <list>, starships <list>
> 
> # Filtering by multiple criteria within a single logical expression
> filter(starwars, hair_color == "none" & eye_color == "black")
# A tibble: 9 × 14
  name       height  mass hair_color skin_color eye_color birth_year sex   gender
  <chr>       <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> 
1 Nien Nunb     160    68 none       grey       black             NA male  mascu…
2 Gasgano       122    NA none       white, bl… black             NA male  mascu…
3 Kit Fisto     196    87 none       green      black             NA male  mascu…
4 Plo Koon      188    80 none       orange     black             22 male  mascu…
5 Lama Su       229    88 none       grey       black             NA male  mascu…
6 Taun We       213    NA none       grey       black             NA fema… femin…
7 Shaak Ti      178    57 none       red, blue… black             NA fema… femin…
8 Tion Medon    206    80 none       grey       black             NA male  mascu…
9 BB8            NA    NA none       none       black             NA none  mascu…
# … with 5 more variables: homeworld <chr>, species <chr>, films <list>,
#   vehicles <list>, starships <list>
> filter(starwars, hair_color == "none" | eye_color == "black")
# A tibble: 38 × 14
   name    height  mass hair_color skin_color  eye_color birth_year sex   gender
   <chr>    <int> <dbl> <chr>      <chr>       <chr>          <dbl> <chr> <chr> 
 1 Darth …    202   136 none       white       yellow          41.9 male  mascu…
 2 Greedo     173    74 <NA>       green       black           44   male  mascu…
 3 IG-88      200   140 none       metal       red             15   none  mascu…
 4 Bossk      190   113 none       green       red             53   male  mascu…
 5 Lobot      175    79 none       light       blue            37   male  mascu…
 6 Ackbar     180    83 none       brown mott… orange          41   male  mascu…
 7 Nien N…    160    68 none       grey        black           NA   male  mascu…
 8 Nute G…    191    90 none       mottled gr… red             NA   male  mascu…
 9 Jar Ja…    196    66 none       orange      orange          52   male  mascu…
10 Roos T…    224    82 none       grey        orange          NA   male  mascu…
# … with 28 more rows, and 5 more variables: homeworld <chr>, species <chr>,
#   films <list>, vehicles <list>, starships <list>
> 
> # When multiple expressions are used, they are combined using &
> filter(starwars, hair_color == "none", eye_color == "black")
# A tibble: 9 × 14
  name       height  mass hair_color skin_color eye_color birth_year sex   gender
  <chr>       <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> <chr> 
1 Nien Nunb     160    68 none       grey       black             NA male  mascu…
2 Gasgano       122    NA none       white, bl… black             NA male  mascu…
3 Kit Fisto     196    87 none       green      black             NA male  mascu…
4 Plo Koon      188    80 none       orange     black             22 male  mascu…
5 Lama Su       229    88 none       grey       black             NA male  mascu…
6 Taun We       213    NA none       grey       black             NA fema… femin…
7 Shaak Ti      178    57 none       red, blue… black             NA fema… femin…
8 Tion Medon    206    80 none       grey       black             NA male  mascu…
9 BB8            NA    NA none       none       black             NA none  mascu…
# … with 5 more variables: homeworld <chr>, species <chr>, films <list>,
#   vehicles <list>, starships <list>
> 
> 
> # The filtering operation may yield different results on grouped
> # tibbles because the expressions are computed within groups.
> #
> # The following filters rows where `mass` is greater than the
> # global average:
> starwars %>% filter(mass > mean(mass, na.rm = TRUE))
# A tibble: 10 × 14
   name    height  mass hair_color  skin_color eye_color birth_year sex   gender
   <chr>    <int> <dbl> <chr>       <chr>      <chr>          <dbl> <chr> <chr> 
 1 Darth …    202   136 none        white      yellow          41.9 male  mascu…
 2 Owen L…    178   120 brown, grey light      blue            52   male  mascu…
 3 Chewba…    228   112 brown       unknown    blue           200   male  mascu…
 4 Jabba …    175  1358 <NA>        green-tan… orange         600   herm… mascu…
 5 Jek To…    180   110 brown       fair       blue            NA   male  mascu…
 6 IG-88      200   140 none        metal      red             15   none  mascu…
 7 Bossk      190   113 none        green      red             53   male  mascu…
 8 Dexter…    198   102 none        brown      yellow          NA   male  mascu…
 9 Grievo…    216   159 none        brown, wh… green, y…       NA   male  mascu…
10 Tarfful    234   136 brown       brown      blue            NA   male  mascu…
# … with 5 more variables: homeworld <chr>, species <chr>, films <list>,
#   vehicles <list>, starships <list>
> 
> # Whereas this keeps rows with `mass` greater than the gender
> # average:
> starwars %>% group_by(gender) %>% filter(mass > mean(mass, na.rm = TRUE))
# A tibble: 14 × 14
# Groups:   gender [2]
   name   height   mass hair_color  skin_color eye_color birth_year sex   gender
   <chr>   <int>  <dbl> <chr>       <chr>      <chr>          <dbl> <chr> <chr> 
 1 Darth…    202  136   none        white      yellow          41.9 male  mascu…
 2 Owen …    178  120   brown, grey light      blue            52   male  mascu…
 3 Beru …    165   75   brown       light      blue            47   fema… femin…
 4 Chewb…    228  112   brown       unknown    blue           200   male  mascu…
 5 Jabba…    175 1358   <NA>        green-tan… orange         600   herm… mascu…
 6 Jek T…    180  110   brown       fair       blue            NA   male  mascu…
 7 IG-88     200  140   none        metal      red             15   none  mascu…
 8 Bossk     190  113   none        green      red             53   male  mascu…
 9 Ayla …    178   55   none        blue       hazel           48   fema… femin…
10 Lumin…    170   56.2 black       yellow     blue            58   fema… femin…
11 Zam W…    168   55   blonde      fair, gre… yellow          NA   fema… femin…
12 Shaak…    178   57   none        red, blue… black           NA   fema… femin…
13 Griev…    216  159   none        brown, wh… green, y…       NA   male  mascu…
14 Tarff…    234  136   brown       brown      blue            NA   male  mascu…
# … with 5 more variables: homeworld <chr>, species <chr>, films <list>,
#   vehicles <list>, starships <list>
> 
> 
> # To refer to column names that are stored as strings, use the `.data` pronoun:
> vars <- c("mass", "height")
> cond <- c(80, 150)
> starwars %>%
+   filter(
+     .data[[vars[[1]]]] > cond[[1]],
+     .data[[vars[[2]]]] > cond[[2]]
+   )
# A tibble: 21 × 14
   name    height  mass hair_color  skin_color eye_color birth_year sex   gender
   <chr>    <int> <dbl> <chr>       <chr>      <chr>          <dbl> <chr> <chr> 
 1 Darth …    202   136 none        white      yellow          41.9 male  mascu…
 2 Owen L…    178   120 brown, grey light      blue            52   male  mascu…
 3 Biggs …    183    84 black       light      brown           24   male  mascu…
 4 Anakin…    188    84 blond       fair       blue            41.9 male  mascu…
 5 Chewba…    228   112 brown       unknown    blue           200   male  mascu…
 6 Jabba …    175  1358 <NA>        green-tan… orange         600   herm… mascu…
 7 Jek To…    180   110 brown       fair       blue            NA   male  mascu…
 8 IG-88      200   140 none        metal      red             15   none  mascu…
 9 Bossk      190   113 none        green      red             53   male  mascu…
10 Ackbar     180    83 none        brown mot… orange          41   male  mascu…
# … with 11 more rows, and 5 more variables: homeworld <chr>, species <chr>,
#   films <list>, vehicles <list>, starships <list>
> # Learn more in ?dplyr_data_masking
> 
> 
> 
> cleanEx()
> nameEx("filter_all")
> ### * filter_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filter_all
> ### Title: Filter within a selection of variables
> ### Aliases: filter_all filter_if filter_at
> 
> ### ** Examples
> 
> # While filter() accepts expressions with specific variables, the
> # scoped filter verbs take an expression with the pronoun `.` and
> # replicate it over all variables. This expression should be quoted
> # with all_vars() or any_vars():
> all_vars(is.na(.))
<predicate intersection>
<quosure>
expr: ^is.na(.)
env:  global
> any_vars(is.na(.))
<predicate union>
<quosure>
expr: ^is.na(.)
env:  global
> 
> 
> # You can take the intersection of the replicated expressions:
> filter_all(mtcars, all_vars(. > 150))
 [1] mpg  cyl  disp hp   drat wt   qsec vs   am   gear carb
<0 rows> (or 0-length row.names)
> # ->
> filter(mtcars, if_all(everything(), ~ .x > 150))
 [1] mpg  cyl  disp hp   drat wt   qsec vs   am   gear carb
<0 rows> (or 0-length row.names)
> 
> # Or the union:
> filter_all(mtcars, any_vars(. > 150))
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
> # ->
> filter(mtcars, if_any(everything(), ~ . > 150))
                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
> 
> 
> # You can vary the selection of columns on which to apply the
> # predicate. filter_at() takes a vars() specification:
> filter_at(mtcars, vars(starts_with("d")), any_vars((. %% 2) == 0))
                     mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive      21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
Duster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4
Cadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4
Dodge Challenger    15.5   8  318 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8  304 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8  350 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8  400 175 3.08 3.845 17.05  0  0    3    2
> # ->
> filter(mtcars, if_any(starts_with("d"), ~ (.x %% 2) == 0))
                     mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive      21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
Duster 360          14.3   8  360 245 3.21 3.570 15.84  0  0    3    4
Cadillac Fleetwood  10.4   8  472 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8  460 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8  440 230 3.23 5.345 17.42  0  0    3    4
Dodge Challenger    15.5   8  318 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8  304 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8  350 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8  400 175 3.08 3.845 17.05  0  0    3    2
> 
> # And filter_if() selects variables with a predicate function:
> filter_if(mtcars, ~ all(floor(.) == .), all_vars(. != 0))
                mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> # ->
> is_int <- function(x) all(floor(x) == x)
> filter(mtcars, if_all(where(is_int), ~ .x != 0))
                mpg cyl  disp  hp drat    wt  qsec vs am gear carb
Datsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Fiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Fiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Lotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Volvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> 
> 
> 
> cleanEx()
> nameEx("funs")
> ### * funs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: funs
> ### Title: Create a list of function calls
> ### Aliases: funs
> ### Keywords: internal
> 
> ### ** Examples
> 
> funs("mean", mean(., na.rm = TRUE))
Warning: `funs()` was deprecated in dplyr 0.8.0.
Please use a list of either functions or lambdas: 

  # Simple named list: 
  list(mean = mean, median = median)

  # Auto named with `tibble::lst()`: 
  tibble::lst(mean, median)

  # Using lambdas
  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated.
<fun_calls>
$ mean: mean(.)
$ mean: mean(., na.rm = TRUE)
> # ->
> list(mean = mean, mean = ~ mean(.x, na.rm = TRUE))
$mean
function (x, ...) 
UseMethod("mean")
<bytecode: 0x5644c0f7dd00>
<environment: namespace:base>

$mean
~mean(.x, na.rm = TRUE)

> 
> funs(m1 = mean, m2 = "mean", m3 = mean(., na.rm = TRUE))
<fun_calls>
$ m1: mean(.)
$ m2: mean(.)
$ m3: mean(., na.rm = TRUE)
> # ->
> list(m1 = mean, m2 = "mean", m3 = ~ mean(.x, na.rm = TRUE))
$m1
function (x, ...) 
UseMethod("mean")
<bytecode: 0x5644c0f7dd00>
<environment: namespace:base>

$m2
[1] "mean"

$m3
~mean(.x, na.rm = TRUE)

> 
> 
> 
> cleanEx()
> nameEx("group_by")
> ### * group_by
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_by
> ### Title: Group by one or more variables
> ### Aliases: group_by ungroup
> 
> ### ** Examples
> 
> by_cyl <- mtcars %>% group_by(cyl)
> 
> # grouping doesn't change how the data looks (apart from listing
> # how it's grouped):
> by_cyl
# A tibble: 32 × 11
# Groups:   cyl [3]
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# … with 22 more rows
> 
> # It changes how it acts with the other dplyr verbs:
> by_cyl %>% summarise(
+   disp = mean(disp),
+   hp = mean(hp)
+ )
# A tibble: 3 × 3
    cyl  disp    hp
  <dbl> <dbl> <dbl>
1     4  105.  82.6
2     6  183. 122. 
3     8  353. 209. 
> by_cyl %>% filter(disp == max(disp))
# A tibble: 3 × 11
# Groups:   cyl [3]
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
2  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
3  10.4     8  472    205  2.93  5.25  18.0     0     0     3     4
> 
> # Each call to summarise() removes a layer of grouping
> by_vs_am <- mtcars %>% group_by(vs, am)
> by_vs <- by_vs_am %>% summarise(n = n())
`summarise()` has grouped output by 'vs'. You can override using the `.groups` argument.
> by_vs
# A tibble: 4 × 3
# Groups:   vs [2]
     vs    am     n
  <dbl> <dbl> <int>
1     0     0    12
2     0     1     6
3     1     0     7
4     1     1     7
> by_vs %>% summarise(n = sum(n))
# A tibble: 2 × 2
     vs     n
  <dbl> <int>
1     0    18
2     1    14
> 
> # To removing grouping, use ungroup
> by_vs %>%
+   ungroup() %>%
+   summarise(n = sum(n))
# A tibble: 1 × 1
      n
  <int>
1    32
> 
> # You can group by expressions: this is just short-hand for
> # a mutate() followed by a group_by()
> mtcars %>% group_by(vsam = vs + am)
# A tibble: 32 × 12
# Groups:   vsam [3]
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb  vsam
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4     1
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4     1
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1     2
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2     0
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4     0
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2     1
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2     1
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4     1
# … with 22 more rows
> 
> # By default, group_by() overrides existing grouping
> by_cyl %>%
+   group_by(vs, am) %>%
+   group_vars()
[1] "vs" "am"
> 
> # Use add = TRUE to instead append
> by_cyl %>%
+   group_by(vs, am, .add = TRUE) %>%
+   group_vars()
[1] "cyl" "vs"  "am" 
> 
> 
> # when factors are involved and .drop = FALSE, groups can be empty
> tbl <- tibble(
+   x = 1:10,
+   y = factor(rep(c("a", "c"), each  = 5), levels = c("a", "b", "c"))
+ )
> tbl %>%
+   group_by(y, .drop = FALSE) %>%
+   group_rows()
<list_of<integer>[3]>
[[1]]
[1] 1 2 3 4 5

[[2]]
integer(0)

[[3]]
[1]  6  7  8  9 10

> 
> 
> 
> 
> cleanEx()
> nameEx("group_by_all")
> ### * group_by_all
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_by_all
> ### Title: Group by a selection of variables
> ### Aliases: group_by_all group_by_at group_by_if
> 
> ### ** Examples
> 
> # Group a data frame by all variables:
> group_by_all(mtcars)
# A tibble: 32 × 11
# Groups:   mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb [32]
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# … with 22 more rows
> # ->
> mtcars %>% group_by(across())
# A tibble: 32 × 11
# Groups:   mpg, cyl, disp, hp, drat, wt, qsec, vs, am, gear, carb [32]
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# … with 22 more rows
> 
> # Group by variables selected with a predicate:
> group_by_if(iris, is.factor)
# A tibble: 150 × 5
# Groups:   Species [3]
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# … with 140 more rows
> # ->
> iris %>% group_by(across(where(is.factor)))
# A tibble: 150 × 5
# Groups:   Species [3]
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# … with 140 more rows
> 
> # Group by variables selected by name:
> group_by_at(mtcars, vars(vs, am))
# A tibble: 32 × 11
# Groups:   vs, am [4]
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# … with 22 more rows
> # ->
> mtcars %>% group_by(across(c(vs, am)))
# A tibble: 32 × 11
# Groups:   vs, am [4]
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# … with 22 more rows
> 
> # Like group_by(), the scoped variants have optional mutate
> # semantics. This provide a shortcut for group_by() + mutate():
> d <- tibble(x=c(1,1,2,2), y=c(1,2,1,2))
> group_by_all(d, as.factor)
# A tibble: 4 × 2
# Groups:   x, y [4]
  x     y    
  <fct> <fct>
1 1     1    
2 1     2    
3 2     1    
4 2     2    
> # ->
> d %>% group_by(across(everything(), as.factor))
# A tibble: 4 × 2
# Groups:   x, y [4]
  x     y    
  <fct> <fct>
1 1     1    
2 1     2    
3 2     1    
4 2     2    
> 
> group_by_if(iris, is.factor, as.character)
# A tibble: 150 × 5
# Groups:   Species [3]
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <chr>  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# … with 140 more rows
> # ->
> iris %>% group_by(across(where(is.factor), as.character))
# A tibble: 150 × 5
# Groups:   Species [3]
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <chr>  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# … with 140 more rows
> 
> 
> 
> cleanEx()
> nameEx("group_by_drop_default")
> ### * group_by_drop_default
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_by_drop_default
> ### Title: Default value for .drop argument of group_by
> ### Aliases: group_by_drop_default
> ### Keywords: internal
> 
> ### ** Examples
> 
> group_by_drop_default(iris)
[1] TRUE
> 
> iris %>%
+   group_by(Species) %>%
+   group_by_drop_default()
[1] TRUE
> 
> iris %>%
+   group_by(Species, .drop = FALSE) %>%
+   group_by_drop_default()
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("group_cols")
> ### * group_cols
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_cols
> ### Title: Select grouping variables
> ### Aliases: group_cols
> 
> ### ** Examples
> 
> gdf <- iris %>% group_by(Species)
> gdf %>% select(group_cols())
# A tibble: 150 × 1
# Groups:   Species [3]
   Species
   <fct>  
 1 setosa 
 2 setosa 
 3 setosa 
 4 setosa 
 5 setosa 
 6 setosa 
 7 setosa 
 8 setosa 
 9 setosa 
10 setosa 
# … with 140 more rows
> 
> # Remove the grouping variables from mutate selections:
> gdf %>% mutate_at(vars(-group_cols()), `/`, 100)
# A tibble: 150 × 5
# Groups:   Species [3]
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1        0.051       0.035        0.014       0.002 setosa 
 2        0.049       0.03         0.014       0.002 setosa 
 3        0.047       0.032        0.013       0.002 setosa 
 4        0.046       0.031        0.015       0.002 setosa 
 5        0.05        0.036        0.014       0.002 setosa 
 6        0.054       0.039        0.017       0.004 setosa 
 7        0.046       0.034        0.014       0.003 setosa 
 8        0.05        0.034        0.015       0.002 setosa 
 9        0.044       0.029        0.014       0.002 setosa 
10        0.049       0.031        0.015       0.001 setosa 
# … with 140 more rows
> # -> No longer necessary with across()
> gdf %>% mutate(across(everything(), ~ . / 100))
# A tibble: 150 × 5
# Groups:   Species [3]
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1        0.051       0.035        0.014       0.002 setosa 
 2        0.049       0.03         0.014       0.002 setosa 
 3        0.047       0.032        0.013       0.002 setosa 
 4        0.046       0.031        0.015       0.002 setosa 
 5        0.05        0.036        0.014       0.002 setosa 
 6        0.054       0.039        0.017       0.004 setosa 
 7        0.046       0.034        0.014       0.003 setosa 
 8        0.05        0.034        0.015       0.002 setosa 
 9        0.044       0.029        0.014       0.002 setosa 
10        0.049       0.031        0.015       0.001 setosa 
# … with 140 more rows
> 
> 
> 
> cleanEx()
> nameEx("group_data")
> ### * group_data
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_data
> ### Title: Grouping metadata
> ### Aliases: group_data group_keys group_rows group_indices group_vars
> ###   groups group_size n_groups
> ### Keywords: internal
> 
> ### ** Examples
> 
> df <- tibble(x = c(1,1,2,2))
> group_vars(df)
character(0)
> group_rows(df)
<list_of<integer>[1]>
[[1]]
[1] 1 2 3 4

> group_data(df)
# A tibble: 1 × 1
        .rows
  <list<int>>
1         [4]
> group_indices(df)
[1] 1 1 1 1
> 
> gf <- group_by(df, x)
> group_vars(gf)
[1] "x"
> group_rows(gf)
<list_of<integer>[2]>
[[1]]
[1] 1 2

[[2]]
[1] 3 4

> group_data(gf)
# A tibble: 2 × 2
      x       .rows
  <dbl> <list<int>>
1     1         [2]
2     2         [2]
> group_indices(gf)
[1] 1 1 2 2
> 
> 
> 
> cleanEx()
> nameEx("group_map")
> ### * group_map
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_map
> ### Title: Apply a function to each group
> ### Aliases: group_map group_modify group_walk
> 
> ### ** Examples
> 
> 
> # return a list
> mtcars %>%
+   group_by(cyl) %>%
+   group_map(~ head(.x, 2L))
[[1]]
# A tibble: 2 × 10
    mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1  22.8  108     93  3.85  2.32  18.6     1     1     4     1
2  24.4  147.    62  3.69  3.19  20       1     0     4     2

[[2]]
# A tibble: 2 × 10
    mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1    21   160   110   3.9  2.62  16.5     0     1     4     4
2    21   160   110   3.9  2.88  17.0     0     1     4     4

[[3]]
# A tibble: 2 × 10
    mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1  18.7   360   175  3.15  3.44  17.0     0     0     3     2
2  14.3   360   245  3.21  3.57  15.8     0     0     3     4

> 
> # return a tibble grouped by `cyl` with 2 rows per group
> # the grouping data is recalculated
> mtcars %>%
+   group_by(cyl) %>%
+   group_modify(~ head(.x, 2L))
# A tibble: 6 × 11
# Groups:   cyl [3]
    cyl   mpg  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1     4  22.8  108     93  3.85  2.32  18.6     1     1     4     1
2     4  24.4  147.    62  3.69  3.19  20       1     0     4     2
3     6  21    160    110  3.9   2.62  16.5     0     1     4     4
4     6  21    160    110  3.9   2.88  17.0     0     1     4     4
5     8  18.7  360    175  3.15  3.44  17.0     0     0     3     2
6     8  14.3  360    245  3.21  3.57  15.8     0     0     3     4
> 
> if (requireNamespace("broom", quietly = TRUE)) {
+   # a list of tibbles
+   iris %>%
+     group_by(Species) %>%
+     group_map(~ broom::tidy(lm(Petal.Length ~ Sepal.Length, data = .x)))
+ 
+   # a restructured grouped tibble
+   iris %>%
+     group_by(Species) %>%
+     group_modify(~ broom::tidy(lm(Petal.Length ~ Sepal.Length, data = .x)))
+ }
> 
> # a list of vectors
> iris %>%
+   group_by(Species) %>%
+   group_map(~ quantile(.x$Petal.Length, probs = c(0.25, 0.5, 0.75)))
[[1]]
  25%   50%   75% 
1.400 1.500 1.575 

[[2]]
 25%  50%  75% 
4.00 4.35 4.60 

[[3]]
  25%   50%   75% 
5.100 5.550 5.875 

> 
> # to use group_modify() the lambda must return a data frame
> iris %>%
+   group_by(Species) %>%
+   group_modify(~ {
+      quantile(.x$Petal.Length, probs = c(0.25, 0.5, 0.75)) %>%
+      tibble::enframe(name = "prob", value = "quantile")
+   })
# A tibble: 9 × 3
# Groups:   Species [3]
  Species    prob  quantile
  <fct>      <chr>    <dbl>
1 setosa     25%       1.4 
2 setosa     50%       1.5 
3 setosa     75%       1.58
4 versicolor 25%       4   
5 versicolor 50%       4.35
6 versicolor 75%       4.6 
7 virginica  25%       5.1 
8 virginica  50%       5.55
9 virginica  75%       5.88
> 
> iris %>%
+   group_by(Species) %>%
+   group_modify(~ {
+     .x %>%
+       purrr::map_dfc(fivenum) %>%
+       mutate(nms = c("min", "Q1", "median", "Q3", "max"))
+   })
# A tibble: 15 × 6
# Groups:   Species [3]
   Species    Sepal.Length Sepal.Width Petal.Length Petal.Width nms   
   <fct>             <dbl>       <dbl>        <dbl>       <dbl> <chr> 
 1 setosa              4.3         2.3         1            0.1 min   
 2 setosa              4.8         3.2         1.4          0.2 Q1    
 3 setosa              5           3.4         1.5          0.2 median
 4 setosa              5.2         3.7         1.6          0.3 Q3    
 5 setosa              5.8         4.4         1.9          0.6 max   
 6 versicolor          4.9         2           3            1   min   
 7 versicolor          5.6         2.5         4            1.2 Q1    
 8 versicolor          5.9         2.8         4.35         1.3 median
 9 versicolor          6.3         3           4.6          1.5 Q3    
10 versicolor          7           3.4         5.1          1.8 max   
11 virginica           4.9         2.2         4.5          1.4 min   
12 virginica           6.2         2.8         5.1          1.8 Q1    
13 virginica           6.5         3           5.55         2   median
14 virginica           6.9         3.2         5.9          2.3 Q3    
15 virginica           7.9         3.8         6.9          2.5 max   
> 
> # group_walk() is for side effects
> dir.create(temp <- tempfile())
> iris %>%
+   group_by(Species) %>%
+   group_walk(~ write.csv(.x, file = file.path(temp, paste0(.y$Species, ".csv"))))
> list.files(temp, pattern = "csv$")
[1] "setosa.csv"     "versicolor.csv" "virginica.csv" 
> unlink(temp, recursive = TRUE)
> 
> # group_modify() and ungrouped data frames
> mtcars %>%
+   group_modify(~ head(.x, 2L))
              mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4      21   6  160 110  3.9 2.620 16.46  0  1    4    4
Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4
> 
> 
> 
> 
> cleanEx()
> nameEx("group_nest")
> ### * group_nest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_nest
> ### Title: Nest a tibble using a grouping specification
> ### Aliases: group_nest
> ### Keywords: internal
> 
> ### ** Examples
> 
> 
> #----- use case 1: a grouped data frame
> iris %>%
+   group_by(Species) %>%
+   group_nest()
# A tibble: 3 × 2
  Species                  data
  <fct>      <list<tibble[,4]>>
1 setosa               [50 × 4]
2 versicolor           [50 × 4]
3 virginica            [50 × 4]
> 
> # this can be useful if the grouped data has been altered before nesting
> iris %>%
+   group_by(Species) %>%
+   filter(Sepal.Length > mean(Sepal.Length)) %>%
+   group_nest()
# A tibble: 3 × 2
  Species                  data
  <fct>      <list<tibble[,4]>>
1 setosa               [22 × 4]
2 versicolor           [24 × 4]
3 virginica            [22 × 4]
> 
> #----- use case 2: using group_nest() on a ungrouped data frame with
> #                  a grouping specification that uses the data mask
> starwars %>%
+   group_nest(species, homeworld)
# A tibble: 58 × 3
   species  homeworld                  data
   <chr>    <chr>       <list<tibble[,12]>>
 1 Aleena   Aleen Minor            [1 × 12]
 2 Besalisk Ojom                   [1 × 12]
 3 Cerean   Cerea                  [1 × 12]
 4 Chagrian Champala               [1 × 12]
 5 Clawdite Zolan                  [1 × 12]
 6 Droid    Naboo                  [1 × 12]
 7 Droid    Tatooine               [2 × 12]
 8 Droid    <NA>                   [3 × 12]
 9 Dug      Malastare              [1 × 12]
10 Ewok     Endor                  [1 × 12]
# … with 48 more rows
> 
> 
> 
> cleanEx()
> nameEx("group_split")
> ### * group_split
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_split
> ### Title: Split data frame by groups
> ### Aliases: group_split
> 
> ### ** Examples
> 
> # ----- use case 1 : on an already grouped tibble
> ir <- iris %>%
+   group_by(Species)
> 
> group_split(ir)
<list_of<
  tbl_df<
    Sepal.Length: double
    Sepal.Width : double
    Petal.Length: double
    Petal.Width : double
    Species     : factor<fb977>
  >
>[3]>
[[1]]
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# … with 40 more rows

[[2]]
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   
          <dbl>       <dbl>        <dbl>       <dbl> <fct>     
 1          7           3.2          4.7         1.4 versicolor
 2          6.4         3.2          4.5         1.5 versicolor
 3          6.9         3.1          4.9         1.5 versicolor
 4          5.5         2.3          4           1.3 versicolor
 5          6.5         2.8          4.6         1.5 versicolor
 6          5.7         2.8          4.5         1.3 versicolor
 7          6.3         3.3          4.7         1.6 versicolor
 8          4.9         2.4          3.3         1   versicolor
 9          6.6         2.9          4.6         1.3 versicolor
10          5.2         2.7          3.9         1.4 versicolor
# … with 40 more rows

[[3]]
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species  
          <dbl>       <dbl>        <dbl>       <dbl> <fct>    
 1          6.3         3.3          6           2.5 virginica
 2          5.8         2.7          5.1         1.9 virginica
 3          7.1         3            5.9         2.1 virginica
 4          6.3         2.9          5.6         1.8 virginica
 5          6.5         3            5.8         2.2 virginica
 6          7.6         3            6.6         2.1 virginica
 7          4.9         2.5          4.5         1.7 virginica
 8          7.3         2.9          6.3         1.8 virginica
 9          6.7         2.5          5.8         1.8 virginica
10          7.2         3.6          6.1         2.5 virginica
# … with 40 more rows

> group_keys(ir)
# A tibble: 3 × 1
  Species   
  <fct>     
1 setosa    
2 versicolor
3 virginica 
> 
> # this can be useful if the grouped data has been altered before the split
> ir <- iris %>%
+   group_by(Species) %>%
+   filter(Sepal.Length > mean(Sepal.Length))
> 
> group_split(ir)
<list_of<
  tbl_df<
    Sepal.Length: double
    Sepal.Width : double
    Petal.Length: double
    Petal.Width : double
    Species     : factor<fb977>
  >
>[3]>
[[1]]
# A tibble: 22 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1          5.1         3.5          1.4         0.2 setosa 
 2          5.4         3.9          1.7         0.4 setosa 
 3          5.4         3.7          1.5         0.2 setosa 
 4          5.8         4            1.2         0.2 setosa 
 5          5.7         4.4          1.5         0.4 setosa 
 6          5.4         3.9          1.3         0.4 setosa 
 7          5.1         3.5          1.4         0.3 setosa 
 8          5.7         3.8          1.7         0.3 setosa 
 9          5.1         3.8          1.5         0.3 setosa 
10          5.4         3.4          1.7         0.2 setosa 
# … with 12 more rows

[[2]]
# A tibble: 24 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   
          <dbl>       <dbl>        <dbl>       <dbl> <fct>     
 1          7           3.2          4.7         1.4 versicolor
 2          6.4         3.2          4.5         1.5 versicolor
 3          6.9         3.1          4.9         1.5 versicolor
 4          6.5         2.8          4.6         1.5 versicolor
 5          6.3         3.3          4.7         1.6 versicolor
 6          6.6         2.9          4.6         1.3 versicolor
 7          6           2.2          4           1   versicolor
 8          6.1         2.9          4.7         1.4 versicolor
 9          6.7         3.1          4.4         1.4 versicolor
10          6.2         2.2          4.5         1.5 versicolor
# … with 14 more rows

[[3]]
# A tibble: 22 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species  
          <dbl>       <dbl>        <dbl>       <dbl> <fct>    
 1          7.1         3            5.9         2.1 virginica
 2          7.6         3            6.6         2.1 virginica
 3          7.3         2.9          6.3         1.8 virginica
 4          6.7         2.5          5.8         1.8 virginica
 5          7.2         3.6          6.1         2.5 virginica
 6          6.8         3            5.5         2.1 virginica
 7          7.7         3.8          6.7         2.2 virginica
 8          7.7         2.6          6.9         2.3 virginica
 9          6.9         3.2          5.7         2.3 virginica
10          7.7         2.8          6.7         2   virginica
# … with 12 more rows

> group_keys(ir)
# A tibble: 3 × 1
  Species   
  <fct>     
1 setosa    
2 versicolor
3 virginica 
> 
> # ----- use case 2: using a group_by() grouping specification
> 
> # both group_split() and group_keys() have to perform the grouping
> # so it only makes sense to do this if you only need one or the other
> iris %>%
+   group_split(Species)
<list_of<
  tbl_df<
    Sepal.Length: double
    Sepal.Width : double
    Petal.Length: double
    Petal.Width : double
    Species     : factor<fb977>
  >
>[3]>
[[1]]
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# … with 40 more rows

[[2]]
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species   
          <dbl>       <dbl>        <dbl>       <dbl> <fct>     
 1          7           3.2          4.7         1.4 versicolor
 2          6.4         3.2          4.5         1.5 versicolor
 3          6.9         3.1          4.9         1.5 versicolor
 4          5.5         2.3          4           1.3 versicolor
 5          6.5         2.8          4.6         1.5 versicolor
 6          5.7         2.8          4.5         1.3 versicolor
 7          6.3         3.3          4.7         1.6 versicolor
 8          4.9         2.4          3.3         1   versicolor
 9          6.6         2.9          4.6         1.3 versicolor
10          5.2         2.7          3.9         1.4 versicolor
# … with 40 more rows

[[3]]
# A tibble: 50 × 5
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species  
          <dbl>       <dbl>        <dbl>       <dbl> <fct>    
 1          6.3         3.3          6           2.5 virginica
 2          5.8         2.7          5.1         1.9 virginica
 3          7.1         3            5.9         2.1 virginica
 4          6.3         2.9          5.6         1.8 virginica
 5          6.5         3            5.8         2.2 virginica
 6          7.6         3            6.6         2.1 virginica
 7          4.9         2.5          4.5         1.7 virginica
 8          7.3         2.9          6.3         1.8 virginica
 9          6.7         2.5          5.8         1.8 virginica
10          7.2         3.6          6.1         2.5 virginica
# … with 40 more rows

> 
> iris %>%
+   group_keys(Species)
Warning: The `...` argument of `group_keys()` is deprecated as of dplyr 1.0.0.
Please `group_by()` first
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated.
# A tibble: 3 × 1
  Species   
  <fct>     
1 setosa    
2 versicolor
3 virginica 
> 
> 
> 
> cleanEx()
> nameEx("group_trim")
> ### * group_trim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: group_trim
> ### Title: Trim grouping structure
> ### Aliases: group_trim
> 
> ### ** Examples
> 
> iris %>%
+   group_by(Species) %>%
+   filter(Species == "setosa", .preserve = TRUE) %>%
+   group_trim()
# A tibble: 50 × 5
# Groups:   Species [1]
   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
          <dbl>       <dbl>        <dbl>       <dbl> <fct>  
 1          5.1         3.5          1.4         0.2 setosa 
 2          4.9         3            1.4         0.2 setosa 
 3          4.7         3.2          1.3         0.2 setosa 
 4          4.6         3.1          1.5         0.2 setosa 
 5          5           3.6          1.4         0.2 setosa 
 6          5.4         3.9          1.7         0.4 setosa 
 7          4.6         3.4          1.4         0.3 setosa 
 8          5           3.4          1.5         0.2 setosa 
 9          4.4         2.9          1.4         0.2 setosa 
10          4.9         3.1          1.5         0.1 setosa 
# … with 40 more rows
> 
> 
> 
> cleanEx()
> nameEx("ident")
> ### * ident
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ident
> ### Title: Flag a character vector as SQL identifiers
> ### Aliases: ident
> 
> ### ** Examples
> 
> # Identifiers are escaped with "
> if (requireNamespace("dbplyr", quietly = TRUE)) {
+   ident("x")
+ }
> 
> 
> 
> cleanEx()
> nameEx("if_else")
> ### * if_else
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: if_else
> ### Title: Vectorised if
> ### Aliases: if_else
> 
> ### ** Examples
> 
> x <- c(-5:5, NA)
> if_else(x < 0, NA_integer_, x)
 [1] NA NA NA NA NA  0  1  2  3  4  5 NA
> if_else(x < 0, "negative", "positive", "missing")
 [1] "negative" "negative" "negative" "negative" "negative" "positive"
 [7] "positive" "positive" "positive" "positive" "positive" "missing" 
> 
> # Unlike ifelse, if_else preserves types
> x <- factor(sample(letters[1:5], 10, replace = TRUE))
> ifelse(x %in% c("a", "b", "c"), x, factor(NA))
 [1]  1 NA  1  2 NA  3  2  3  3  1
> if_else(x %in% c("a", "b", "c"), x, factor(NA))
 [1] a    <NA> a    b    <NA> c    b    c    c    a   
Levels: a b c d e
> # Attributes are taken from the `true` vector,
> 
> 
> 
> cleanEx()
> nameEx("lead-lag")
> ### * lead-lag
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lead-lag
> ### Title: Compute lagged or leading values
> ### Aliases: lead-lag lag lead
> 
> ### ** Examples
> 
> lag(1:5)
[1] NA  1  2  3  4
> lead(1:5)
[1]  2  3  4  5 NA
> 
> x <- 1:5
> tibble(behind = lag(x), x, ahead = lead(x))
# A tibble: 5 × 3
  behind     x ahead
   <int> <int> <int>
1     NA     1     2
2      1     2     3
3      2     3     4
4      3     4     5
5      4     5    NA
> 
> # If you want to look more rows behind or ahead, use `n`
> lag(1:5, n = 1)
[1] NA  1  2  3  4
> lag(1:5, n = 2)
[1] NA NA  1  2  3
> 
> lead(1:5, n = 1)
[1]  2  3  4  5 NA
> lead(1:5, n = 2)
[1]  3  4  5 NA NA
> 
> # If you want to define a value for non-existing rows, use `default`
> lag(1:5)
[1] NA  1  2  3  4
> lag(1:5, default = 0)
[1] 0 1 2 3 4
> 
> lead(1:5)
[1]  2  3  4  5 NA
> lead(1:5, default = 6)
[1] 2 3 4 5 6
> 
> # If data are not already ordered, use `order_by`
> scrambled <- slice_sample(tibble(year = 2000:2005, value = (0:5) ^ 2), prop = 1)
> 
> wrong <- mutate(scrambled, previous_year_value = lag(value))
> arrange(wrong, year)
# A tibble: 6 × 3
   year value previous_year_value
  <int> <dbl>               <dbl>
1  2000     0                  NA
2  2001     1                  25
3  2002     4                   9
4  2003     9                   0
5  2004    16                   1
6  2005    25                   4
> 
> right <- mutate(scrambled, previous_year_value = lag(value, order_by = year))
> arrange(right, year)
# A tibble: 6 × 3
   year value previous_year_value
  <int> <dbl>               <dbl>
1  2000     0                  NA
2  2001     1                   0
3  2002     4                   1
4  2003     9                   4
5  2004    16                   9
6  2005    25                  16
> 
> 
> 
> cleanEx()
> nameEx("location")
> ### * location
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: location
> ### Title: Print the location in memory of a data frame
> ### Aliases: location changes
> ### Keywords: internal
> 
> ### ** Examples
> 
> location(mtcars)
Warning: `location()` was deprecated in dplyr 1.0.0.
Please use `lobst::ref()` instead.
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated.
Error: The lobstr package is required to compute package locations.
Please install it with `install.packages("lobstr")`
Backtrace:
    █
 1. └─dplyr::location(mtcars)
 2.   └─dplyr:::check_pkg("lobstr", "compute package locations")
 3.     └─dplyr:::glubort(...)
Execution halted
