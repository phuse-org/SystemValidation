
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "fansi"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('fansi')
Warning: package ‘fansi’ was built under R version 4.0.5
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("fansi_lines")
> ### * fansi_lines
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fansi_lines
> ### Title: Colorize Character Vectors
> ### Aliases: fansi_lines
> 
> ### ** Examples
> 
> NEWS <- readLines(file.path(R.home('doc'), 'NEWS'))
> writeLines(fansi_lines(NEWS[1:20]))
[37;48;5;18mR News[39;49m

[37;48;5;20mCHANGES IN R 4.0.3:[39;49m

[37;48;5;22m  NEW FEATURES:[39;49m

[37;48;5;24m    • On platforms using configure option --with-internal-tzcode,[39;49m
[37;48;5;25m      additional values "internal" and (on macOS only) "macOS" are[39;49m
[37;48;5;26m      accepted for the environment variable TZDIR.  (See ?TZDIR.)[39;49m

[37;48;5;28m      On macOS, "macOS" is used by default if the system timezone[39;49m
[37;48;5;29m      database is a newer version than that in the R installation.[39;49m

[37;48;5;31m    • When install.packages(type = "source") fails to find a package in[39;49m
[37;48;5;32m      a repository it mentions package versions which are excluded by[39;49m
[37;48;5;33m      their R version requirement and links to hints on why a package[39;49m
[30;48;5;34m      might not be found.[39;49m

[30;48;5;36m    • The default value for options("timeout") can be set from[39;49m
[30;48;5;37m      enviromnent variable R_DEFAULT_INTERNET_TIMEOUT, still defaulting[39;49m
> writeLines(fansi_lines(NEWS[1:20], step=8))
[37;48;5;25mR News[39;49m

[30;48;5;41mCHANGES IN R 4.0.3:[39;49m

[37;48;5;57m  NEW FEATURES:[39;49m

[30;48;5;73m    • On platforms using configure option --with-internal-tzcode,[39;49m
[30;48;5;81m      additional values "internal" and (on macOS only) "macOS" are[39;49m
[37;48;5;89m      accepted for the environment variable TZDIR.  (See ?TZDIR.)[39;49m

[37;48;5;105m      On macOS, "macOS" is used by default if the system timezone[39;49m
[30;48;5;113m      database is a newer version than that in the R installation.[39;49m

[37;48;5;129m    • When install.packages(type = "source") fails to find a package in[39;49m
[37;48;5;137m      a repository it mentions package versions which are excluded by[39;49m
[30;48;5;145m      their R version requirement and links to hints on why a package[39;49m
[30;48;5;153m      might not be found.[39;49m

[37;48;5;169m    • The default value for options("timeout") can be set from[39;49m
[37;48;5;177m      enviromnent variable R_DEFAULT_INTERNET_TIMEOUT, still defaulting[39;49m
> 
> 
> 
> cleanEx()
> nameEx("has_ctl")
> ### * has_ctl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: has_ctl
> ### Title: Checks for Presence of Control Sequences
> ### Aliases: has_ctl has_sgr
> 
> ### ** Examples
> 
> has_ctl("hello world")
[1] FALSE
> has_ctl("hello\nworld")
[1] TRUE
> has_ctl("hello\nworld", "sgr")
[1] FALSE
> has_ctl("hello\033[31mworld\033[m", "sgr")
[1] TRUE
> has_sgr("hello\033[31mworld\033[m")
[1] TRUE
> has_sgr("hello\nworld")
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("html_code_block")
> ### * html_code_block
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: html_code_block
> ### Title: Format Character Vector for Display as Code in HTML
> ### Aliases: html_code_block
> 
> ### ** Examples
> 
> html_code_block(c("hello world"))
[1] "<PRE class=\"fansi-output\"><CODE>hello world</CODE></PRE>"
> html_code_block(c("hello world"), class="pretty")
[1] "<PRE class=\"pretty\"><CODE>hello world</CODE></PRE>"
> 
> 
> 
> cleanEx()
> nameEx("html_esc")
> ### * html_esc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: html_esc
> ### Title: Escape Characters With Special HTML Meaning
> ### Aliases: html_esc
> 
> ### ** Examples
> 
> html_esc("day > night")
[1] "day &gt; night"
> html_esc("<SPAN>hello world</SPAN>")
[1] "&lt;SPAN&gt;hello world&lt;/SPAN&gt;"
> 
> 
> 
> cleanEx()
> nameEx("in_html")
> ### * in_html
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: in_html
> ### Title: Frame HTML in a Web Page And Display
> ### Aliases: in_html
> 
> ### ** Examples
> 
> txt <- "\033[31;42mHello \033[7mWorld\033[m"
> writeLines(txt)
[31;42mHello [7mWorld[m
> html <- sgr_to_html(txt)
> ## Not run: 
> ##D in_html(html) # spawns a browser window
> ## End(Not run)
> writeLines(readLines(in_html(html, display=FALSE)))
<!DOCTYPE html>
<html>
<body>
<pre>
<span style='color: #BB0000; background-color: #00BB00;'>Hello </span><span style='color: #00BB00; background-color: #BB0000;'>World</span>
</pre>
</body>
</html>
> css <- "SPAN {text-decoration: underline;}"
> writeLines(readLines(in_html(html, css=css, display=FALSE)))
<!DOCTYPE html>
<html>
<style>
SPAN {text-decoration: underline;}
</style>
<body>
<pre>
<span style='color: #BB0000; background-color: #00BB00;'>Hello </span><span style='color: #00BB00; background-color: #BB0000;'>World</span>
</pre>
</body>
</html>
> ## Not run: 
> ##D in_html(html, css)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("make_styles")
> ### * make_styles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: make_styles
> ### Title: Generate CSS Mapping Classes to Colors
> ### Aliases: make_styles
> 
> ### ** Examples
> 
> ## Generate some class strings; order matters
> classes <- do.call(paste, c(expand.grid(c("fg", "bg"), 0:7), sep="-"))
> writeLines(classes[1:4])
fg-0
bg-0
fg-1
bg-1
> 
> ## Some Default CSS
> css0 <- "span {font-size: 60pt; padding: 10px; display: inline-block}"
> 
> ## Associated class strings to styles
> css1 <- make_styles(classes)
> writeLines(css1[1:4])
.fg-0 {color: #000000;}
.bg-0 {background-color: #000000;}
.fg-1 {color: #800000;}
.bg-1 {background-color: #800000;}
> 
> ## Generate SGR-derived HTML, mapping to classes
> string <- "\033[43mYellow\033[m\n\033[45mMagenta\033[m\n\033[46mCyan\033[m"
> html <- sgr_to_html(string, classes=classes)
> writeLines(html)
<span class='bg-3'>Yellow</span>
<span class='bg-5'>Magenta</span>
<span class='bg-6'>Cyan</span>
> 
> ## Combine in a page with styles and display in browser
> ## Not run: 
> ##D in_html(html, css=c(css0, css1))
> ## End(Not run)
> 
> ## Change CSS by remixing colors, and apply to exact same HTML
> mix <- matrix(
+   c(
+     0, 1, 0,  # red output is green input
+     0, 0, 1,  # green output is blue input
+     1, 0, 0   # blue output is red input
+   ),
+   nrow=3, byrow=TRUE
+ )
> css2 <- make_styles(classes, rgb.mix=mix)
> ## Display in browser: same HTML but colors changed by CSS
> ## Not run: 
> ##D in_html(html, css=c(css0, css2))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("nchar_ctl")
> ### * nchar_ctl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nchar_ctl
> ### Title: ANSI Control Sequence Aware Version of nchar
> ### Aliases: nchar_ctl nchar_sgr nzchar_ctl nzchar_sgr
> 
> ### ** Examples
> 
> nchar_ctl("\033[31m123\a\r")
[1] 3
> ## with some wide characters
> cn.string <-  sprintf("\033[31m%s\a\r", "\u4E00\u4E01\u4E03")
> nchar_ctl(cn.string)
[1] 3
> nchar_ctl(cn.string, type='width')
[1] 6
> 
> ## Remember newlines are not counted by default
> nchar_ctl("\t\n\r")
[1] 0
> 
> ## The 'c0' value for the `ctl` argument does not include 
> ## newlines.
> nchar_ctl("\t\n\r", ctl="c0")
[1] 1
> nchar_ctl("\t\n\r", ctl=c("c0", "nl"))
[1] 0
> 
> ## The _sgr flavor only treats SGR sequences as zero width
> nchar_sgr("\033[31m123")
[1] 3
> nchar_sgr("\t\n\n123")
[1] 6
> 
> ## All of the following are Control Sequences or C0 controls
> nzchar_ctl("\n\033[42;31m\033[123P\a")
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("set_knit_hooks")
> ### * set_knit_hooks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set_knit_hooks
> ### Title: Set an Output Hook to Display ANSI CSI SGR in Rmarkdown
> ### Aliases: set_knit_hooks
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## The following should be done within an `rmarkdown` document chunk with
> ##D ## chunk option `results` set to 'asis' and the chunk option `comment` set
> ##D ## to ''.
> ##D 
> ##D ```{r comment="", results='asis', echo=FALSE}
> ##D ## Change the "output" hook to handle ANSI CSI SGR
> ##D 
> ##D old.hooks <- set_knit_hooks(knitr::knit_hooks)
> ##D 
> ##D ## Do the same with the warning, error, and message, and add styles for
> ##D ## them (alternatively we could have done output as part of this call too)
> ##D 
> ##D styles <- c(
> ##D   getOption('fansi.style'),  # default style
> ##D   "PRE.fansi CODE {background-color: transparent;}",
> ##D   "PRE.fansi-error {background-color: #DD5555;}",
> ##D   "PRE.fansi-warning {background-color: #DDDD55;}",
> ##D   "PRE.fansi-message {background-color: #EEEEEE;}"
> ##D )
> ##D old.hooks <- c(
> ##D   old.hooks,
> ##D   fansi::set_knit_hooks(
> ##D     knitr::knit_hooks,
> ##D     which=c('warning', 'error', 'message'),
> ##D     style=styles
> ##D ) )
> ##D ```
> ##D ## You may restore old hooks with the following chunk
> ##D 
> ##D ## Restore Hooks
> ##D ```{r}
> ##D do.call(knitr::knit_hooks$set, old.hooks)
> ##D ```
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("sgr_256")
> ### * sgr_256
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sgr_256
> ### Title: Show 8 Bit ANSI CSI SGR Colors
> ### Aliases: sgr_256
> 
> ### ** Examples
> 
> writeLines(sgr_256())
Standard
[38;5;15;48;5;0m  0[m [38;5;15;48;5;1m  1[m [38;5;15;48;5;2m  2[m [38;5;15;48;5;3m  3[m [38;5;15;48;5;4m  4[m [38;5;15;48;5;5m  5[m [38;5;15;48;5;6m  6[m [38;5;15;48;5;7m  7[m

High-Intensity
[38;5;0;48;5;8m  8[m [38;5;0;48;5;9m  9[m [38;5;0;48;5;10m 10[m [38;5;0;48;5;11m 11[m [38;5;0;48;5;12m 12[m [38;5;0;48;5;13m 13[m [38;5;0;48;5;14m 14[m [38;5;0;48;5;15m 15[m

216 Colors (Dark)
[38;5;231;48;5;16m 16[m[38;5;230;48;5;17m 17[m[38;5;229;48;5;18m 18[m[38;5;228;48;5;19m 19[m[38;5;227;48;5;20m 20[m[38;5;226;48;5;21m 21[m[38;5;225;48;5;22m 22[m[38;5;224;48;5;23m 23[m[38;5;223;48;5;24m 24[m[38;5;222;48;5;25m 25[m[38;5;221;48;5;26m 26[m[38;5;220;48;5;27m 27[m[38;5;219;48;5;28m 28[m[38;5;218;48;5;29m 29[m[38;5;217;48;5;30m 30[m[38;5;216;48;5;31m 31[m[38;5;215;48;5;32m 32[m[38;5;214;48;5;33m 33[m
[38;5;195;48;5;52m 52[m[38;5;194;48;5;53m 53[m[38;5;193;48;5;54m 54[m[38;5;192;48;5;55m 55[m[38;5;191;48;5;56m 56[m[38;5;190;48;5;57m 57[m[38;5;189;48;5;58m 58[m[38;5;188;48;5;59m 59[m[38;5;187;48;5;60m 60[m[38;5;186;48;5;61m 61[m[38;5;185;48;5;62m 62[m[38;5;184;48;5;63m 63[m[38;5;183;48;5;64m 64[m[38;5;182;48;5;65m 65[m[38;5;181;48;5;66m 66[m[38;5;180;48;5;67m 67[m[38;5;179;48;5;68m 68[m[38;5;178;48;5;69m 69[m
[38;5;159;48;5;88m 88[m[38;5;158;48;5;89m 89[m[38;5;157;48;5;90m 90[m[38;5;156;48;5;91m 91[m[38;5;155;48;5;92m 92[m[38;5;154;48;5;93m 93[m[38;5;153;48;5;94m 94[m[38;5;152;48;5;95m 95[m[38;5;151;48;5;96m 96[m[38;5;150;48;5;97m 97[m[38;5;149;48;5;98m 98[m[38;5;148;48;5;99m 99[m[38;5;147;48;5;100m100[m[38;5;146;48;5;101m101[m[38;5;145;48;5;102m102[m[38;5;144;48;5;103m103[m[38;5;143;48;5;104m104[m[38;5;142;48;5;105m105[m
[38;5;123;48;5;124m124[m[38;5;122;48;5;125m125[m[38;5;121;48;5;126m126[m[38;5;120;48;5;127m127[m[38;5;119;48;5;128m128[m[38;5;118;48;5;129m129[m[38;5;117;48;5;130m130[m[38;5;116;48;5;131m131[m[38;5;115;48;5;132m132[m[38;5;114;48;5;133m133[m[38;5;113;48;5;134m134[m[38;5;112;48;5;135m135[m[38;5;111;48;5;136m136[m[38;5;110;48;5;137m137[m[38;5;109;48;5;138m138[m[38;5;108;48;5;139m139[m[38;5;107;48;5;140m140[m[38;5;106;48;5;141m141[m
[38;5;87;48;5;160m160[m[38;5;86;48;5;161m161[m[38;5;85;48;5;162m162[m[38;5;84;48;5;163m163[m[38;5;83;48;5;164m164[m[38;5;82;48;5;165m165[m[38;5;81;48;5;166m166[m[38;5;80;48;5;167m167[m[38;5;79;48;5;168m168[m[38;5;78;48;5;169m169[m[38;5;77;48;5;170m170[m[38;5;76;48;5;171m171[m[38;5;75;48;5;172m172[m[38;5;74;48;5;173m173[m[38;5;73;48;5;174m174[m[38;5;72;48;5;175m175[m[38;5;71;48;5;176m176[m[38;5;70;48;5;177m177[m
[38;5;51;48;5;196m196[m[38;5;50;48;5;197m197[m[38;5;49;48;5;198m198[m[38;5;48;48;5;199m199[m[38;5;47;48;5;200m200[m[38;5;46;48;5;201m201[m[38;5;45;48;5;202m202[m[38;5;44;48;5;203m203[m[38;5;43;48;5;204m204[m[38;5;42;48;5;205m205[m[38;5;41;48;5;206m206[m[38;5;40;48;5;207m207[m[38;5;39;48;5;208m208[m[38;5;38;48;5;209m209[m[38;5;37;48;5;210m210[m[38;5;36;48;5;211m211[m[38;5;35;48;5;212m212[m[38;5;34;48;5;213m213[m

216 Colors (Light)
[38;5;213;48;5;34m 34[m[38;5;212;48;5;35m 35[m[38;5;211;48;5;36m 36[m[38;5;210;48;5;37m 37[m[38;5;209;48;5;38m 38[m[38;5;208;48;5;39m 39[m[38;5;207;48;5;40m 40[m[38;5;206;48;5;41m 41[m[38;5;205;48;5;42m 42[m[38;5;204;48;5;43m 43[m[38;5;203;48;5;44m 44[m[38;5;202;48;5;45m 45[m[38;5;201;48;5;46m 46[m[38;5;200;48;5;47m 47[m[38;5;199;48;5;48m 48[m[38;5;198;48;5;49m 49[m[38;5;197;48;5;50m 50[m[38;5;196;48;5;51m 51[m
[38;5;177;48;5;70m 70[m[38;5;176;48;5;71m 71[m[38;5;175;48;5;72m 72[m[38;5;174;48;5;73m 73[m[38;5;173;48;5;74m 74[m[38;5;172;48;5;75m 75[m[38;5;171;48;5;76m 76[m[38;5;170;48;5;77m 77[m[38;5;169;48;5;78m 78[m[38;5;168;48;5;79m 79[m[38;5;167;48;5;80m 80[m[38;5;166;48;5;81m 81[m[38;5;165;48;5;82m 82[m[38;5;164;48;5;83m 83[m[38;5;163;48;5;84m 84[m[38;5;162;48;5;85m 85[m[38;5;161;48;5;86m 86[m[38;5;160;48;5;87m 87[m
[38;5;141;48;5;106m106[m[38;5;140;48;5;107m107[m[38;5;139;48;5;108m108[m[38;5;138;48;5;109m109[m[38;5;137;48;5;110m110[m[38;5;136;48;5;111m111[m[38;5;135;48;5;112m112[m[38;5;134;48;5;113m113[m[38;5;133;48;5;114m114[m[38;5;132;48;5;115m115[m[38;5;131;48;5;116m116[m[38;5;130;48;5;117m117[m[38;5;129;48;5;118m118[m[38;5;128;48;5;119m119[m[38;5;127;48;5;120m120[m[38;5;126;48;5;121m121[m[38;5;125;48;5;122m122[m[38;5;124;48;5;123m123[m
[38;5;105;48;5;142m142[m[38;5;104;48;5;143m143[m[38;5;103;48;5;144m144[m[38;5;102;48;5;145m145[m[38;5;101;48;5;146m146[m[38;5;100;48;5;147m147[m[38;5;99;48;5;148m148[m[38;5;98;48;5;149m149[m[38;5;97;48;5;150m150[m[38;5;96;48;5;151m151[m[38;5;95;48;5;152m152[m[38;5;94;48;5;153m153[m[38;5;93;48;5;154m154[m[38;5;92;48;5;155m155[m[38;5;91;48;5;156m156[m[38;5;90;48;5;157m157[m[38;5;89;48;5;158m158[m[38;5;88;48;5;159m159[m
[38;5;69;48;5;178m178[m[38;5;68;48;5;179m179[m[38;5;67;48;5;180m180[m[38;5;66;48;5;181m181[m[38;5;65;48;5;182m182[m[38;5;64;48;5;183m183[m[38;5;63;48;5;184m184[m[38;5;62;48;5;185m185[m[38;5;61;48;5;186m186[m[38;5;60;48;5;187m187[m[38;5;59;48;5;188m188[m[38;5;58;48;5;189m189[m[38;5;57;48;5;190m190[m[38;5;56;48;5;191m191[m[38;5;55;48;5;192m192[m[38;5;54;48;5;193m193[m[38;5;53;48;5;194m194[m[38;5;52;48;5;195m195[m
[38;5;33;48;5;214m214[m[38;5;32;48;5;215m215[m[38;5;31;48;5;216m216[m[38;5;30;48;5;217m217[m[38;5;29;48;5;218m218[m[38;5;28;48;5;219m219[m[38;5;27;48;5;220m220[m[38;5;26;48;5;221m221[m[38;5;25;48;5;222m222[m[38;5;24;48;5;223m223[m[38;5;23;48;5;224m224[m[38;5;22;48;5;225m225[m[38;5;21;48;5;226m226[m[38;5;20;48;5;227m227[m[38;5;19;48;5;228m228[m[38;5;18;48;5;229m229[m[38;5;17;48;5;230m230[m[38;5;16;48;5;231m231[m

Grayscale
[38;5;15;48;5;232m232[m [38;5;15;48;5;233m233[m [38;5;15;48;5;234m234[m [38;5;15;48;5;235m235[m [38;5;15;48;5;236m236[m [38;5;15;48;5;237m237[m [38;5;15;48;5;238m238[m [38;5;15;48;5;239m239[m [38;5;15;48;5;240m240[m [38;5;15;48;5;241m241[m [38;5;15;48;5;242m242[m [38;5;15;48;5;243m243[m
[38;5;0;48;5;244m244[m [38;5;0;48;5;245m245[m [38;5;0;48;5;246m246[m [38;5;0;48;5;247m247[m [38;5;0;48;5;248m248[m [38;5;0;48;5;249m249[m [38;5;0;48;5;250m250[m [38;5;0;48;5;251m251[m [38;5;0;48;5;252m252[m [38;5;0;48;5;253m253[m [38;5;0;48;5;254m254[m [38;5;0;48;5;255m255[m
> 
> 
> 
> cleanEx()
> nameEx("sgr_to_html")
> ### * sgr_to_html
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sgr_to_html
> ### Title: Convert ANSI CSI SGR Escape Sequence to HTML Equivalents
> ### Aliases: sgr_to_html
> 
> ### ** Examples
> 
> sgr_to_html("hello\033[31;42;1mworld\033[m")
[1] "hello<span style='color: #BB0000; background-color: #00BB00; font-weight: bold;'>world</span>"
> sgr_to_html("hello\033[31;42;1mworld\033[m", classes=TRUE)
[1] "hello<span class='fansi-color-001 fansi-bgcol-002' style='font-weight: bold;'>world</span>"
> 
> ## Input contains HTML special chars
> x <- "<hello \033[42m'there' \033[34m &amp;\033[m \"moon\"!"
> writeLines(x)
<hello [42m'there' [34m &amp;[m "moon"!
> ## Not run: 
> ##D in_html(
> ##D   c(
> ##D     sgr_to_html(html_esc(x)),  # Good
> ##D     sgr_to_html(x)             # Bad!
> ##D ) )
> ## End(Not run)
> ## Generate some class names for basic colors
> classes <- expand.grid(
+   "myclass",
+   c("fg", "bg"),
+   c("black", "red", "green", "yellow", "blue", "magenta", "cyan", "white")
+ )
> classes  # order is important!
      Var1 Var2    Var3
1  myclass   fg   black
2  myclass   bg   black
3  myclass   fg     red
4  myclass   bg     red
5  myclass   fg   green
6  myclass   bg   green
7  myclass   fg  yellow
8  myclass   bg  yellow
9  myclass   fg    blue
10 myclass   bg    blue
11 myclass   fg magenta
12 myclass   bg magenta
13 myclass   fg    cyan
14 myclass   bg    cyan
15 myclass   fg   white
16 myclass   bg   white
> classes <- do.call(paste, c(classes, sep="-"))
> ## We only provide 16 classes, so Only basic colors are
> ## mapped to classes; others styled inline.
> sgr_to_html(
+   "\033[94mhello\033[m \033[31;42;1mworld\033[m",
+   classes=classes
+ )
[1] "<span style='color: #5555FF;'>hello</span> <span class='myclass-fg-red myclass-bg-green' style='font-weight: bold;'>world</span>"
> ## Create a whole web page with a style sheet for 256 colors and
> ## the colors shown in a table.
> class.256 <- do.call(paste, c(expand.grid(c("fg", "bg"), 0:255), sep="-"))
> sgr.256 <- sgr_256()     # A demo of all 256 colors
> writeLines(sgr.256[1:8]) # SGR formatting
Standard
[38;5;15;48;5;0m  0[m [38;5;15;48;5;1m  1[m [38;5;15;48;5;2m  2[m [38;5;15;48;5;3m  3[m [38;5;15;48;5;4m  4[m [38;5;15;48;5;5m  5[m [38;5;15;48;5;6m  6[m [38;5;15;48;5;7m  7[m

High-Intensity
[38;5;0;48;5;8m  8[m [38;5;0;48;5;9m  9[m [38;5;0;48;5;10m 10[m [38;5;0;48;5;11m 11[m [38;5;0;48;5;12m 12[m [38;5;0;48;5;13m 13[m [38;5;0;48;5;14m 14[m [38;5;0;48;5;15m 15[m

216 Colors (Dark)
[38;5;231;48;5;16m 16[m[38;5;230;48;5;17m 17[m[38;5;229;48;5;18m 18[m[38;5;228;48;5;19m 19[m[38;5;227;48;5;20m 20[m[38;5;226;48;5;21m 21[m[38;5;225;48;5;22m 22[m[38;5;224;48;5;23m 23[m[38;5;223;48;5;24m 24[m[38;5;222;48;5;25m 25[m[38;5;221;48;5;26m 26[m[38;5;220;48;5;27m 27[m[38;5;219;48;5;28m 28[m[38;5;218;48;5;29m 29[m[38;5;217;48;5;30m 30[m[38;5;216;48;5;31m 31[m[38;5;215;48;5;32m 32[m[38;5;214;48;5;33m 33[m
> 
> ## Convert to HTML using classes instead of inline styles:
> html.256 <- sgr_to_html(sgr.256, classes=class.256)
> writeLines(html.256[1])  # No inline colors
Standard
> 
> ## Generate different style sheets.  See `?make_styles` for details.
> default <- make_styles(class.256)
> mix <- matrix(c(.6,.2,.2, .2,.6,.2, .2,.2,.6), 3)
> desaturated <- make_styles(class.256, mix)
> writeLines(default[1:4])
.fg-0 {color: #000000;}
.bg-0 {background-color: #000000;}
.fg-1 {color: #800000;}
.bg-1 {background-color: #800000;}
> writeLines(desaturated[1:4])
.fg-0 {color: #000000;}
.bg-0 {background-color: #000000;}
.fg-1 {color: #4C1919;}
.bg-1 {background-color: #4C1919;}
> 
> ## Embed in HTML page and diplay; only CSS changing
> ## Not run: 
> ##D in_html(html.256)                  # no CSS
> ##D in_html(html.256, css=default)     # default CSS
> ##D in_html(html.256, css=desaturated) # desaturated CSS
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("strip_ctl")
> ### * strip_ctl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strip_ctl
> ### Title: Strip ANSI Control Sequences
> ### Aliases: strip_ctl strip_sgr
> 
> ### ** Examples
> 
> string <- "hello\033k\033[45p world\n\033[31mgoodbye\a moon"
> strip_ctl(string)
Warning in strip_ctl(string) :
  Encountered invalid or possibly incorreclty handled ESC sequence at  index [1], see `?unhandled_ctl`; you can use `warn=FALSE` to turn off these warnings.
[1] "hello worldgoodbye moon"
> strip_ctl(string, c("nl", "c0", "sgr", "csi", "esc")) # equivalently
Warning in strip_ctl(string, c("nl", "c0", "sgr", "csi", "esc")) :
  Encountered invalid or possibly incorreclty handled ESC sequence at  index [1], see `?unhandled_ctl`; you can use `warn=FALSE` to turn off these warnings.
[1] "hello worldgoodbye moon"
> strip_ctl(string, "sgr")
[1] "hello\033k\033[45p world\ngoodbye\a moon"
> strip_ctl(string, c("c0", "esc"))
Warning in strip_ctl(string, c("c0", "esc")) :
  Encountered invalid or possibly incorreclty handled ESC sequence at  index [1], see `?unhandled_ctl`; you can use `warn=FALSE` to turn off these warnings.
[1] "hello\033[45p world\n\033[31mgoodbye moon"
> 
> ## everything but C0 controls, we need to specify "nl"
> ## in addition to "c0" since "nl" is not part of "c0"
> ## as far as the `strip` argument is concerned
> strip_ctl(string, c("all", "nl", "c0"))
Warning in strip_ctl(string, c("all", "nl", "c0")) :
  Encountered invalid or possibly incorreclty handled ESC sequence at  index [1], see `?unhandled_ctl`; you can use `warn=FALSE` to turn off these warnings.
[1] "hello world\ngoodbye\a moon"
> 
> ## convenience function, same as `strip_ctl(ctl='sgr')`
> strip_sgr(string)
[1] "hello\033k\033[45p world\ngoodbye\a moon"
> 
> 
> 
> cleanEx()
> nameEx("strsplit_ctl")
> ### * strsplit_ctl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strsplit_ctl
> ### Title: ANSI Control Sequence Aware Version of strsplit
> ### Aliases: strsplit_ctl strsplit_sgr
> 
> ### ** Examples
> 
> strsplit_sgr("\033[31mhello\033[42m world!", " ")
[[1]]
[1] "\033[31mhello\033[0m"     "\033[31;42mworld!\033[0m"

> 
> ## Next two examples allow splitting by newlines, which
> ## normally doesn't work as newlines are _Control Sequences_
> strsplit_sgr("\033[31mhello\033[42m\nworld!", "\n")
[[1]]
[1] "\033[31mhello\033[0m"     "\033[31;42mworld!\033[0m"

> strsplit_ctl("\033[31mhello\033[42m\nworld!", "\n", ctl=c("all", "nl"))
[[1]]
[1] "\033[31mhello\033[0m"     "\033[31;42mworld!\033[0m"

> 
> 
> 
> cleanEx()
> nameEx("strtrim_ctl")
> ### * strtrim_ctl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strtrim_ctl
> ### Title: ANSI Control Sequence Aware Version of strtrim
> ### Aliases: strtrim_ctl strtrim2_ctl strtrim_sgr strtrim2_sgr
> 
> ### ** Examples
> 
> strtrim_ctl("\033[42mHello world\033[m", 6)
[1] "\033[42mHello \033[0m"
> 
> 
> 
> cleanEx()
> nameEx("strwrap_ctl")
> ### * strwrap_ctl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strwrap_ctl
> ### Title: ANSI Control Sequence Aware Version of strwrap
> ### Aliases: strwrap_ctl strwrap2_ctl strwrap_sgr strwrap2_sgr
> 
> ### ** Examples
> 
> hello.1 <- "hello \033[41mred\033[49m world"
> hello.2 <- "hello\t\033[41mred\033[49m\tworld"
> 
> strwrap_ctl(hello.1, 12)
[1] "hello \033[41mred\033[49m" "world"                    
> strwrap_ctl(hello.2, 12)
[1] "hello \033[41mred\033[49m" "world"                    
> 
> ## In default mode strwrap2_ctl is the same as strwrap_ctl
> strwrap2_ctl(hello.2, 12)
[1] "hello \033[41mred\033[49m" "world"                    
> 
> ## But you can leave whitespace unchanged, `warn`
> ## set to false as otherwise tabs causes warning
> strwrap2_ctl(hello.2, 12, strip.spaces=FALSE, warn=FALSE)
[1] "hello\t\033[41mred\033[49m\t" "world"                       
> 
> ## And convert tabs to spaces
> strwrap2_ctl(hello.2, 12, tabs.as.spaces=TRUE)
[1] "hello   \033[41mred\033[49m" "     world"                 
> 
> ## If your display has 8 wide tab stops the following two
> ## outputs should look the same
> writeLines(strwrap2_ctl(hello.2, 80, tabs.as.spaces=TRUE))
hello   [41mred[49m     world
> writeLines(hello.2)
hello	[41mred[49m	world
> 
> ## tab stops are NOT auto-detected, but you may provide
> ## your own
> strwrap2_ctl(hello.2, 12, tabs.as.spaces=TRUE, tab.stops=c(6, 12))
[1] "hello \033[41mred\033[49m  " "       "                    
[3] "world"                      
> 
> ## You can also force padding at the end to equal width
> writeLines(strwrap2_ctl("hello how are you today", 10, pad.end="."))
hello how
are you..
today....
> 
> ## And a more involved example where we read the
> ## NEWS file, color it line by line, wrap it to
> ## 25 width and display some of it in 3 columns
> ## (works best on displays that support 256 color
> ## SGR sequences)
> 
> NEWS <- readLines(file.path(R.home('doc'), 'NEWS'))
> NEWS.C <- fansi_lines(NEWS, step=2)  # color each line
> W <- strwrap2_ctl(NEWS.C, 25, pad.end=" ", wrap.always=TRUE)
> writeLines(c("", paste(W[1:20], W[100:120], W[200:220]), ""))

[37;48;5;19mR News[39;49m                   [30;48;5;117m strings is enabled for [0m [37;48;5;203m • fisher.test() no     [0m
                         [30;48;5;117mPCRE2 < 10.30 also when [0m [37;48;5;203mlonger segfaults when   [0m
[37;48;5;23mCHANGES IN R 4.0.3:[39;49m      [30;48;5;117mJIT is enabled,[39;49m          [37;48;5;203mcalled again after its[39;49m  
                         [30;48;5;119m since stack overflows  [0m [37;48;5;205m internal stack has been[0m
[37;48;5;27m NEW FEATURES:[39;49m           [30;48;5;119mhave been seen in that  [0m [37;48;5;205mexceeded PR#17904.[39;49m      
                         [30;48;5;119mcase.[39;49m                                            
[37;48;5;31m • On platforms using   [0m                          [37;48;5;209m • Accessing a long     [0m
[37;48;5;31mconfigure option        [0m [30;48;5;123m • Fix to correctly show[0m [37;48;5;209mvector represented by a [0m
[37;48;5;31m--with-internal-tzcode,[39;49m  [30;48;5;123mthe group labels in     [0m [37;48;5;209mcompact integer sequence[39;49m
[37;48;5;33m additional values      [0m [30;48;5;123mdotchart() (which where[39;49m  [37;48;5;211m no longer segfaults    [0m
[37;48;5;33m"internal" and (on macOS[0m [37;48;5;125m lost in the ylab       [0m [37;48;5;211m(reported and debugged  [0m
[37;48;5;33monly) "macOS" are[39;49m        [37;48;5;125mimprovement for R       [0m [37;48;5;211mby Hugh Parsonage).[39;49m     
[30;48;5;35m accepted for the       [0m [37;48;5;125m4.0.0).[39;49m                                          
[30;48;5;35menvironment variable    [0m                          [30;48;5;215m • duplicated() now     [0m
[30;48;5;35mTZDIR.  (See ?TZDIR.)[39;49m    [37;48;5;129m • addmargins(*, ..) now[0m [30;48;5;215mworks also for strings  [0m
                         [37;48;5;129malso works when fn() is [0m [30;48;5;215mwith multiple encodings[39;49m 
[30;48;5;39m On macOS, "macOS" is   [0m [37;48;5;129ma local function,[39;49m        [30;48;5;217m inside a single vector [0m
[30;48;5;39mused by default if the  [0m [37;48;5;131m thanks to bug report   [0m [30;48;5;217mPR#17809.[39;49m               
[30;48;5;39msystem timezone[39;49m          [37;48;5;131mand patch PR#17124 from [0m                         
[30;48;5;41m database is a newer    [0m [37;48;5;131mAlex Bertram.[39;49m            [30;48;5;221m • phyper(11, 15, 0, 12,[0m
[37;48;5;19mR News[39;49m                                            [30;48;5;221mlog.p=TRUE) no longer   [0m

> 
> 
> 
> cleanEx()
> nameEx("substr_ctl")
> ### * substr_ctl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: substr_ctl
> ### Title: ANSI Control Sequence Aware Version of substr
> ### Aliases: substr_ctl substr2_ctl substr_sgr substr2_sgr
> 
> ### ** Examples
> 
> substr_ctl("\033[42mhello\033[m world", 1, 9)
[1] "\033[42mhello\033[m wor"
> substr_ctl("\033[42mhello\033[m world", 3, 9)
[1] "\033[42mllo\033[m wor"
> 
> ## Width 2 and 3 are in the middle of an ideogram as
> ## start and stop positions respectively, so we control
> ## what we get with `round`
> 
> cn.string <- paste0("\033[42m", "\u4E00\u4E01\u4E03", "\033[m")
> 
> substr2_ctl(cn.string, 2, 3, type='width')
[1] "\033[42m一\033[0m"
> substr2_ctl(cn.string, 2, 3, type='width', round='both')
[1] "\033[42m一丁\033[0m"
> substr2_ctl(cn.string, 2, 3, type='width', round='start')
[1] "\033[42m一\033[0m"
> substr2_ctl(cn.string, 2, 3, type='width', round='stop')
[1] "\033[42m丁\033[0m"
> 
> ## the _sgr variety only treat as special CSI SGR,
> ## compare the following:
> 
> substr_sgr("\033[31mhello\tworld", 1, 6)
Warning in substr_ctl_internal(x[no.na], start = start[no.na], stop = stop[no.na],  :
  Encountered a C0 control character, see `?unhandled_ctl`; you can use `warn=FALSE` to turn off these warnings.
[1] "\033[31mhello\t\033[0m"
> substr_ctl("\033[31mhello\tworld", 1, 6)
Warning in substr_ctl_internal(x[no.na], start = start[no.na], stop = stop[no.na],  :
  Encountered a C0 control character, see `?unhandled_ctl`; you can use `warn=FALSE` to turn off these warnings.
[1] "\033[31mhello\tw\033[0m"
> substr_ctl("\033[31mhello\tworld", 1, 6, ctl=c('all', 'c0'))
Warning in substr_ctl_internal(x[no.na], start = start[no.na], stop = stop[no.na],  :
  Encountered a C0 control character, see `?unhandled_ctl`; you can use `warn=FALSE` to turn off these warnings.
[1] "\033[31mhello\t\033[0m"
> 
> 
> 
> cleanEx()
> nameEx("tabs_as_spaces")
> ### * tabs_as_spaces
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tabs_as_spaces
> ### Title: Replace Tabs With Spaces
> ### Aliases: tabs_as_spaces
> 
> ### ** Examples
> 
> string <- '1\t12\t123\t1234\t12345678'
> tabs_as_spaces(string)
[1] "1       12      123     1234    12345678"
> writeLines(
+   c(
+     '-------|-------|-------|-------|-------|',
+     tabs_as_spaces(string)
+ ) )
-------|-------|-------|-------|-------|
1       12      123     1234    12345678
> writeLines(
+   c(
+     '-|--|--|--|--|--|--|--|--|--|--|',
+     tabs_as_spaces(string, tab.stops=c(2, 3))
+ ) )
-|--|--|--|--|--|--|--|--|--|--|
1 12 123   1234  12345678
> writeLines(
+   c(
+     '-|--|-------|-------|-------|',
+     tabs_as_spaces(string, tab.stops=c(2, 3, 8))
+ ) )
-|--|-------|-------|-------|
1 12 123     1234    12345678
> 
> 
> 
> cleanEx()
> nameEx("term_cap_test")
> ### * term_cap_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: term_cap_test
> ### Title: Test Terminal Capabilities
> ### Aliases: term_cap_test
> 
> ### ** Examples
> 
> term_cap_test()
[91;104mbright   [0m  ->  \033[91;104mbright   \033[0m                   
[38;5;196;48;5;21m256      [0m  ->  \033[38;5;196;48;5;21m256      \033[0m         
[38;2;255;0;0;48;2;0;0;255mtruecolor[0m  ->  \033[38;2;255;0;0;48;2;0;0;255mtruecolor\033[0m
> 
> 
> 
> cleanEx()
> nameEx("unhandled_ctl")
> ### * unhandled_ctl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unhandled_ctl
> ### Title: Identify Unhandled ANSI Control Sequences
> ### Aliases: unhandled_ctl
> 
> ### ** Examples
> 
> string <- c(
+   "\033[41mhello world\033[m", "foo\033[22>m", "\033[999mbar",
+   "baz \033[31#3m", "a\033[31k", "hello\033m world"
+ )
> unhandled_ctl(string)
  index start stop         error translated        esc
1     2     4    9       special      FALSE  \033[22>m
2     3     1    6       unknown      FALSE  \033[999m
3     4     5   11 malformed-CSI      FALSE \033[31#3m
4     5     2    6       non-SGR      FALSE   \033[31k
5     6     6    7       non-CSI      FALSE      \033m
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.131 0.013 0.145 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
