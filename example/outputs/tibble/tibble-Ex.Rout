
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "tibble"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('tibble')
Warning: package ‘tibble’ was built under R version 4.0.5
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_column")
> ### * add_column
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_column
> ### Title: Add columns to a data frame
> ### Aliases: add_column
> 
> ### ** Examples
> 
> # add_column ---------------------------------
> df <- tibble(x = 1:3, y = 3:1)
> 
> df %>% add_column(z = -1:1, w = 0)
# A tibble: 3 × 4
      x     y     z     w
  <int> <int> <int> <dbl>
1     1     3    -1     0
2     2     2     0     0
3     3     1     1     0
> df %>% add_column(z = -1:1, .before = "y")
# A tibble: 3 × 3
      x     z     y
  <int> <int> <int>
1     1    -1     3
2     2     0     2
3     3     1     1
> 
> # You can't overwrite existing columns
> try(df %>% add_column(x = 4:6))
Error : Column name `x` must not be duplicated.
Use .name_repair to specify repair.
> 
> # You can't create new observations
> try(df %>% add_column(z = 1:5))
Error : New columns must be compatible with `.data`.
✖ New column has 5 rows.
ℹ `.data` has 3 rows.
> 
> 
> 
> 
> cleanEx()
> nameEx("add_row")
> ### * add_row
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_row
> ### Title: Add rows to a data frame
> ### Aliases: add_row add_case
> 
> ### ** Examples
> 
> # add_row ---------------------------------
> df <- tibble(x = 1:3, y = 3:1)
> 
> df %>% add_row(x = 4, y = 0)
# A tibble: 4 × 2
      x     y
  <dbl> <dbl>
1     1     3
2     2     2
3     3     1
4     4     0
> 
> # You can specify where to add the new rows
> df %>% add_row(x = 4, y = 0, .before = 2)
# A tibble: 4 × 2
      x     y
  <dbl> <dbl>
1     1     3
2     4     0
3     2     2
4     3     1
> 
> # You can supply vectors, to add multiple rows (this isn't
> # recommended because it's a bit hard to read)
> df %>% add_row(x = 4:5, y = 0:-1)
# A tibble: 5 × 2
      x     y
  <int> <int>
1     1     3
2     2     2
3     3     1
4     4     0
5     5    -1
> 
> # Use tibble_row() to add one row only
> df %>% add_row(tibble_row(x = 4, y = 0))
# A tibble: 4 × 2
      x     y
  <dbl> <dbl>
1     1     3
2     2     2
3     3     1
4     4     0
> try(df %>% add_row(tibble_row(x = 4:5, y = 0:-1)))
Error : All vectors must be size one, use `list()` to wrap.
✖ Column `x` is of size 2.
> 
> # Absent variables get missing values
> df %>% add_row(x = 4)
# A tibble: 4 × 2
      x     y
  <dbl> <int>
1     1     3
2     2     2
3     3     1
4     4    NA
> 
> # You can't create new variables
> try(df %>% add_row(z = 10))
Error : New rows can't add columns.
✖ Can't find column `z` in `.data`.
> 
> 
> 
> cleanEx()
> nameEx("as_tibble")
> ### * as_tibble
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as_tibble
> ### Title: Coerce lists, matrices, and more to data frames
> ### Aliases: as_tibble as_tibble.data.frame as_tibble.list as_tibble.matrix
> ###   as_tibble.table as_tibble.NULL as_tibble.default as_tibble_row
> ###   as_tibble_col
> 
> ### ** Examples
> 
> m <- matrix(rnorm(50), ncol = 5)
> colnames(m) <- c("a", "b", "c", "d", "e")
> df <- as_tibble(m)
> 
> as_tibble_row(c(a = 1, b = 2))
# A tibble: 1 × 2
      a     b
  <dbl> <dbl>
1     1     2
> as_tibble_row(list(c = "three", d = list(4:5)))
# A tibble: 1 × 2
  c     d        
  <chr> <list>   
1 three <int [2]>
> as_tibble_row(1:3, .name_repair = "unique")
New names:
* `` -> ...1
* `` -> ...2
* `` -> ...3
# A tibble: 1 × 3
   ...1  ...2  ...3
  <int> <int> <int>
1     1     2     3
> 
> as_tibble_col(1:3)
# A tibble: 3 × 1
  value
  <int>
1     1
2     2
3     3
> as_tibble_col(
+   list(c = "three", d = list(4:5)),
+   column_name = "data"
+ )
# A tibble: 2 × 1
  data        
  <named list>
1 <chr [1]>   
2 <list [1]>  
> 
> 
> 
> cleanEx()
> nameEx("char")
> ### * char
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: char
> ### Title: Format a character vector
> ### Aliases: char
> 
> ### ** Examples
> 
> # Display as a vector:
> char(letters[1:3])
<pillar_char[3]>
[1] a b c
> ## Don't show: 
> if ({ set.seed(20210331); rlang::is_installed("stringi") }) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Space constraints:
+ rand_strings <- stringi::stri_rand_strings(10, seq(40, 22, by = -2))
+ 
+ # Plain character vectors get truncated if space is limited:
+ data_with_id <- function(id) {
+   tibble(
+     id,
+     some_number_1 = 1, some_number_2 = 2, some_number_3 = 3,
+     some_number_4 = 4, some_number_5 = 5, some_number_6 = 6,
+     some_number_7 = 7, some_number_8 = 8, some_number_9 = 9
+   )
+ }
+ data_with_id(rand_strings)
+ 
+ # Use char() to avoid or control truncation
+ data_with_id(char(rand_strings, min_chars = 24))
+ data_with_id(char(rand_strings, min_chars = Inf))
+ data_with_id(char(rand_strings, min_chars = 24, shorten = "mid"))
+ 
+ # Lorem Ipsum, one sentence per row.
+ lipsum <- unlist(strsplit(stringi::stri_rand_lipsum(1), "(?<=[.]) +", perl = TRUE))
+ tibble(
+   back = char(lipsum, shorten = "back"),
+   front = char(lipsum, shorten = "front"),
+   mid   = char(lipsum, shorten = "mid")
+ )
+ tibble(abbr = char(lipsum, shorten = "abbreviate"))
+ ## Don't show: 
+ }) # examplesIf
> rand_strings <- stringi::stri_rand_strings(10, seq(40, 22, by = -2))
> data_with_id <- function(id) {
+     tibble(id, some_number_1 = 1, some_number_2 = 2, some_number_3 = 3, some_number_4 = 4, 
+         some_number_5 = 5, some_number_6 = 6, some_number_7 = 7, some_number_8 = 8, 
+         some_number_9 = 9)
+ }
> data_with_id(rand_strings)
# A tibble: 10 × 10
   id      some_number_1 some_number_2 some_number_3 some_number_4 some_number_5
   <chr>           <dbl>         <dbl>         <dbl>         <dbl>         <dbl>
 1 WJSsxf…             1             2             3             4             5
 2 HQOlqj…             1             2             3             4             5
 3 GR8hYm…             1             2             3             4             5
 4 dO0k5C…             1             2             3             4             5
 5 3yKhjZ…             1             2             3             4             5
 6 uyWa9T…             1             2             3             4             5
 7 UaiZMc…             1             2             3             4             5
 8 z2qYwl…             1             2             3             4             5
 9 ek4O7h…             1             2             3             4             5
10 YCRHBt…             1             2             3             4             5
# … with 4 more variables: some_number_6 <dbl>, some_number_7 <dbl>,
#   some_number_8 <dbl>, some_number_9 <dbl>
> data_with_id(char(rand_strings, min_chars = 24))
# A tibble: 10 × 10
   id                                  some_number_1 some_number_2 some_number_3
   <char>                                      <dbl>         <dbl>         <dbl>
 1 WJSsxf5RPiDjFRy7iVoadHgnz4uveIpMlA…             1             2             3
 2 HQOlqjZavreUgr3GXLoDX6mpkxihE20qyT…             1             2             3
 3 GR8hYmPYrwJG9UsJm9A47KvwLTo2FQEkuq…             1             2             3
 4 dO0k5CLEp9McpsCkmBt5wkYOioyg9COiuR              1             2             3
 5 3yKhjZZbegjEYOJm1HIxNkWvYx8Ozl85                1             2             3
 6 uyWa9TGFPzGkVAZsJlCaIHvalJsvMC                  1             2             3
 7 UaiZMcOCjm7Lh2Gthq6NgOGsJbR2                    1             2             3
 8 z2qYwlo7fldemmrE772uCYLrI6                      1             2             3
 9 ek4O7hFxIud6K9YsvhQTB6Oe                        1             2             3
10 YCRHBt1kj2i9JnNgyaa5MB                          1             2             3
# … with 6 more variables: some_number_4 <dbl>, some_number_5 <dbl>,
#   some_number_6 <dbl>, some_number_7 <dbl>, some_number_8 <dbl>,
#   some_number_9 <dbl>
> data_with_id(char(rand_strings, min_chars = Inf))
# A tibble: 10 × 10
   id                                       some_number_1 some_number_2
   <char>                                           <dbl>         <dbl>
 1 WJSsxf5RPiDjFRy7iVoadHgnz4uveIpMlA7Qaqjz             1             2
 2 HQOlqjZavreUgr3GXLoDX6mpkxihE20qyTAB45               1             2
 3 GR8hYmPYrwJG9UsJm9A47KvwLTo2FQEkuqMT                 1             2
 4 dO0k5CLEp9McpsCkmBt5wkYOioyg9COiuR                   1             2
 5 3yKhjZZbegjEYOJm1HIxNkWvYx8Ozl85                     1             2
 6 uyWa9TGFPzGkVAZsJlCaIHvalJsvMC                       1             2
 7 UaiZMcOCjm7Lh2Gthq6NgOGsJbR2                         1             2
 8 z2qYwlo7fldemmrE772uCYLrI6                           1             2
 9 ek4O7hFxIud6K9YsvhQTB6Oe                             1             2
10 YCRHBt1kj2i9JnNgyaa5MB                               1             2
# … with 7 more variables: some_number_3 <dbl>, some_number_4 <dbl>,
#   some_number_5 <dbl>, some_number_6 <dbl>, some_number_7 <dbl>,
#   some_number_8 <dbl>, some_number_9 <dbl>
> data_with_id(char(rand_strings, min_chars = 24, shorten = "mid"))
# A tibble: 10 × 10
   id                                  some_number_1 some_number_2 some_number_3
   <char>                                      <dbl>         <dbl>         <dbl>
 1 WJSsxf5RPiDjFRy7i…nz4uveIpMlA7Qaqjz             1             2             3
 2 HQOlqjZavreUgr3GX…6mpkxihE20qyTAB45             1             2             3
 3 GR8hYmPYrwJG9UsJm…47KvwLTo2FQEkuqMT             1             2             3
 4 dO0k5CLEp9McpsCkmBt5wkYOioyg9COiuR              1             2             3
 5 3yKhjZZbegjEYOJm1HIxNkWvYx8Ozl85                1             2             3
 6 uyWa9TGFPzGkVAZsJlCaIHvalJsvMC                  1             2             3
 7 UaiZMcOCjm7Lh2Gthq6NgOGsJbR2                    1             2             3
 8 z2qYwlo7fldemmrE772uCYLrI6                      1             2             3
 9 ek4O7hFxIud6K9YsvhQTB6Oe                        1             2             3
10 YCRHBt1kj2i9JnNgyaa5MB                          1             2             3
# … with 6 more variables: some_number_4 <dbl>, some_number_5 <dbl>,
#   some_number_6 <dbl>, some_number_7 <dbl>, some_number_8 <dbl>,
#   some_number_9 <dbl>
> lipsum <- unlist(strsplit(stringi::stri_rand_lipsum(1), "(?<=[.]) +", 
+     perl = TRUE))
> tibble(back = char(lipsum, shorten = "back"), front = char(lipsum, shorten = "front"), 
+     mid = char(lipsum, shorten = "mid"))
# A tibble: 10 × 3
   back                      front                     mid                      
   <char>                    <char>                    <char>                   
 1 Lorem ipsum dolor sit am… … dui, nisl vitae sociis. Lorem ipsum …itae sociis.
 2 Laoreet in nec diam ut s… …rtor risus donec turpis. Laoreet in n…onec turpis.
 3 Eleifend eleifend, metus… …fend, metus nunc turpis. Eleifend ele…nunc turpis.
 4 Augue massa lobortis fau… …t efficitur ac faucibus. Augue massa …ac faucibus.
 5 Elit egestas egestas sit… …nubia faucibus facilisi. Elit egestas…us facilisi.
 6 Tempor urna nisi feugiat… …a nisi feugiat senectus. Tempor urna …at senectus.
 7 Nunc in pretium dui ac.   Nunc in pretium dui ac.   Nunc in pretium dui ac.  
 8 Elit semper eu.           Elit semper eu.           Elit semper eu.          
 9 Sapien congue, dictum ma… …sa sed posuere sagittis. Sapien congu…re sagittis.
10 Interdum ante aenean, ni… …felis ultricies dapibus. Interdum ant…ies dapibus.
> tibble(abbr = char(lipsum, shorten = "abbreviate"))
# A tibble: 10 × 1
   abbr                                                                         
   <char>                                                                       
 1 Loremipsumdolorsitamet,sitetauctorlacinetiamcommodo!Tinciduntdui,nislvitsocs.
 2 Laoreetinnecdiamutsuspendisseadipiscingsuspendissconubtortorrisusdonecturpis.
 3 Eleifend eleifend, metus nunc turpis.                                        
 4 Augue massa lobortis faucibus velit efficitur ac faucibus.                   
 5 Elit egestas egestas sit amet ut conubia faucibus facilisi.                  
 6 Tempor urna nisi feugiat senectus.                                           
 7 Nunc in pretium dui ac.                                                      
 8 Elit semper eu.                                                              
 9 Sapien congue, dictum massa sed posuere sagittis.                            
10 Interdumanteaenean,nisidapibuslacinianullalaoreet,felisultriciesdapibus.     
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("enframe")
> ### * enframe
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: enframe
> ### Title: Converting vectors to data frames, and vice versa
> ### Aliases: enframe deframe
> 
> ### ** Examples
> 
> enframe(1:3)
# A tibble: 3 × 2
   name value
  <int> <int>
1     1     1
2     2     2
3     3     3
> enframe(c(a = 5, b = 7))
# A tibble: 2 × 2
  name  value
  <chr> <dbl>
1 a         5
2 b         7
> enframe(list(one = 1, two = 2:3, three = 4:6))
# A tibble: 3 × 2
  name  value    
  <chr> <list>   
1 one   <dbl [1]>
2 two   <int [2]>
3 three <int [3]>
> deframe(enframe(3:1))
1 2 3 
3 2 1 
> deframe(tibble(a = 1:3))
[1] 1 2 3
> deframe(tibble(a = as.list(1:3)))
[[1]]
[1] 1

[[2]]
[1] 2

[[3]]
[1] 3

> 
> 
> 
> cleanEx()
> nameEx("formatting")
> ### * formatting
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formatting
> ### Title: Printing tibbles
> ### Aliases: formatting print.tbl format.tbl print.tbl_df format.tbl_df
> 
> ### ** Examples
> 
> print(as_tibble(mtcars))
# A tibble: 32 × 11
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1  21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# … with 22 more rows
> print(as_tibble(mtcars), n = 1)
# A tibble: 32 × 11
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1    21     6   160   110   3.9  2.62  16.5     0     1     4     4
# … with 31 more rows
> print(as_tibble(mtcars), n = 3)
# A tibble: 32 × 11
    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1  21       6   160   110  3.9   2.62  16.5     0     1     4     4
2  21       6   160   110  3.9   2.88  17.0     0     1     4     4
3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1
# … with 29 more rows
> 
> print(as_tibble(trees), n = 100)
# A tibble: 31 × 3
   Girth Height Volume
   <dbl>  <dbl>  <dbl>
 1   8.3     70   10.3
 2   8.6     65   10.3
 3   8.8     63   10.2
 4  10.5     72   16.4
 5  10.7     81   18.8
 6  10.8     83   19.7
 7  11       66   15.6
 8  11       75   18.2
 9  11.1     80   22.6
10  11.2     75   19.9
11  11.3     79   24.2
12  11.4     76   21  
13  11.4     76   21.4
14  11.7     69   21.3
15  12       75   19.1
16  12.9     74   22.2
17  12.9     85   33.8
18  13.3     86   27.4
19  13.7     71   25.7
20  13.8     64   24.9
21  14       78   34.5
22  14.2     80   31.7
23  14.5     74   36.3
24  16       72   38.3
25  16.3     77   42.6
26  17.3     81   55.4
27  17.5     82   55.7
28  17.9     80   58.3
29  18       80   51.5
30  18       80   51  
31  20.6     87   77  
> 
> print(mtcars, width = 10)
                     mpg
Mazda RX4           21.0
Mazda RX4 Wag       21.0
Datsun 710          22.8
Hornet 4 Drive      21.4
Hornet Sportabout   18.7
Valiant             18.1
Duster 360          14.3
Merc 240D           24.4
Merc 230            22.8
Merc 280            19.2
Merc 280C           17.8
Merc 450SE          16.4
Merc 450SL          17.3
Merc 450SLC         15.2
Cadillac Fleetwood  10.4
Lincoln Continental 10.4
Chrysler Imperial   14.7
Fiat 128            32.4
Honda Civic         30.4
Toyota Corolla      33.9
Toyota Corona       21.5
Dodge Challenger    15.5
AMC Javelin         15.2
Camaro Z28          13.3
Pontiac Firebird    19.2
Fiat X1-9           27.3
Porsche 914-2       26.0
Lotus Europa        30.4
Ford Pantera L      15.8
Ferrari Dino        19.7
Maserati Bora       15.0
Volvo 142E          21.4
                    cyl
Mazda RX4             6
Mazda RX4 Wag         6
Datsun 710            4
Hornet 4 Drive        6
Hornet Sportabout     8
Valiant               6
Duster 360            8
Merc 240D             4
Merc 230              4
Merc 280              6
Merc 280C             6
Merc 450SE            8
Merc 450SL            8
Merc 450SLC           8
Cadillac Fleetwood    8
Lincoln Continental   8
Chrysler Imperial     8
Fiat 128              4
Honda Civic           4
Toyota Corolla        4
Toyota Corona         4
Dodge Challenger      8
AMC Javelin           8
Camaro Z28            8
Pontiac Firebird      8
Fiat X1-9             4
Porsche 914-2         4
Lotus Europa          4
Ford Pantera L        8
Ferrari Dino          6
Maserati Bora         8
Volvo 142E            4
                     disp
Mazda RX4           160.0
Mazda RX4 Wag       160.0
Datsun 710          108.0
Hornet 4 Drive      258.0
Hornet Sportabout   360.0
Valiant             225.0
Duster 360          360.0
Merc 240D           146.7
Merc 230            140.8
Merc 280            167.6
Merc 280C           167.6
Merc 450SE          275.8
Merc 450SL          275.8
Merc 450SLC         275.8
Cadillac Fleetwood  472.0
Lincoln Continental 460.0
Chrysler Imperial   440.0
Fiat 128             78.7
Honda Civic          75.7
Toyota Corolla       71.1
Toyota Corona       120.1
Dodge Challenger    318.0
AMC Javelin         304.0
Camaro Z28          350.0
Pontiac Firebird    400.0
Fiat X1-9            79.0
Porsche 914-2       120.3
Lotus Europa         95.1
Ford Pantera L      351.0
Ferrari Dino        145.0
Maserati Bora       301.0
Volvo 142E          121.0
                     hp
Mazda RX4           110
Mazda RX4 Wag       110
Datsun 710           93
Hornet 4 Drive      110
Hornet Sportabout   175
Valiant             105
Duster 360          245
Merc 240D            62
Merc 230             95
Merc 280            123
Merc 280C           123
Merc 450SE          180
Merc 450SL          180
Merc 450SLC         180
Cadillac Fleetwood  205
Lincoln Continental 215
Chrysler Imperial   230
Fiat 128             66
Honda Civic          52
Toyota Corolla       65
Toyota Corona        97
Dodge Challenger    150
AMC Javelin         150
Camaro Z28          245
Pontiac Firebird    175
Fiat X1-9            66
Porsche 914-2        91
Lotus Europa        113
Ford Pantera L      264
Ferrari Dino        175
Maserati Bora       335
Volvo 142E          109
                    drat
Mazda RX4           3.90
Mazda RX4 Wag       3.90
Datsun 710          3.85
Hornet 4 Drive      3.08
Hornet Sportabout   3.15
Valiant             2.76
Duster 360          3.21
Merc 240D           3.69
Merc 230            3.92
Merc 280            3.92
Merc 280C           3.92
Merc 450SE          3.07
Merc 450SL          3.07
Merc 450SLC         3.07
Cadillac Fleetwood  2.93
Lincoln Continental 3.00
Chrysler Imperial   3.23
Fiat 128            4.08
Honda Civic         4.93
Toyota Corolla      4.22
Toyota Corona       3.70
Dodge Challenger    2.76
AMC Javelin         3.15
Camaro Z28          3.73
Pontiac Firebird    3.08
Fiat X1-9           4.08
Porsche 914-2       4.43
Lotus Europa        3.77
Ford Pantera L      4.22
Ferrari Dino        3.62
Maserati Bora       3.54
Volvo 142E          4.11
                       wt
Mazda RX4           2.620
Mazda RX4 Wag       2.875
Datsun 710          2.320
Hornet 4 Drive      3.215
Hornet Sportabout   3.440
Valiant             3.460
Duster 360          3.570
Merc 240D           3.190
Merc 230            3.150
Merc 280            3.440
Merc 280C           3.440
Merc 450SE          4.070
Merc 450SL          3.730
Merc 450SLC         3.780
Cadillac Fleetwood  5.250
Lincoln Continental 5.424
Chrysler Imperial   5.345
Fiat 128            2.200
Honda Civic         1.615
Toyota Corolla      1.835
Toyota Corona       2.465
Dodge Challenger    3.520
AMC Javelin         3.435
Camaro Z28          3.840
Pontiac Firebird    3.845
Fiat X1-9           1.935
Porsche 914-2       2.140
Lotus Europa        1.513
Ford Pantera L      3.170
Ferrari Dino        2.770
Maserati Bora       3.570
Volvo 142E          2.780
                     qsec
Mazda RX4           16.46
Mazda RX4 Wag       17.02
Datsun 710          18.61
Hornet 4 Drive      19.44
Hornet Sportabout   17.02
Valiant             20.22
Duster 360          15.84
Merc 240D           20.00
Merc 230            22.90
Merc 280            18.30
Merc 280C           18.90
Merc 450SE          17.40
Merc 450SL          17.60
Merc 450SLC         18.00
Cadillac Fleetwood  17.98
Lincoln Continental 17.82
Chrysler Imperial   17.42
Fiat 128            19.47
Honda Civic         18.52
Toyota Corolla      19.90
Toyota Corona       20.01
Dodge Challenger    16.87
AMC Javelin         17.30
Camaro Z28          15.41
Pontiac Firebird    17.05
Fiat X1-9           18.90
Porsche 914-2       16.70
Lotus Europa        16.90
Ford Pantera L      14.50
Ferrari Dino        15.50
Maserati Bora       14.60
Volvo 142E          18.60
                    vs
Mazda RX4            0
Mazda RX4 Wag        0
Datsun 710           1
Hornet 4 Drive       1
Hornet Sportabout    0
Valiant              1
Duster 360           0
Merc 240D            1
Merc 230             1
Merc 280             1
Merc 280C            1
Merc 450SE           0
Merc 450SL           0
Merc 450SLC          0
Cadillac Fleetwood   0
Lincoln Continental  0
Chrysler Imperial    0
Fiat 128             1
Honda Civic          1
Toyota Corolla       1
Toyota Corona        1
Dodge Challenger     0
AMC Javelin          0
Camaro Z28           0
Pontiac Firebird     0
Fiat X1-9            1
Porsche 914-2        0
Lotus Europa         1
Ford Pantera L       0
Ferrari Dino         0
Maserati Bora        0
Volvo 142E           1
                    am
Mazda RX4            1
Mazda RX4 Wag        1
Datsun 710           1
Hornet 4 Drive       0
Hornet Sportabout    0
Valiant              0
Duster 360           0
Merc 240D            0
Merc 230             0
Merc 280             0
Merc 280C            0
Merc 450SE           0
Merc 450SL           0
Merc 450SLC          0
Cadillac Fleetwood   0
Lincoln Continental  0
Chrysler Imperial    0
Fiat 128             1
Honda Civic          1
Toyota Corolla       1
Toyota Corona        0
Dodge Challenger     0
AMC Javelin          0
Camaro Z28           0
Pontiac Firebird     0
Fiat X1-9            1
Porsche 914-2        1
Lotus Europa         1
Ford Pantera L       1
Ferrari Dino         1
Maserati Bora        1
Volvo 142E           1
                    gear
Mazda RX4              4
Mazda RX4 Wag          4
Datsun 710             4
Hornet 4 Drive         3
Hornet Sportabout      3
Valiant                3
Duster 360             3
Merc 240D              4
Merc 230               4
Merc 280               4
Merc 280C              4
Merc 450SE             3
Merc 450SL             3
Merc 450SLC            3
Cadillac Fleetwood     3
Lincoln Continental    3
Chrysler Imperial      3
Fiat 128               4
Honda Civic            4
Toyota Corolla         4
Toyota Corona          3
Dodge Challenger       3
AMC Javelin            3
Camaro Z28             3
Pontiac Firebird       3
Fiat X1-9              4
Porsche 914-2          5
Lotus Europa           5
Ford Pantera L         5
Ferrari Dino           5
Maserati Bora          5
Volvo 142E             4
                    carb
Mazda RX4              4
Mazda RX4 Wag          4
Datsun 710             1
Hornet 4 Drive         1
Hornet Sportabout      2
Valiant                1
Duster 360             4
Merc 240D              2
Merc 230               2
Merc 280               4
Merc 280C              4
Merc 450SE             3
Merc 450SL             3
Merc 450SLC            3
Cadillac Fleetwood     4
Lincoln Continental    4
Chrysler Imperial      4
Fiat 128               1
Honda Civic            2
Toyota Corolla         1
Toyota Corona          1
Dodge Challenger       2
AMC Javelin            2
Camaro Z28             4
Pontiac Firebird       2
Fiat X1-9              1
Porsche 914-2          2
Lotus Europa           2
Ford Pantera L         4
Ferrari Dino           6
Maserati Bora          8
Volvo 142E             2
> 
> mtcars2 <- as_tibble(cbind(mtcars, mtcars), .name_repair = "unique")
New names:
* mpg -> mpg...1
* cyl -> cyl...2
* disp -> disp...3
* hp -> hp...4
* drat -> drat...5
* ...
> print(mtcars2, n = 25, max_extra_cols = 3)
# A tibble: 32 × 22
   mpg...1 cyl...2 disp...3 hp...4 drat...5 wt...6 qsec...7 vs...8 am...9
     <dbl>   <dbl>    <dbl>  <dbl>    <dbl>  <dbl>    <dbl>  <dbl>  <dbl>
 1    21         6    160      110     3.9    2.62     16.5      0      1
 2    21         6    160      110     3.9    2.88     17.0      0      1
 3    22.8       4    108       93     3.85   2.32     18.6      1      1
 4    21.4       6    258      110     3.08   3.22     19.4      1      0
 5    18.7       8    360      175     3.15   3.44     17.0      0      0
 6    18.1       6    225      105     2.76   3.46     20.2      1      0
 7    14.3       8    360      245     3.21   3.57     15.8      0      0
 8    24.4       4    147.      62     3.69   3.19     20        1      0
 9    22.8       4    141.      95     3.92   3.15     22.9      1      0
10    19.2       6    168.     123     3.92   3.44     18.3      1      0
11    17.8       6    168.     123     3.92   3.44     18.9      1      0
12    16.4       8    276.     180     3.07   4.07     17.4      0      0
13    17.3       8    276.     180     3.07   3.73     17.6      0      0
14    15.2       8    276.     180     3.07   3.78     18        0      0
15    10.4       8    472      205     2.93   5.25     18.0      0      0
16    10.4       8    460      215     3      5.42     17.8      0      0
17    14.7       8    440      230     3.23   5.34     17.4      0      0
18    32.4       4     78.7     66     4.08   2.2      19.5      1      1
19    30.4       4     75.7     52     4.93   1.62     18.5      1      1
20    33.9       4     71.1     65     4.22   1.84     19.9      1      1
21    21.5       4    120.      97     3.7    2.46     20.0      1      0
22    15.5       8    318      150     2.76   3.52     16.9      0      0
23    15.2       8    304      150     3.15   3.44     17.3      0      0
24    13.3       8    350      245     3.73   3.84     15.4      0      0
25    19.2       8    400      175     3.08   3.84     17.0      0      0
# … with 7 more rows, and 13 more variables: gear...10 <dbl>, carb...11 <dbl>,
#   mpg...12 <dbl>, …
> 
> ## Don't show: 
> if (requireNamespace("nycflights13", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ print(nycflights13::flights, max_footer_lines = 1)
+ print(nycflights13::flights, width = Inf)
+ ## Don't show: 
+ }) # examplesIf
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("frame_matrix")
> ### * frame_matrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: frame_matrix
> ### Title: Row-wise matrix creation
> ### Aliases: frame_matrix
> 
> ### ** Examples
> 
> frame_matrix(
+   ~col1, ~col2,
+   1,     3,
+   5,     2
+ )
     col1 col2
[1,]    1    3
[2,]    5    2
> 
> 
> 
> cleanEx()
> nameEx("lst")
> ### * lst
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lst
> ### Title: Build a list
> ### Aliases: lst
> 
> ### ** Examples
> 
> # the value of n can be used immediately in the definition of x
> lst(n = 5, x = runif(n))
$n
[1] 5

$x
[1] 0.2655087 0.3721239 0.5728534 0.9082078 0.2016819

> 
> # missing names are constructed from user's input
> lst(1:3, z = letters[4:6], runif(3))
$`1:3`
[1] 1 2 3

$z
[1] "d" "e" "f"

$`runif(3)`
[1] 0.8983897 0.9446753 0.6607978

> 
> a <- 1:3
> b <- letters[4:6]
> lst(a, b)
$a
[1] 1 2 3

$b
[1] "d" "e" "f"

> 
> # pre-formed quoted expressions can be used with lst() and then
> # unquoted (with !!) or unquoted and spliced (with !!!)
> n1 <- 2
> n2 <- 3
> n_stuff <- quote(n1 + n2)
> x_stuff <- quote(seq_len(n))
> lst(!!!list(n = n_stuff, x = x_stuff))
$n
[1] 5

$x
[1] 1 2 3 4 5

> lst(n = !!n_stuff, x = !!x_stuff)
$n
[1] 5

$x
[1] 1 2 3 4 5

> lst(n = 4, x = !!x_stuff)
$n
[1] 4

$x
[1] 1 2 3 4

> lst(!!!list(n = 2, x = x_stuff))
$n
[1] 2

$x
[1] 1 2

> 
> 
> 
> cleanEx()
> nameEx("new_tibble")
> ### * new_tibble
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: new_tibble
> ### Title: Tibble constructor and validator
> ### Aliases: new_tibble validate_tibble
> 
> ### ** Examples
> 
> # The nrow argument is always required:
> new_tibble(list(a = 1:3, b = 4:6), nrow = 3)
# A tibble: 3 × 2
      a     b
  <int> <int>
1     1     4
2     2     5
3     3     6
> 
> # Existing row.names attributes are ignored:
> try(validate_tibble(new_tibble(trees, nrow = 3)))
Error : Tibble columns must have compatible sizes.
* Size 3: Requested with `nrow` argument.
* Size 31: Columns `Girth`, `Height`, and `Volume`.
ℹ Only values of size one are recycled.
> 
> # The length of all columns must be compatible with the nrow argument:
> try(validate_tibble(new_tibble(list(a = 1:3, b = 4:6), nrow = 2)))
Error : Tibble columns must have compatible sizes.
* Size 2: Requested with `nrow` argument.
* Size 3: Columns `a` and `b`.
ℹ Only values of size one are recycled.
> 
> 
> 
> cleanEx()
> nameEx("num")
> ### * num
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: num
> ### Title: Format a numeric vector
> ### Aliases: num
> 
> ### ** Examples
> 
> # Display as a vector
> num(9:11 * 100 + 0.5)
<pillar_num[3]>
[1]  900. 1000. 1100.
> 
> # Significant figures
> tibble(
+   x3 = num(9:11 * 100 + 0.5, sigfig = 3),
+   x4 = num(9:11 * 100 + 0.5, sigfig = 4),
+   x5 = num(9:11 * 100 + 0.5, sigfig = 5),
+ )
# A tibble: 3 × 3
       x3      x4      x5
  <num:3> <num:4> <num:5>
1    900.   900.5   900.5
2   1000.  1000.   1000.5
3   1100.  1100.   1100.5
> 
> # Maximum digits after the decimal points
> tibble(
+   x0 = num(9:11 * 100 + 0.5, digits =  0),
+   x1 = num(9:11 * 100 + 0.5, digits = -1),
+   x2 = num(9:11 * 100 + 0.5, digits = -2),
+ )
# A tibble: 3 × 3
        x0       x1       x2
  <num:.0> <num:.1> <num:.2>
1     900.    900.5    900.5
2    1000.   1000.5   1000.5
3    1100.   1100.5   1100.5
> 
> # Use fixed digits and a currency label
> tibble(
+   usd = num(9:11 * 100 + 0.5, digits = 2, label = "USD"),
+   gbp = num(9:11 * 100 + 0.5, digits = 2, label = "£"),
+   chf = num(9:11 * 100 + 0.5, digits = 2, label = "SFr")
+ )
# A tibble: 3 × 3
      usd     gbp     chf
      USD       £     SFr
1  900.50  900.50  900.50
2 1000.50 1000.50 1000.50
3 1100.50 1100.50 1100.50
> 
> # Scale
> tibble(
+   small  = num(9:11 / 1000 + 0.00005, label = "%", scale = 100),
+   medium = num(9:11 /  100 + 0.0005 , label = "%", scale = 100),
+   large  = num(9:11 /   10 + 0.005  , label = "%", scale = 100)
+ )
# A tibble: 3 × 3
  small medium large
      %      %     %
1 0.905   9.05  90.5
2 1.00   10.0  100. 
3 1.10   11.0  110. 
> 
> # Notation
> tibble(
+   sci = num(10^(-13:6), notation = "sci"),
+   eng = num(10^(-13:6), notation = "eng"),
+   si  = num(10^(-13:6), notation = "si"),
+   dec = num(10^(-13:6), notation = "dec")
+ )
# A tibble: 20 × 4
     sci     eng    si                   dec
   <sci>   <eng>  <si>                 <dec>
 1 1e-13 100e-15  100f       0.0000000000001
 2 1e-12   1e-12    1p       0.000000000001 
 3 1e-11  10e-12   10p       0.00000000001  
 4 1e-10 100e-12  100p       0.0000000001   
 5 1e- 9   1e- 9    1n       0.000000001    
 6 1e- 8  10e- 9   10n       0.00000001     
 7 1e- 7 100e- 9  100n       0.0000001      
 8 1e- 6   1e- 6    1µ       0.000001       
 9 1e- 5  10e- 6   10µ       0.00001        
10 1e- 4 100e- 6  100µ       0.0001         
11 1e- 3   1e- 3    1m       0.001          
12 1e- 2  10e- 3   10m       0.01           
13 1e- 1 100e- 3  100m       0.1            
14 1e+ 0   1e+ 0    1        1              
15 1e+ 1  10e+ 0   10       10              
16 1e+ 2 100e+ 0  100      100              
17 1e+ 3   1e+ 3    1k    1000              
18 1e+ 4  10e+ 3   10k   10000              
19 1e+ 5 100e+ 3  100k  100000              
20 1e+ 6   1e+ 6    1M 1000000              
> 
> # Fixed exponent
> tibble(
+   scimin = num(10^(-7:6) * 123, notation = "sci", fixed_exponent = -Inf),
+   engmin = num(10^(-7:6) * 123, notation = "eng", fixed_exponent = -Inf),
+   simin  = num(10^(-7:6) * 123, notation = "si",  fixed_exponent = -Inf)
+ )
# A tibble: 14 × 3
                 scimin               engmin              simin
                  <sci>                <eng>               <si>
 1              1.23e-5              12.3e-6              12.3µ
 2             12.3 e-5             123  e-6             123  µ
 3            123   e-5            1230  e-6            1230  µ
 4           1230   e-5           12300  e-6           12300  µ
 5          12300   e-5          123000  e-6          123000  µ
 6         123000   e-5         1230000  e-6         1230000  µ
 7        1230000   e-5        12300000  e-6        12300000  µ
 8       12300000   e-5       123000000  e-6       123000000  µ
 9      123000000   e-5      1230000000  e-6      1230000000  µ
10     1230000000   e-5     12300000000  e-6     12300000000  µ
11    12300000000   e-5    123000000000  e-6    123000000000  µ
12   123000000000   e-5   1230000000000  e-6   1230000000000  µ
13  1230000000000   e-5  12300000000000  e-6  12300000000000  µ
14 12300000000000   e-5 123000000000000  e-6 123000000000000  µ
> 
> tibble(
+   scismall = num(10^(-7:6) * 123, notation = "sci", fixed_exponent = -3),
+   scilarge = num(10^(-7:6) * 123, notation = "sci", fixed_exponent = 3),
+   scimax   = num(10^(-7:6) * 123, notation = "sci", fixed_exponent = Inf)
+ )
# A tibble: 14 × 3
               scismall            scilarge              scimax
                  <sci>               <sci>               <sci>
 1            0.0123e-3      0.0000000123e3 0.000000000000123e8
 2            0.123 e-3      0.000000123 e3 0.00000000000123 e8
 3            1.23  e-3      0.00000123  e3 0.0000000000123  e8
 4           12.3   e-3      0.0000123   e3 0.000000000123   e8
 5          123     e-3      0.000123    e3 0.00000000123    e8
 6         1230     e-3      0.00123     e3 0.0000000123     e8
 7        12300     e-3      0.0123      e3 0.000000123      e8
 8       123000     e-3      0.123       e3 0.00000123       e8
 9      1230000     e-3      1.23        e3 0.0000123        e8
10     12300000     e-3     12.3         e3 0.000123         e8
11    123000000     e-3    123           e3 0.00123          e8
12   1230000000     e-3   1230           e3 0.0123           e8
13  12300000000     e-3  12300           e3 0.123            e8
14 123000000000     e-3 123000           e3 1.23             e8
> 
> #' Extra significant digits
> tibble(
+   default = num(100 + 1:3 * 0.001),
+   extra1 = num(100 + 1:3 * 0.001, extra_sigfig = TRUE),
+   extra2 = num(100 + 1:3 * 0.0001, extra_sigfig = TRUE),
+   extra3 = num(10000 + 1:3 * 0.00001, extra_sigfig = TRUE)
+ )
# A tibble: 3 × 4
  default  extra1   extra2      extra3
    <num>   <num>    <num>       <num>
1    100. 100.001 100.0001 10000.00001
2    100. 100.002 100.0002 10000.00002
3    100. 100.003 100.0003 10000.00003
> 
> 
> 
> cleanEx()
> nameEx("rownames")
> ### * rownames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rownames
> ### Title: Tools for working with row names
> ### Aliases: rownames has_rownames remove_rownames rownames_to_column
> ###   rowid_to_column column_to_rownames
> 
> ### ** Examples
> 
> # Detect row names ----------------------------------------------------
> has_rownames(mtcars)
[1] TRUE
> has_rownames(trees)
[1] FALSE
> 
> # Remove row names ----------------------------------------------------
> remove_rownames(mtcars) %>% has_rownames()
[1] FALSE
> 
> # Convert between row names and column --------------------------------
> mtcars_tbl <- rownames_to_column(mtcars, var = "car") %>% as_tibble()
> mtcars_tbl
# A tibble: 32 × 12
   car           mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb
   <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
 1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4
 2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4
 3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1
 4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1
 5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2
 6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1
 7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4
 8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2
 9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2
10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4
# … with 22 more rows
> column_to_rownames(mtcars_tbl, var = "car") %>% head()
                   mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
> 
> # Adding rowid as a column --------------------------------------------
> rowid_to_column(trees) %>% head()
  rowid Girth Height Volume
1     1   8.3     70   10.3
2     2   8.6     65   10.3
3     3   8.8     63   10.2
4     4  10.5     72   16.4
5     5  10.7     81   18.8
6     6  10.8     83   19.7
> 
> 
> 
> 
> cleanEx()
> nameEx("subsetting")
> ### * subsetting
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subsetting
> ### Title: Subsetting tibbles
> ### Aliases: subsetting $.tbl_df $<-.tbl_df [[.tbl_df [[<-.tbl_df [.tbl_df
> ###   [<-.tbl_df
> 
> ### ** Examples
> 
> df <- data.frame(a = 1:3, bc = 4:6)
> tbl <- tibble(a = 1:3, bc = 4:6)
> 
> # Subsetting single columns:
> df[, "a"]
[1] 1 2 3
> tbl[, "a"]
# A tibble: 3 × 1
      a
  <int>
1     1
2     2
3     3
> tbl[, "a", drop = TRUE]
[1] 1 2 3
> as.data.frame(tbl)[, "a"]
[1] 1 2 3
> 
> # Subsetting single rows with the drop argument:
> df[1, , drop = TRUE]
$a
[1] 1

$bc
[1] 4

> tbl[1, , drop = TRUE]
# A tibble: 1 × 2
      a    bc
  <int> <int>
1     1     4
> as.list(tbl[1, ])
$a
[1] 1

$bc
[1] 4

> 
> ## Don't show: 
> if ((Sys.getenv("NOT_CRAN") != "true" || Sys.getenv("IN_PKGDOWN") == "true")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Accessing non-existent columns:
+ df$b
+ tbl$b
+ 
+ df[["b", exact = FALSE]]
+ tbl[["b", exact = FALSE]]
+ 
+ df$bd <- c("n", "e", "w")
+ tbl$bd <- c("n", "e", "w")
+ df$b
+ tbl$b
+ ## Don't show: 
+ }) # examplesIf
> df$b
[1] 4 5 6
> tbl$b
Warning: Unknown or uninitialised column: `b`.
NULL
> df[["b", exact = FALSE]]
[1] 4 5 6
> tbl[["b", exact = FALSE]]
Warning: `exact` ignored.
NULL
> df$bd <- c("n", "e", "w")
> tbl$bd <- c("n", "e", "w")
> df$b
NULL
> tbl$b
Warning: Unknown or uninitialised column: `b`.
NULL
> ## End(Don't show)
> 
> df$b <- 7:9
> tbl$b <- 7:9
> df$b
[1] 7 8 9
> tbl$b
[1] 7 8 9
> 
> # Identical behavior:
> tbl[1, ]
# A tibble: 1 × 4
      a    bc bd        b
  <int> <int> <chr> <int>
1     1     4 n         7
> tbl[1, c("bc", "a")]
# A tibble: 1 × 2
     bc     a
  <int> <int>
1     4     1
> tbl[, c("bc", "a")]
# A tibble: 3 × 2
     bc     a
  <int> <int>
1     4     1
2     5     2
3     6     3
> tbl[c("bc", "a")]
# A tibble: 3 × 2
     bc     a
  <int> <int>
1     4     1
2     5     2
3     6     3
> tbl["a"]
# A tibble: 3 × 1
      a
  <int>
1     1
2     2
3     3
> tbl$a
[1] 1 2 3
> tbl[["a"]]
[1] 1 2 3
> 
> 
> 
> cleanEx()
> nameEx("tibble")
> ### * tibble
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tibble
> ### Title: Build a data frame
> ### Aliases: tibble tibble_row
> 
> ### ** Examples
> 
> # Unnamed arguments are named with their expression:
> a <- 1:5
> tibble(a, a * 2)
# A tibble: 5 × 2
      a `a * 2`
  <int>   <dbl>
1     1       2
2     2       4
3     3       6
4     4       8
5     5      10
> 
> # Scalars (vectors of length one) are recycled:
> tibble(a, b = a * 2, c = 1)
# A tibble: 5 × 3
      a     b     c
  <int> <dbl> <dbl>
1     1     2     1
2     2     4     1
3     3     6     1
4     4     8     1
5     5    10     1
> 
> # Columns are available in subsequent expressions:
> tibble(x = runif(10), y = x * 2)
# A tibble: 10 × 2
        x     y
    <dbl> <dbl>
 1 0.266  0.531
 2 0.372  0.744
 3 0.573  1.15 
 4 0.908  1.82 
 5 0.202  0.403
 6 0.898  1.80 
 7 0.945  1.89 
 8 0.661  1.32 
 9 0.629  1.26 
10 0.0618 0.124
> 
> # tibble() never coerces its inputs,
> str(tibble(letters))
tibble [26 × 1] (S3: tbl_df/tbl/data.frame)
 $ letters: chr [1:26] "a" "b" "c" "d" ...
> str(tibble(x = list(diag(1), diag(2))))
tibble [2 × 1] (S3: tbl_df/tbl/data.frame)
 $ x:List of 2
  ..$ : num [1, 1] 1
  ..$ : num [1:2, 1:2] 1 0 0 1
> 
> # or munges column names (unless requested),
> tibble(`a + b` = 1:5)
# A tibble: 5 × 1
  `a + b`
    <int>
1       1
2       2
3       3
4       4
5       5
> 
> # but it forces you to take charge of names, if they need repair:
> try(tibble(x = 1, x = 2))
Error : Column name `x` must not be duplicated.
Use .name_repair to specify repair.
> tibble(x = 1, x = 2, .name_repair = "unique")
New names:
* x -> x...1
* x -> x...2
# A tibble: 1 × 2
  x...1 x...2
  <dbl> <dbl>
1     1     2
> tibble(x = 1, x = 2, .name_repair = "minimal")
# A tibble: 1 × 2
      x     x
  <dbl> <dbl>
1     1     2
> 
> ## By default, non-syntactic names are allowed,
> df <- tibble(`a 1` = 1, `a 2` = 2)
> ## because you can still index by name:
> df[["a 1"]]
[1] 1
> df$`a 1`
[1] 1
> with(df, `a 1`)
[1] 1
> 
> ## Syntactic names are easier to work with, though, and you can request them:
> df <- tibble(`a 1` = 1, `a 2` = 2, .name_repair = "universal")
New names:
* `a 1` -> a.1
* `a 2` -> a.2
> df$a.1
[1] 1
> 
> ## You can specify your own name repair function:
> tibble(x = 1, x = 2, .name_repair = make.unique)
# A tibble: 1 × 2
      x   x.1
  <dbl> <dbl>
1     1     2
> 
> fix_names <- function(x) gsub("\\s+", "_", x)
> tibble(`year 1` = 1, `year 2` = 2, .name_repair = fix_names)
# A tibble: 1 × 2
  year_1 year_2
   <dbl>  <dbl>
1      1      2
> 
> ## purrr-style anonymous functions and constants
> ## are also supported
> tibble(x = 1, x = 2, .name_repair = ~ make.names(., unique = TRUE))
# A tibble: 1 × 2
      x   x.1
  <dbl> <dbl>
1     1     2
> 
> tibble(x = 1, x = 2, .name_repair = ~ c("a", "b"))
# A tibble: 1 × 2
      a     b
  <dbl> <dbl>
1     1     2
> 
> # Tibbles can contain columns that are tibbles or matrices
> # if the number of rows is compatible. Unnamed tibbled are
> # spliced, i.e. the inner columns are inserted into the
> # tibble under construction.
> tibble(
+   a = 1:3,
+   tibble(
+     b = 4:6,
+     c = 7:9
+   ),
+   d = tibble(
+     e = tibble(
+       f = b
+     )
+   )
+ )
# A tibble: 3 × 4
      a     b     c d$e$f
  <int> <int> <int> <int>
1     1     4     7     4
2     2     5     8     5
3     3     6     9     6
> tibble(
+   a = 1:3,
+   b = diag(3),
+   c = cor(trees)
+ )
# A tibble: 3 × 3
      a b[,1]  [,2]  [,3] c[,"Girth"] [,"Height"] [,"Volume"]
  <int> <dbl> <dbl> <dbl>       <dbl>       <dbl>       <dbl>
1     1     1     0     0       1           0.519       0.967
2     2     0     1     0       0.519       1           0.598
3     3     0     0     1       0.967       0.598       1    
> 
> # data can not contain POSIXlt columns, or tibbles or matrices
> # with incompatible number of rows:
> try(tibble(y = strptime("2000/01/01", "%x")))
# A tibble: 1 × 1
  y     
  <dttm>
1 NA    
> try(tibble(a = 1:3, b = tibble(c = 4:7)))
Error : Tibble columns must have compatible sizes.
* Size 3: Existing data.
* Size 4: Column `b`.
ℹ Only values of size one are recycled.
> 
> # Use := to create columns with names that start with a dot:
> tibble(.dotted = 3)
# A tibble: 1 × 1
  .dotted
    <dbl>
1       3
> tibble(.dotted := 3)
# A tibble: 1 × 1
  .dotted
    <dbl>
1       3
> 
> # You can unquote an expression:
> x <- 3
> tibble(x = 1, y = x)
# A tibble: 1 × 2
      x     y
  <dbl> <dbl>
1     1     1
> tibble(x = 1, y = !!x)
# A tibble: 1 × 2
      x     y
  <dbl> <dbl>
1     1     3
> 
> # You can splice-unquote a list of quosures and expressions:
> tibble(!!! list(x = rlang::quo(1:10), y = quote(x * 2)))
# A tibble: 10 × 2
       x     y
   <int> <dbl>
 1     1     2
 2     2     4
 3     3     6
 4     4     8
 5     5    10
 6     6    12
 7     7    14
 8     8    16
 9     9    18
10    10    20
> 
> 
> # Use tibble_row() to construct a one-row tibble:
> tibble_row(a = 1, lm = lm(Height ~ Girth + Volume, data = trees))
# A tibble: 1 × 2
      a lm    
  <dbl> <list>
1     1 <lm>  
> 
> 
> 
> cleanEx()
> nameEx("tibble_options")
> ### * tibble_options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tibble_options
> ### Title: Package options
> ### Aliases: tibble_options
> ### Keywords: datasets
> 
> ### ** Examples
> 
> # Default setting:
> getOption("tibble.view_max")
NULL
> 
> # Change for the duration of the session:
> old <- options(tibble.view_max = 100)
> 
> # view() would show only 100 rows e.g. for a lazy data frame
> 
> # Change back to the original value:
> options(old)
> 
> # Local scope:
> local({
+   rlang::local_options(tibble.view_max = 100)
+   # view() would show only 100 rows e.g. for a lazy data frame
+ })
> # view() would show the default 1000 rows e.g. for a lazy data frame
> 
> 
> 
> cleanEx()
> nameEx("tribble")
> ### * tribble
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tribble
> ### Title: Row-wise tibble creation
> ### Aliases: tribble
> 
> ### ** Examples
> 
> tribble(
+   ~colA, ~colB,
+   "a",   1,
+   "b",   2,
+   "c",   3
+ )
# A tibble: 3 × 2
  colA   colB
  <chr> <dbl>
1 a         1
2 b         2
3 c         3
> 
> # tribble will create a list column if the value in any cell is
> # not a scalar
> tribble(
+   ~x,  ~y,
+   "a", 1:3,
+   "b", 4:6
+ )
# A tibble: 2 × 2
  x     y        
  <chr> <list>   
1 a     <int [3]>
2 b     <int [3]>
> ## Don't show: 
> if (rlang::is_installed("dplyr") && packageVersion("dplyr") >= "1.0.5") (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ 
+ # Use dplyr::mutate(dplyr::across(...)) to assign an explicit type
+ tribble(
+   ~ a,          ~ b,          ~ c,
+     1, "2000-01-01",        "1.5"
+ ) %>%
+   dplyr::mutate(
+     dplyr::across(a, as.integer),
+     dplyr::across(b, as.Date)
+   )
+ ## Don't show: 
+ }) # examplesIf
> tribble(~a, ~b, ~c, 1, "2000-01-01", "1.5") %>% dplyr::mutate(dplyr::across(a, 
+     as.integer), dplyr::across(b, as.Date))
# A tibble: 1 × 3
      a b          c    
  <int> <date>     <chr>
1     1 2000-01-01 1.5  
> ## End(Don't show)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.476 0.045 1.521 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
