
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "tidyselect"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('tidyselect')
Warning: package ‘tidyselect’ was built under R version 4.0.4
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("eval_select")
> ### * eval_select
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eval_rename
> ### Title: Evaluate an expression with tidyselect semantics
> ### Aliases: eval_rename eval_select
> 
> ### ** Examples
> 
> library(rlang)
Warning: package ‘rlang’ was built under R version 4.0.4
> 
> # Interpret defused code as selection:
> x <- expr(mpg:cyl)
> eval_select(x, mtcars)
mpg cyl 
  1   2 
> 
> # Interpret defused code as a renaming selection. All inputs must
> # be named within `c()`:
> try(eval_rename(expr(mpg), mtcars))
Error : All renaming inputs must be named.
> eval_rename(expr(c(foo = mpg)), mtcars)
foo 
  1 
> 
> 
> # Within a function, use `enquo()` to defuse one argument:
> my_function <- function(x, expr) {
+   eval_select(enquo(expr), x)
+ }
> 
> # If your function takes dots, evaluate a defused call to `c(...)`
> # with `expr(c(...))`:
> my_function <- function(.x, ...) {
+   eval_select(expr(c(...)), .x)
+ }
> 
> # If your function takes dots and a named argument, use `{{ }}`
> # inside the defused expression to tunnel it inside the tidyselect DSL:
> my_function <- function(.x, .expr, ...) {
+   eval_select(expr(c({{ .expr }}, ...)), .x)
+ }
> 
> # Note that the trick above works because `expr({{ arg }})` is the
> # same as `enquo(arg)`.
> 
> 
> # The evaluators return a named vector of locations. Here are
> # examples of using these location vectors to implement `select()`
> # and `rename()`:
> select <- function(.x, ...) {
+   pos <- eval_select(expr(c(...)), .x)
+   set_names(.x[pos], names(pos))
+ }
> rename <- function(.x, ...) {
+   pos <- eval_rename(expr(c(...)), .x)
+   names(.x)[pos] <- names(pos)
+   .x
+ }
> 
> select(mtcars, mpg:cyl)
                     mpg cyl
Mazda RX4           21.0   6
Mazda RX4 Wag       21.0   6
Datsun 710          22.8   4
Hornet 4 Drive      21.4   6
Hornet Sportabout   18.7   8
Valiant             18.1   6
Duster 360          14.3   8
Merc 240D           24.4   4
Merc 230            22.8   4
Merc 280            19.2   6
Merc 280C           17.8   6
Merc 450SE          16.4   8
Merc 450SL          17.3   8
Merc 450SLC         15.2   8
Cadillac Fleetwood  10.4   8
Lincoln Continental 10.4   8
Chrysler Imperial   14.7   8
Fiat 128            32.4   4
Honda Civic         30.4   4
Toyota Corolla      33.9   4
Toyota Corona       21.5   4
Dodge Challenger    15.5   8
AMC Javelin         15.2   8
Camaro Z28          13.3   8
Pontiac Firebird    19.2   8
Fiat X1-9           27.3   4
Porsche 914-2       26.0   4
Lotus Europa        30.4   4
Ford Pantera L      15.8   8
Ferrari Dino        19.7   6
Maserati Bora       15.0   8
Volvo 142E          21.4   4
> rename(mtcars, foo = mpg)
                     foo cyl  disp  hp drat    wt  qsec vs am gear carb
Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4
Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2
Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1
Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4
Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2
Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2
Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4
Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4
Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3
Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3
Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3
Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4
Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4
Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4
Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1
Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2
Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1
Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1
Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2
AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2
Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4
Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2
Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1
Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2
Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2
Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4
Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6
Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8
Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2
> 
> 
> 
> cleanEx()

detaching ‘package:rlang’

> nameEx("poke_vars")
> ### * poke_vars
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: poke_vars
> ### Title: Replace or get current variables
> ### Aliases: poke_vars scoped_vars with_vars has_vars
> ### Keywords: internal
> 
> ### ** Examples
> 
> poke_vars(letters)
> peek_vars()
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s"
[20] "t" "u" "v" "w" "x" "y" "z"
> 
> # Now that the variables are registered, the helpers can figure out
> # the locations of elements within the variable vector:
> all_of(c("d", "z"))
[1] "d" "z"
> 
> # In a function be sure to restore the previous variables. An exit
> # hook is the best way to do it:
> fn <- function(vars) {
+   old <- poke_vars(vars)
+   on.exit(poke_vars(old))
+ 
+   all_of("d")
+ }
> fn(letters)
[1] "d"
> fn(letters[3:5])
[1] "d"
> 
> # The previous variables are still registered after fn() was
> # called:
> peek_vars()
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s"
[20] "t" "u" "v" "w" "x" "y" "z"
> 
> 
> # It is recommended to use the scoped variant as it restores the
> # state automatically when the function returns:
> fn <- function(vars) {
+   scoped_vars(vars)
+   starts_with("r")
+ }
> fn(c("red", "blue", "rose"))
[1] 1 3
> 
> # The with_vars() helper makes it easy to pass an expression that
> # should be evaluated in a variable context. Thanks to lazy
> # evaluation, you can just pass the expression argument from your
> # wrapper to with_vars():
> fn <- function(expr) {
+   vars <- c("red", "blue", "rose")
+   with_vars(vars, expr)
+ }
> fn(starts_with("r"))
[1] 1 3
> 
> 
> 
> cleanEx()
> nameEx("vars_pull")
> ### * vars_pull
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vars_pull
> ### Title: Select variable
> ### Aliases: vars_pull
> ### Keywords: internal
> 
> ### ** Examples
> 
> # It takes its argument by expression:
> vars_pull(letters, c)
[1] "c"
> 
> # Negative numbers select from the end:
> vars_pull(letters, -3)
[1] "x"
> 
> # You can unquote variables:
> var <- 10
> vars_pull(letters, !! var)
[1] "j"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.256 0.013 0.269 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
